---
title: "Estimating Demographics of Custom Spatial Features"
subtitle: "Accessing U.S. Census Bureau Data & Calculating Weighted Averages with Areal- and Population-Weighted Interpolation"
number-sections: true
toc: true
toc-depth: 4
format:
    html:
        self-contained: false
bibliography: references.bib
---

```{=html}
<!-- NOTE: this makes table captions left aligned - needed because centered caption wasn't visible for tables with lots of columns --> 
<style type="text/css">
caption, .table-caption {
text-align: left;
}
</style>
```
## Background {#sec-background}

::: callout-note
For comments, suggestions, corrections, or questions on anything below, contact [david.altare\@waterboards.ca.gov](mailto:david.altare@waterboards.ca.gov), or [open an issue](https://github.com/daltare/example-census-race-ethnicity-calculation/issues) on github.
:::

::: callout-warning
This is a draft / work in progress – some parts are still under development, and existing parts may change.
:::

This document provides an example of how to use tools available from the [R programming language](https://www.R-project.org/) [@R] to estimate characteristics of any given *target* spatial area(s) (e.g., neighborhoods, project boundaries, water supplier service areas, etc.) based on data from a *source* dataset containing the characteristic data of interest (e.g., census data, CalEnvrioScreen scores, etc.), especially when the boundaries of the *source* and *target* areas overlap but don't necessarily align with each other. It also provides some brief background on the various types of data available from the U.S Census Bureau, and links to a few places to find more in-depth information.

This particular example estimates demographic characteristics of community water systems in the Sacramento County area (the *target* dataset). It uses the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package [@tidycensus] to access selected demographic data from the U.S. Census Bureau (the *source* dataset) for census units whose spatial extent covers those water systems' service areas, then uses the [`sf`](https://r-spatial.github.io/sf/) package [@sf] package (for working with spatial data) and the [`tidyverse`](https://www.tidyverse.org/) collection of packages [@tidyverse] (for general data cleaning and transformation) to estimate some demographic characteristics of each water system based on that census data. It also uses the [`areal`](https://chris-prener.github.io/areal/) R package [@areal] to check some of the results, and as general guidance on the principles and techniques for implementing areal interpolation.

This example is just intended to be a simplified demonstration of a possible workflow. For a real analysis, additional steps and considerations – that may not be covered here – may be needed to deal with data inconsistencies (e.g., missing or incomplete data), required level of precision and acceptable assumptions (e.g. more fine-grained datasets or more sophisticated techniques could be used to estimate/model population distributions), or other project-specific issues that might arise.

## Setup {#sec-setup}

The code block below loads required packages for this analysis, and sets some user-defined options and defaults. If they aren't already installed on your computer, you can install them with the R command `install.packages('package-name')` (and replace `package-name` with the name of the package you want to install).

```{r}
#| message: false
#| warning: false

# packages ----
library(tidycensus)
library(tigris)
library(tidyverse)
library(sf)
library(areal)
library(janitor)
library(here)
library(units)
library(knitr)
library(kableExtra)
library(tmap)
library(patchwork)
library(scales)
library(digest)
library(mapview)
library(biscale)
library(cowplot)
library(glue)
library(ggtext)

# conflicts ----
library(conflicted)
conflicts_prefer(dplyr::filter)

# options ----
options(scipen = 999) # turn off scientific notation
options(tigris_use_cache = TRUE) # use data caching for tigris

# reference system ----
## set common projected coordinate reference system used throughout this analysis
crs_projected <- 3310 # see: https://epsg.io/3310
```

## Census Data Overview {#sec-census-overview}

This section provides some brief background on the various types of data available from the U.S. Census Bureau (a later section - @sec-census-access - demonstrates how to retrieve data from the U.S. Census Bureau using the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package). Most of the information covered here comes from the book [Analyzing US Census Data: Methods, Maps, and Models in R](https://walker-data.com/census-r/index.html), which is a great source of information if you'd like more detail about any of the topics below [@walker2023].

::: callout-note
If you're already familiar with Census data and want to skip this overview, go directly to the next section: @sec-system-boundaries
:::

Different census products/surveys contain data on different variables, at different geographic scales, over varying periods of time, and with varying levels of certainty. Therefore, there are a number of judgement calls to make when determining which type of census data to use for an analysis – e.g., which data product to use (Decennial Census or American Community Survey), which geographic scale to use (e.g., Block, Block Group, Tract, etc.), what time frame to use, which variables to assess, etc.

More detailed information about U.S. Census Bureau's data products and other topics mentioned below is available [here](https://walker-data.com/census-r/the-united-states-census-and-the-r-programming-language.html#the-united-states-census-and-the-r-programming-language).

### Census Unit Geography / Hierarchy {#sec-census-hierarchy}

Publicly available datasets from the U.S Census Bureau generally consist of individual survey responses aggregated to defined census units (e.g., census tracts) that cover varying geographic scales. Some of these units are nested and can be neatly aggregated (e.g., each census tract is composed of a collection of block groups, and each block group is composed of a collection of blocks), while other census units are outside this hierarchy (e.g., Zip Code Tabulation Areas don't coincide with any other census unit). @fig-census-hierarchies shows the relationship of all of the various census units.

Commonly used census statistical units like tracts and block groups have target population size ranges, and can be adjusted every 10 years (with the decennial census) based on population changes. For example, all ACS 5-year datasets prior to 2020 use the 2010 boundaries for tracts, block groups, and blocks, and all ACS 5-year datasets from [2020 onward](https://www.census.gov/programs-surveys/acs/technical-documentation/table-and-geography-changes/2020/geography-changes.html) (presumably through 2029) use the 2020 boundaries for those units. [Census tracts](https://www.census.gov/programs-surveys/geography/about/glossary.html#par_textimage_13) are generally around 4,000 people, with a range from about 1,200 to 8,000, and [block groups](https://www.census.gov/programs-surveys/geography/about/glossary.html#par_textimage_4) generally contain 600 to 3,000 people. [Blocks](https://www.census.gov/programs-surveys/geography/about/glossary.html#par_textimage_5) are the smallest census units, and are "areas bounded by visible features, such as streets, roads, streams, and railroad tracks, and by nonvisible boundaries, such as selected property lines and city, township, school district, and county limits and short line-of-sight extensions of streets and roads". For example, a census block may be "a city block bounded on all sides by streets", while "blocks in suburban and rural areas may be larger, more irregular in shape, and bounded by a variety of features, such as roads, streams, and transmission lines".

::: callout-caution
Census boundaries can change over time. Commonly used statistical units like tracts, block groups, and blocks tend to be revised every 10 years (with the decennial census), so it's important to use a census boundary dataset that matches the version of the census demographic data you're retrieving; otherwise, the demographic data may not match geographic areas in your boundary dataset. In some cases, a census unit that exists in a given year of the census data may not exist at all in a different year's dataset, because census units can be split or merged when boundaries are revised.

For more information, see [here](https://www.census.gov/content/dam/Census/library/publications/2020/acs/acs_geography_handbook_2020_ch02.pdf) or [here](https://www.census.gov/programs-surveys/acs/geography-acs/geography-boundaries-by-year.html) or [here](https://www.census.gov/programs-surveys/geography/about/glossary.html#par_textimage_6) or [here](https://www.census.gov/data/academy/data-gems/2021/compare-2020-census-and-2010-census-redistricting-data.html).
:::

For a list of the different geographic units available for each of the different census products/surveys (see @sec-census-datasets) that can be accessed via the `tidycensus` package, go [here](https://walker-data.com/tidycensus/articles/basic-usage.html#geography-in-tidycensus).

![Census Unit Hierarchies](https://walker-data.com/census-r/img/screenshots/census-hierarchies.png){#fig-census-hierarchies}

### Census Datasets / Surveys {#sec-census-datasets}

The Decennial Census is conducted every 10 years, and is intended to provide a complete count of the US population and assist with political redistricting. As a result, it collects a relatively limited set of basic demographic data, but (should) provide a high degree of precision (i.e., in general it should provide exact counts). It is available for geographic units down to the census block (the smallest census unit available – see @sec-census-hierarchy). For information about existing and planned future releases of 2020 census data products, go [here](https://www.census.gov/programs-surveys/decennial-census/decade/2020/planning-management/release/about-2020-data-products.html).

The American Community Survey (ACS) provides a much larger array of demographic information than the Decennial Census, and is updated more frequently. The ACS is based on a sample of the population (rather than a count of the entire population, as in the Decennial Census), so it represents estimated values rather than precise counts; therefore, each data point is available as an estimate (typically labeled with an "E" in census variable codes, which are discussed in @sec-census-variables ) along with an associated margin of error (typically labeled with "M" or "MOE" in census variable codes) around its estimated value.

The ACS is available in two formats. The 5-year ACS is a rolling average of 5 years of data (e.g., the 2021 5-year ACS dataset is an average of the ACS data from 2017 through 2021), and is generally available for geographic units down to the census block group (though some 5-year ACS data may only be available at less granular levels). The 1-year ACS provides data for a single year, and is only available for geographies with population greater than 65,000 (e.g., large cities and counties). Therefore, only the 5-year ACS will be useful for any analysis at a relatively fine scale (e.g., anything that requires data at or more detailed than the census tract level, or any analysis that considers smaller counties/cities – by definition, census tracts always contain significantly fewer than 65,000 people).

In addition to the Decennial Census and ACS data, a number of other census data products/surveys are also available. For example, see the `censusapi` R package ([here](https://github.com/hrecht/censusapi) or [here](https://www.hrecht.com/censusapi/index.html)) for access to over 300 census API endpoints. For historical census data, see the discussion [here](https://walker-data.com/census-r/other-census-and-government-data-resources.html?q=API%20endpoint#other-census-and-government-data-resources) on using NHGIS, IPUMS, and the `ipumsr` package.

### Census Variables / Codes {#sec-census-variables}

Each census product collects data for many different demographic variables, and each variable is generally associated with an identifier code. In order to access census data programmatically, you often need to know the code associated with each variable of interest. When determining which variables to use, you need to consider what census product contains those variables (see @sec-census-datasets) and how they differ in terms of time frame, precision, spatial granularity (see @sec-census-hierarchy), etc.

The `tidycensus` package offers a convenient generic way to search for variables across different census products using the `load_variables()` function, as described [here](https://walker-data.com/tidycensus/articles/basic-usage.html#searching-for-variables).

The following websites may also be helpful for exploring the various census data products and finding the variable names and codes they contain:

-   Census Reporter (for ACS data): <https://censusreporter.org/> (especially <https://censusreporter.org/topics/table-codes/>)

-   Census Bureau's list of variable codes, e.g.:

    -   2020 Census codes: <https://api.census.gov/data/2020/dec/pl/variables.html>

    -   2022 ACS 5 year codes: <https://api.census.gov/data/2022/acs/acs5/variables.html>

-   Census Bureau's data interface (for Decennial Census and ACS, and other census datasets): <https://data.census.gov/cedsci/>

-   National Historical Geographic Information System (NHGIS) (for ACS data and historical decennial Census data): <https://www.nhgis.org/>

## Target Data Boundaries (Water Systems) {#sec-system-boundaries}

In this section, we'll get the service area boundaries for Community Water Systems within the Sacramento County area. This will serve as the *target* dataset – i.e., the set of areas which we'll be estimating the characteristics of – and will also be used to specify the geographic areas of the census data we want to retrieve. We'll also get a dataset of county boundaries which overlap the water service areas in this study, which can also help with specifying what census data to access and/or be used to make maps and visualizations.

### Read Water System Data

In this case, we'll get the water system dataset from a shapefile that's saved locally, then transform that dataset into a common coordinate reference system for mapping and analysis (which is defined above in the variable `crs_projected`).

This water system dataset comes from the [California Drinking Water System Area Boundaries dataset](https://gispublic.waterboards.ca.gov/portal/home/item.html?id=fbba842bf134497c9d611ad506ec48cc). For this example, the dataset has been pre-filtered for systems within Sacramento County (by selecting records where the `COUNTY` field is "SACRAMENTO") and for Community Water Systems (by selecting records where the `STATE_CLAS` field is "COMMUNITY"). Some un-needed fields have also been dropped, remaining fields have been re-orderd.

```{r}
#| message: false
#| warning: false
#| results: hide

water_systems_sac <- st_read(here('02_data_input', 
                                  'water_supplier_boundaries_sac', 
                                  'System_Area_Boundary_Layer_Sac.shp')) %>% 
    st_transform(crs_projected) # transform to common coordinate system
```

We can use the `glimpse` function (below) to take get a sense of what type of information is available in the water system dataset and how it's structured.

```{r}
glimpse(water_systems_sac)
```

Note that this dataset already includes a `POPULATION` variable that indicates the population served by each water system, which we renamed to `water_system_population_reported` above (note: I'm not exactly how the data in this variable is derived). However, for this analysis we'll be making our own estimate of the population within each system's service area based on U.S. Census Bureau data and the spatial representation of the system boundaries. Given the uncertainty in how the reported population data was derived (including potential temporal differences), the population estimates produced here will likely will not exactly match the reported population data; but, the reported population data may serve as a useful check to make sure our estimates are reasonable.

To make the water system data easier to work with, we can make some more descriptive field names (note that while it's redundant, we're using the prefix `water_system_` for all field names to distinguish data types when joining this data with other datasets later).

```{r}
water_systems_sac <- water_systems_sac %>% 
    rename(water_system_name = WATER_SY_1, 
           water_system_number = WATER_SYST,
           water_system_id	= GLOBALID,
           water_system_boundary_type = BOUNDARY_T,
           water_system_owner_type	= OWNER_TYPE,
           water_system_county	= COUNTY,
           water_system_regulating_agency = REGULATING,
           water_system_federal_class = FEDERAL_CL,
           water_system_state_class = STATE_CLAS,
           water_system_service_connections = SERVICE_CO,
           water_system_population_reported = POPULATION)
```

Here's a view of the structure of the revised dataset:

```{r}
glimpse(water_systems_sac)
```

#### Alternative Data Retrieval Method

Reading in data from a shapefile is shown above because it's likely one of the more common ways that users will access their *target* boundary data. However, depending on the dataset, there may be other ways to access the data. For example, the code chunk below demonstrates an alternative – using the [`arcgislayers`](https://r.esri.com/arcgislayers/index.html) package [@arcgislayers] – that connects directly to the source dataset (to retrieve the most recent version) and applies the filters needed to reproduce the dataset in the `System_Area_Boundary_Layer_Sac.shp` file. Also, note that storing data in formats other than the common shapefile format – such as the geopackage format – can have some advantages (for example, see [here](http://switchfromshapefile.org/)).

```{r}
#| eval: false

# load arcgislayers package (see: https://r.esri.com/arcgislayers/index.html)
install.packages('pak') # only needed if the pak package is not already installed
pak::pkg_install("R-ArcGIS/arcgislayers", dependencies = TRUE)

library(arcgislayers)

# define link to data source
url_feature <- 'https://gispublic.waterboards.ca.gov/portalserver/rest/services/Drinking_Water/California_Drinking_water_system_numberem_Area_Boundaries/FeatureServer/0'

# connect to data source
water_systems_feature_layer <- arc_open(url_feature)

# download and filter data from source
water_systems_sac <- arc_select(
    water_systems_feature_layer,
    # apply filters
    where = "COUNTY = 'SACRAMENTO' AND STATE_CLASSIFICATION = 'COMMUNITY'",
    # select fields
    fields = c('WATER_SYSTEM_NAME', 'WATER_SYSTEM_NUMBER', 'GLOBALID',
               'BOUNDARY_TYPE', 'OWNER_TYPE_CODE', 'COUNTY',
               'REGULATING_AGENCY', 'FEDERAL_CLASSIFICATION', 
               'STATE_CLASSIFICATION', 'SERVICE_CONNECTIONS', 'POPULATION')) %>%
    # transform to common coordinate system
    st_transform(crs_projected) %>%
    # rename fields
    rename(water_system_name = WATER_SYSTEM_NAME,
           water_system_number = WATER_SYSTEM_NUMBER,
           water_system_id = GLOBALID,
           water_system_boundary_type = BOUNDARY_TYPE,
           water_system_owner_type = OWNER_TYPE_CODE,
           water_system_county = COUNTY,
           water_system_regulating_agency = REGULATING_AGENCY,
           water_system_federal_class = FEDERAL_CLASSIFICATION,
           water_system_state_class = STATE_CLASSIFICATION,
           water_system_service_connections = SERVICE_CONNECTIONS,
           water_system_population_reported = POPULATION)
```

### Get County Boundaries {#sec-county-boundaries}

When accessing census data using the `tidycensus` R package as shown below (in @sec-census-access), it's often useful (though not strictly required) to know which counties overlap the target dataset (note that, even though the dataset is filtered for systems in Sacramento county, there are some systems whose boundaries extend into neighboring counties). County boundaries may also be useful for making maps in later stages of the analysis. We can get a dataset of county boundaries in California from the [TIGER dataset](https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html), which can be accessed with R using the [`tigris`](https://github.com/walkerke/tigris) R package [@tigris].

```{r}
#| message: false
#| warning: false
#| results: hide

counties_ca <- counties(state = 'CA', 
                        cb = TRUE) %>% # simplified
    st_transform(crs_projected) # transform to common coordinate system
```

Then, we can get a list of counties that overlap with the boundaries of the Sacramento area community water systems obtained above.

```{r}
counties_overlap <- counties_ca %>% 
    st_filter(water_systems_sac, 
              .predicate = st_overlaps)

counties_list <- counties_overlap %>% pull(NAME)
```

The counties in the `counties_list` variable are: `r counties_list`.

### Plot Target Data

@fig-suppliers-counties shows the water systems and county boundaries in an interactive map.

```{r}
#| label: fig-suppliers-counties
#| fig-cap: "Selected water systems (with county boundaries for reference)."

mapview(counties_overlap, 
        alpha.regions = 0, 
        zcol = 'NAME', 
        layer.name = 'County', 
        legend = FALSE) + 
    mapview(water_systems_sac, 
            zcol = 'water_system_name', 
            layer.name = 'Water System', 
            legend = FALSE)
```

## Accessing Census Data {#sec-census-access}

The following sections demonstrate how to retrieve census data from the Decennial Census and the ACS using the [`tidycensus`](https://walker-data.com/tidycensus/index.html) R package.

In order to use the `tidycensus` R package, you'll need to obtain a personal API key from the US Census Bureau (which is free and available to anyone) by signing up here: <http://api.census.gov/data/key_signup.html>. Once you have your API key, you'll need to register it in R by entering the command `census_api_key(key = "YOUR API KEY", install = TRUE)` in the console. Note that the `install = TRUE` argument means that the key is saved for all future R sessions, so you'll only need to run that command once on your computer (rather than including it in your scripts). Alternatively, you could save your key to an environment variable and retrieve it using `Sys.getenv()`. Either way will help you avoid the possibility of entering your API key into any scripts that could be shared publicly.

::: callout-caution
Because the boundaries of census units (e.g., tracts, block groups, blocks, etc) can change over time, it's important to make sure that the version (year) of the census data you're retrieving matches the version of the census boundary dataset you're using. The methods shown below retrieve the census boundary dataset together with the census demographic data, which ensures that this won't be a potential problem. However, if you use a different workflow that retrieves the geographic boundaries and demographic data via separate processes, you should ensure that the versions are consistent.
:::

Before downloading the census data, we can create an object that we can use to filter our requests to the census API so that they will only return census units that overlap with our target areas (the object will be passed to the `filter_by` argument of the `get_decennial` function below). Note that this isn't strictly necessary (you could also apply the filter after making the API request), but may helpful to speed the query and reduce memory usage, especially in the case of large queries.

::: {#nte-filter-by .callout-note}
At the time of this writing, the `filter_by` argument of the tidycensus `get_decennial` and `get_acs` functions is fairly new, and not yet included in the official documentation.

Also, the `filter_by` argument is optional, and only appears to accept a simple features (sf) object with a single row / feature (e.g., a single water system), and will not accept an sf object with multiple rows / features. The process below attempts to work around this constraint by joining all of the selected water systems into a single multi-part polygon (i.e., an sf object with a single row). However, if you only want to retrieve data for census units that overlap a single target area (e.g., a single water system), you can skip this step.
:::

```{r}
#| message: false
#| warning: false
#| results: hide
#| lst-label: lst-filter_obj
#| lst-cap: Create object for filtering the API query

water_systems_filter <- water_systems_sac %>% 
    st_union() %>% 
    st_as_sf()
```


### American Community Survey (ACS) Data {#sec-census-access-acs}

This section retrieves data from the ACS, using the `get_acs()` function from the `tidycensus` package. As of this writing, the most recent version of the 5-year ACS data available is the 2018-2022 ACS, and we can set that as a variable below (note that this variable is used in multiple places throughout this document, not just when retrieving the data).

```{r}
#| message: false
#| warning: false
#| results: hide

# set year
acs_year <- 2022
```

Next, we can define the list of demographic variables we'd like to retrieve tabular data for, by saving the census variables we want in the `census_vars_acs` object (see @sec-census-variables for more information about how to discover variables of interest and find their associated codes). Here we're providing descriptive names associated with each variable code, which makes the data easier to work with later, but isn't strictly necessary (i.e., you could just supply the variable codes alone). Note that the use of prefixes (like `population_` or `households_`) and suffixes (like `_count`) is intentional -- those will be used later as part of the calculation process.

```{r}
#| message: false
#| warning: false
#| results: hide

# define variables to pull from the ACS
census_vars_acs <- c(
    # --- population variables ---
    'population_total_count' = 'B01003_001',
    'population_hispanic_or_latino_count' = 'B03002_012', # Total Hispanic or Latino
    'population_white_count' = 'B03002_003', # White (Not Hispanic or Latino)
    'population_black_or_african_american_count' = 'B03002_004', # Black or African American (Not Hispanic or Latino)
    'population_native_american_or_alaska_native_count' = 'B03002_005', # American Indian and Alaska Native (Not Hispanic or Latino)
    'population_asian_count' = 'B03002_006', # Asian (Not Hispanic or Latino)
    'population_pacific_islander_count' = 'B03002_007', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)
    'population_other_count' = 'B03002_008', # Some other race (Not Hispanic or Latino)
    'population_multiple_count' = 'B03002_009', # Two or more races (Not Hispanic or Latino)
    
    # --- poverty variables ---
    'poverty_total_assessed_count' = 'B17021_001', # also available from 'B17020_001' (at the tract level only). Total population for whom poverty status is determined. Poverty status was determined for all people except institutionalized people, people in military group quarters, people in college dormitories, and unrelated individuals under 15 years old. These groups were excluded from the numerator and denominator when calculating poverty rates.
    'poverty_below_level_count' = 'B17021_002', # also available from 'B17020_002' (at the tract level only). Population whose income in the past 12 months is below federal poverty level. A family and every individual in it are considered to be in poverty if the family's total income is less than the dollar value of a threshold that varies depending upon size of family, number of children, & age of householder (for 1- & 2- person households). Income is the sum of wage/salary income; net self-employment income; interest/dividends/net rental/royalty income/income from estates & trusts; Social Security/Railroad Retirement income; Supplemental Security Income (SSI); public assistance/welfare payments; retirement/survivor/disability pensions; & all other income.
    'poverty_above_level_count' = 'B17021_019', # also available from 'B17020_010' (at the tract level only). Population whose income in the past 12 months is at or above federal poverty level. A family and every individual in it are considered to be in poverty if the family's total income is less than the dollar value of a threshold that varies depending upon size of family, number of children, & age of householder (for 1- & 2- person households). Income is the sum of wage/salary income; net self-employment income; interest/dividends/net rental/royalty income/income from estates & trusts; Social Security/Railroad Retirement income; Supplemental Security Income (SSI); public assistance/welfare payments; retirement/survivor/disability pensions; & all other income.
    
    # --- household variables ---
    'households_count' = 'B19001_001', # also available from variable 'B19053_001'. A household includes all the people who occupy a housing unit - a house, an apartment, a mobile home, a group of rooms, or a single room that is occupied. People not living in households are classified as living in group quarters.
    'average_household_size' = 'B25010_001', # A measure obtained by dividing the number of people living in occupied housing units by the total number of occupied housing units. This measure is rounded to the nearest hundredth.
    
    # --- household income variables ---
    'median_household_income' = 'B19013_001', # also available from 'B19019_001' (at the tract level only). Income in the past 12 months is the sum of wage or salary income; net self-employment income; interest, dividends, or net rental or royalty income or income from estates and trusts; Social Security or Railroad Retirement income; Supplemental Security Income (SSI); public assistance or welfare payments; retirement, survivor, or disability pensions; and all other income.
    'households_income_below_10k_count' = 'B19001_002', # count of households with income below $10,000 
    'households_income_10k_15k_count' = 'B19001_003', # count of households with income $10,000 to $15,000 
    'households_income_15k_20k_count' = 'B19001_004', 
    'households_income_20k_25k_count' = 'B19001_005', 
    'households_income_25k_30k_count' = 'B19001_006', 
    'households_income_30k_35k_count' = 'B19001_007', 
    'households_income_35k_40k_count' = 'B19001_008', 
    'households_income_40k_45k_count' = 'B19001_009', 
    'households_income_45k_50k_count' = 'B19001_010', 
    'households_income_50k_60k_count' = 'B19001_011', 
    'households_income_60k_75k_count' = 'B19001_012', 
    'households_income_75k_100k_count' = 'B19001_013', 
    'households_income_100k_125k_count' = 'B19001_014', 
    'households_income_125k_150k_count' = 'B19001_015', 
    'households_income_150k_200k_count' = 'B19001_016',
    'households_income_above_200k_count' = 'B19001_017', # count of households with income above $200,000
    
    # --- housing costs variables (% of household income) ---
    # Housing Costs as a Percentage of Household Income in the past 12 months - NOTE: THIS TABLE IS NEW FOR THE 2022 ACS, AND WON'T BE AVAILABLE FOR PREVIOUS YEARS - Table B25140 shows the count of households paying more than 30% of their income towards housing costs broken out by three tenure categories (owned with a mortgage, owned without a mortgage, and rented). The table also shows the number of households paying more than 50% of their income toward housing costs.
    # 'households_count' = 'B25140_001', 
    'households_mortgage_total_count' = 'B25140_002',
    'households_mortgage_housing_costs_over30pct_count' = 'B25140_003',
    'households_mortgage_housing_costs_over50pct_count' = 'B25140_004',
    'households_no_mortgage_total_count' = 'B25140_006',
    'households_no_mortgage_housing_costs_over30pct_count' = 'B25140_007',
    'households_no_mortgage_housing_costs_over50pct_count' = 'B25140_008',
    'households_rent_total_count' = 'B25140_010',
    'households_rent_housing_costs_over30pct_count' = 'B25140_011',
    'households_rent_housing_costs_over50pct_count' = 'B25140_012',
    
    # --- other income / economic variables ---
    'per_capita_income' = 'B19301_001' # note: per capita income by race (at block group level) available in table B19301I
)
```

Now, we can make the data request, using the `get_acs` function, which accepts several arguments that specify exactly what data to return.

For this example we're getting data at the 'Block Group' level (with the `geography = 'block group'` argument) for the demographic variables defined above in the `census_vars_acs` object (which is passed to the `variables` argument). As noted above, block group-level data is the most granular level of spatial data available from the ACS, and should provide the best results when estimating demographics for areas whose boundaries don't align with census unit boundaries. However, note that some variables may only be available at less granular spatial scales (like tracts).

In addition to the tabular data associated with the demographic variables in our list, we'll also get the spatial data – i.e., the boundaries of the census blocks – by setting the `geometry = TRUE` argument. When we do this, the tabular demographic data is pre-joined to the spatial data for the associated version of the census boundaries, so the API request returns a single dataset with both the spatial and attribute (demographic) data combined.

::: callout-note
The `tidycensus` package generally returns the Census Bureau's [cartographic boundary shapefiles](https://www.census.gov/geo/maps-data/data/tiger-cart-boundary.html) by default (as opposed to the [core TIGER/Line shapefiles](https://www.census.gov/geo/maps-data/data/tiger-line.html), which is the default format returned by the `tigris` R package). The default cartographic boundary shapefiles are pre-clipped to the US coastline, and are smaller/faster to process (alternatively you can use `cb = FALSE` to get the core TIGER/Line data) (see [here](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html#better-cartography-with-spatial-overlay)). So the default spatial data returned by `tidycensus` may be somewhat different than the default spatial data returned by the `tigris` package, but in general I find it's best to use the default `tidycensus` spatial data.

However, at the block level `tidycensus` returns the more detailed core TIGER/Line shapefiles (i.e., they are identical to the default block-level geographic data returned by `tigris`). In some cases, that may create minor inconsistencies when working with both blocks and block groups and using the default geographies.
:::

We also narrow down the search parameters geographically by specifying the state (with `state = 'CA'`) and counties (`county = counties_list`) we're seeking data for, and provide an object to the `filter_by` argument which filters the data returned so that it only includes census units that overlap with our target areas. Note that the `water_systems_filter` object supplied to the `filter_by` argument was created above in @lst-filter_obj (and see @nte-filter-by above for more information about this argument).

::: callout-note
Supplying a list of counties may not be strictly necessary, especially in cases where you supply the optional `filter_by` argument. However, especially when working with granular data like blocks, supplying the county argument seems to greatly speed the API request.
:::

Also, while by default the `tidycensus` package returns data in long/tidy format, we're getting the data in wide format for this example (by specifying `output = 'wide'`) because it'll be easier to work with for the interpolation method described below to estimate demographics for non-census geographies.

```{r}
#| message: false
#| warning: false
#| results: hide
#| lst-label: lst-get_acs
#| lst-cap: Retrieve ACS data

# get census data
census_data_acs <- get_acs(geography = 'block group',
                           state = 'CA', 
                           county = counties_list,
                           filter_by = water_systems_filter,
                           year = acs_year,
                           survey = 'acs5',
                           variables = census_vars_acs, 
                           output = 'wide', # can be 'wide' or 'tidy'
                           geometry = TRUE,
                           cache_table = TRUE) %>% 
    st_transform(crs_projected) # convert to common coordinate system
```

The output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the each demographic variable is reported in a separate column. Here's a view of the contents and structure of the `r acs_year` 5-year ACS data that's returned (only the first few fields are shown):

```{r}
glimpse(census_data_acs[,1:20])
```

Note that the dataset that's returned includes fields corresponding to Margin of Error (MOE) for each variable we've requested (these are the fields that end an M -- e.g., "population_total_countM"), since, as noted above in @sec-census-datasets , the ACS is based on a sample of the population and reports estimated values.

For further analysis, we may want to get the statewide data as a baseline for comparison (this could also be done for other scales, like the county level). We can use a similar process to get that data and clean/format it to match the more detailed data obtained above. Note that in this case we're also using the 5-year ACS (even though the 1-year ACS is also available at the statewide level, and would provide more up-to-date data) so that the statewide data will be directly comparable to the block group level data obtained above.

```{r}
#| message: false
#| warning: false
#| results: hide

census_data_acs_state <- get_acs(geography = 'state',
                                 state = 'CA', 
                                 year = acs_year,
                                 survey = 'acs5',
                                 variables = census_vars_acs, 
                                 output = 'wide', # can be 'wide' or 'tidy'
                                 geometry = TRUE,
                                 cache_table = TRUE) %>% 
    st_transform(crs_projected) %>%  # convert to common coordinate system
    select(-matches('M$')) %>%  # the $ specifies "ends with"
    # clean names (note this is a little different than the way we renamed fields above, either works)
    rename_with(.fn = ~ str_remove(., # remove 'E' (estimate) from field names
                                   pattern = 'E$')) %>% 
    rename_with(.fn = ~ str_replace(., # add 'E' back to NAME field
                                    pattern = 'NAM', 
                                    replacement = 'NAME'))
```


### Decennial Census Data {#sec-census-access-decennial}

To get data from the Decennial Census, you can use the `get_decennial` function, which is very similar to the `get_acs()` function used above. As of this writing, the most recent version of the decennial census data available is from 2020, and we can set that as a variable below.

```{r}
#| message: false
#| warning: false
#| results: hide

# set year
decennial_year <- 2020
```

However, since ACS data contains data on a much broader set of socio-economic metrics than the Decennial Census, the requested data includes a greatly reduced list of variables, defined in the `census_vars_decennial` object (see @sec-census-variables for more information about how to discover variables of interest and find their associated codes). As above, we can provide descriptive names associated with each variable code, which makes the data easier to work with later, but isn't strictly necessary (i.e., you could just supply the variable codes alone).

```{r}
#| message: false
#| warning: false
#| results: hide

# define variables to pull from the decennial census
census_vars_decennial <- c(
    'population_hispanic_or_latino_count' = 'P2_002N', # Total Hispanic or Latino
    'population_white_count' = 'P2_005N', # White (Not Hispanic or Latino)
    'population_black_or_african_american_count' = 'P2_006N', # Black or African American (Not Hispanic or Latino)
    'population_native_american_or_alaska_native_count' = 'P2_007N', # American Indian and Alaska Native (Not Hispanic or Latino)
    'population_asian_count' = 'P2_008N', # Asian (Not Hispanic or Latino)
    'population_pacific_islander_count' = 'P2_009N', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)
    'population_other_count' = 'P2_010N', # Some other race (Not Hispanic or Latino)
    'population_multiple_count' = 'P2_011N', # Two or more races (Not Hispanic or Latino)
    'population_total_count' = 'P2_001N'
)
```

Finally, we can make the data request, using the `get_decennial` function, which is very similar to the `get_acs` function described above (@sec-census-access-acs). However, for this example we're getting data at the 'Block' level (with the `geography = 'block'` argument) for the demographic variables defined above in the `census_vars_decennial` object (which is passed to the `variables` argument). As noted above, block-level data is the most granular level of spatial data available, and should provide the best results when estimating demographics for areas whose boundaries don't align with census unit boundaries. However, depending on the use case, it may require too much time and computational resources to use the most granular spatial data, and may not be necessary to obtain a reasonable estimate. Also, keep in mind that block-level data may not be available for all variables, and some variables may only be available at less granular spatial scales (like block groups or tracts).

Also note that the `water_systems_filter` object supplied to the `filter_by` argument was created above in @lst-filter_obj (and see @nte-filter-by above for more information about this argument).

```{r}
#| message: false
#| warning: false
#| results: hide
#| lst-label: lst-get_decennial
#| lst-cap: Retrieve decennial census data

# get census data
census_data_decennial <- get_decennial(geography = 'block', # can be 'block', 'block group', 'tract', 'county', etc.
                                       state = 'CA', 
                                       county = counties_list,
                                       filter_by = water_systems_filter,
                                       year = decennial_year,
                                       variables = census_vars_decennial,
                                       output = 'wide', # can be 'wide' or 'tidy'
                                       geometry = TRUE,
                                       cache_table = TRUE) %>% 
    st_transform(crs_projected) # convert to common coordinate system
```

As above, the output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the population of each racial/ethnic group is reported in a separate column. Here's a view of the contents and structure of the Decennial Census data that's returned:

```{r}
glimpse(census_data_decennial)
```

### Plot Census & Supplier Data {#sec-census-plot}

```{r}
system_plot <- 'SACRAMENTO SUBURBAN WATER DISTRICT'
```

@fig-suppliers-census-map shows the `r acs_year` 5-year ACS census units that overlap with one of the water systems (`{r} str_to_title(system_plot)`) that we'll compute demographics for below (note that a single system is shown because plotting the census units that overlap all systems tends to be slow in this format; to view the census boundaries overlapping all systems see @fig-results-map).

::: {#fig-suppliers-census-map}
```{r}
#| warning: false

mapview(water_systems_sac %>% 
            filter(water_system_name == system_plot), 
        zcol = 'water_system_name', 
        layer.name = 'Water System', 
        legend = FALSE) +
    mapview(census_data_acs %>% 
                st_filter(water_systems_sac %>% 
                              filter(water_system_name == system_plot)), 
            alpha.regions = 0, 
            color = 'cyan', 
            lwd = 1.3, label = 'NAME',  
            layer.name = 'ACS Data', 
            legend = FALSE) #  zcol = 'NAME'
```

Water system `{r} str_to_title(system_plot)` (filled polygon) and boundaries of census units (light blue) that will be used to estimate water system demographics.
:::

## Compute Water System Demographics {#sec-estimate-demographics}

Now we can perform calculations to estimate demographic characteristics for our *target* areas (water system service boundaries in the Sacramento County area) from our *source* demographic dataset (the census data we obtained above). For this example, we'll use the `r acs_year` 5-year ACS data that we retrieved above (which is saved in the `census_data_acs` variable) as our source of demographic data, and we'll estimate the following for each water system's service area:

-   Total population and population of each racial/ethnic group (using the racial/ethnic categories defined in the census dataset), and each racial/ethnic group's portion of the total service area population
-   Socio-economic variables like poverty rate, median household income, income distributions, per capita income, and average household size

### Considerations and Alternatives {#sec-estimate-considerations-alternatives}

There are multiple ways this estimation can be done. Which option to pick may depend on multiple factors, such as: 

- Level of precision required (higher precision may require more detailed methods)
- Level of certainty in the target area boundaries (higher uncertainty in target area boundaries may make more detailed methods irrelevant/unnecessary) 
- Relative size of the target areas to available types of census units (if target areas are relatively large, the results may not be very sensitive to the method chosen, but results for smaller areas may be highly sensitive to choice of method)
- Degree to which the methodology should easily explainable / interpretable (detailed methods may be hard to explain concisely)
- Types of census variables needed (some variables may not be available at certain levels of spatial granularity)

Methods described in this document include the following (in no particular order):

1. Multi-step process that uses areal interpolation to estimate count variables for the target areas (water systems) from overlapping census units, then uses that estimated count data to make weighted average estimates for remaining variables. See @sec-estimate-demographics-method-description.

2. Simplified method which uses entire census units that overlap the target areas (water systems) to estimate demographics for those areas. This method is relatively simple and explainable, and makes it possible to produce MOEs for the derived estimates. However, it uses entire census units as proxies for water system service area boundaries, so may produce less precise estimates than other approaches. See @sec-alternative-simplified.

3. Population weighted areal interpolation, using the [`interpolate_pw`](https://walker-data.com/tidycensus/reference/interpolate_pw.html) function from the `tidycensus` R package. This takes into account the distribution of the population within census units, by using data from a third more granular dataset as weights for the interpolation process between the source and target areas. This approach likely will produce more precise estimates than the approaches described above, especially for mid-sized target areas that may only overlap portions of a relatively small number of census units. However it doesn't appear to be applicable to very small target areas (small water systems), and doesn't provide estimates for those areas -- more research may be needed on considerations for its use in certain cases. It may also be somewhat difficult to explain the methodology or interpret the results. See @sec-alternative-interpolate_pw. 

4. A modified version of population weighted areal interpolation, which is somewhat similar to the approach above in that it uses data from a third (more granular) dataset to estimate the distribution of the population within census units (block groups) and determine what portion of each census unit to apply to each target area (water system). This modified approach may improve estimates in cases like this where the target areas (water systems) only overlap a portion of the source datase (census units), and may provide somewhat more valid estimates for smaller water systems. However, it may be overly complicated for many use cases, it may not meaningfully improve estimates for most systems, but may be somewhat difficult to describe and interpret. See @sec-alternative-modified-pw-areal.

In addition, @sec-detailed-pop-estimates describes how to use block level data from the decennial census to produce more detailed population estimates alone (and/or estimates for other count variables).

For simplicity, we'll apply the first method here, and then save and explore / visualize the results obtained from that method in more detail. However, in other cases those results could simply be replaced with the results from any of those other methods described later in @sec-alternative-methods (or other methods not described in this document).

### Method Overview {#sec-estimate-demographics-method-description}

For this method, we'll employ a three step strategy:

1.  Estimate values for count-based variables (typically referred to as 'extensive' data types) – e.g., total population, population by race/ethnicity, population above / below poverty rate, households by income bracket, etc. – for overlapping census unit, using areal interpolation. This is essentially an area-weighted average, which estimates how much of each *source* unit's (census unit) count applies to the *target* area (a given water service area), based on the portion of its area that overlaps that target area. For example, for a census unit that partially overlaps a service area, only a fraction of its count for a given variable will be applied to that service area; for a census unit that completely overlaps a service area, the full count for that variable will be applied to the service area.

    For more information about this process and discussion of its use cases, see this [journal article](https://joss.theoj.org/papers/10.21105/joss.01221), and/or the documentation [here](https://cran.r-project.org/web/packages/areal/vignettes/areal.html) and [here](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html) from the `areal` R package.
    
        The major simplifying assumption of this approach is that the population or count-based variable of interest are evenly distributed within each unit in the *source* data. For example, in this case we're assuming that population (including the total population and the population of each racial/ethic group), households of each income bracket, populations above / below the poverty rate, etc. are evenly distributed within each census block group.

::: callout-note
While this section uses the block group-level count data from the 5-year ACS, there may be cases where it could be useful or necessary to use more granular block-level population data from the decennial census to estimate population densities and distributions within block groups. This could especially be the case when estimating characteristics for small and/or rural areas. See @sec-alternative-interpolate_pw and @sec-alternative-modified-pw-areal for approaches which implement methods that do that, and @sec-detailed-pop-estimates for detailed estimates of population alone using block-level decennial data.

Also see @sec-small-area-estimates for more information about challenges estimating values for small / rural areas.
:::

2.  Using the estimated count data (populations, households, etc), compute weighted values for remaining variables that describe those populations, using the associated count data as a weighting factor (e.g., population-weighted values for population based data, or household-weighted values for household-based data) – these variables are typically referred to as 'intensive' variables.

::: callout-note
Although it's possible to use simple areal interpolation to aggregate these 'intensive' variables as well, the multi-step approach described here can be useful because we know (from the population / household count data) that population densities differ between census units. Since we have a reasonable estimate of the count data (population, households, etc.) within each census unit, using a population- or household-weighted average likely will yield more accurate results than a simple area-weighted average for these variables. For example, for per capita income, an area-weighted average would likely over-weight large census areas with lower population densities, and would likely be less meaningful than a population-weighted average.

Areal interpolation of intensive variables may be more useful for cases where we generally have no other information about how density varies between the source polygons.

Some of those considerations are discussed [here](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html#mixed-interpolations). More research / input may be needed on this issue.
:::

3.  Aggregate interpolated values at the water system level.

### Prepare Census Data

Note that we already transformed the `r acs_year` 5-year ACS dataset into the common projected coordinate reference system used for this example immediately after we downloaded the data using the `get_acs()` function (see @lst-get_acs). This allows us to work with the water system data and the census data together in a common coordinate system.

Before calculating demographics for the *target* areas, we can do a bit of additional transformation to prepare the census data. First, because we won't be incorporating the margin of error (MOE) into the analysis below, we can drop them for this example, then clean up the field names.

::: callout-tip
It is possible to calculate MOEs for derived estimates – e.g., when aggregating groups of census units – and in many cases it may be worthwhile to do that to provide extra context to the data. However, it may not be possible (or may be very difficult) to calculate MOEs for data estimated using more complex aggregations, such as the areal interpolation shown below – more research on that may be needed.

For guidance on how calculate MOEs for some types of derived estimates, see [this document](https://www.census.gov/content/dam/Census/library/publications/2020/acs/acs_general_handbook_2020_ch08.pdf).

For an alternative, simplified approach to estimating census demographics for target areas which includes MOEs for the derived estimates, see @sec-alternative-simplified.
:::

```{r}
# drop MOE fields
census_data_acs <- census_data_acs %>% 
    select(-matches('M$')) # the $ specifies "ends with"

# clean names
names(census_data_acs) <- names(census_data_acs) %>% 
    str_remove('E$') %>% # remove 'E' (estimate) from field names
    str_replace('NAM', 'NAME') # add 'E' back to NAME field
```

Here's a view of the contents and structure of the revised `r acs_year` 5-year ACS dataset (only the first few fields are shown):

```{r}
glimpse(census_data_acs[,1:20])
```

We can also do some other transformations to simplify the data. For example, we can combine the 'other' and 'multiple' racial/ethnic groupings into one 'other or multiple' racial/ethnic group.

```{r edit_census_data}
## combine other and multiple
census_data_acs <- census_data_acs %>% 
    mutate('population_other_or_multiple_count' = 
               population_other_count + population_multiple_count, 
           .after = population_pacific_islander_count) %>% 
    select(-c(population_other_count, population_multiple_count))
```

And we can calculate the poverty rate for each census unit (which may be useful for presenting results later).

```{r}
census_data_acs <- census_data_acs %>% 
    mutate(poverty_rate_pct_calc_census_unit = case_when(
        poverty_total_assessed_count == 0 ~ 0,
        .default = 100 * poverty_below_level_count / poverty_total_assessed_count
    ), 
    .after = poverty_above_level_count)
```

### Interpolation Step 1: Estimate Data for Count Variables with Areal Interpolation {#sec-areal-interp}

There are a couple of ways to implement the areal interpolation method. The example below 'manually' implements the process using functions from the `sf` package, for reasons described below. However, note that there are R packages which make it possible to perform areal interpolation with a single function - for example, the `sf` package's [`st_interpolate_aw`](https://r-spatial.github.io/sf/reference/interpolate_aw.html) function and the [`areal`](https://chris-prener.github.io/areal/) package's [`aw_interpolate`](https://chris-prener.github.io/areal/reference/aw_interpolate.html) function. This example uses a more 'manual' approach because this makes it possible to use the multi-step process described above, and also produces useful intermediate calculated data for mapping and visualization. However, we can use the single-function approach to double check our implementation of the areal interpolation approach for the count data (see @sec-check-areal-interp).

::: callout-warning
Areal interpolation may not work well in some cases (for example, in areas that are largely rural or near uninhabiated areas.) In these cases, it's possible to use more granular block-level population data from the decennial census to estimate population densities and distributions within block groups. See @sec-alternative-interpolate_pw for an approach which implements a method for doing that.
:::

First, we clip the census data to the water system boundaries:

```{r}
#| warning: false

census_data_clip <- census_data_acs %>% 
    mutate(census_unit_area = st_area(.)) %>% 
    st_intersection(water_systems_sac) %>% 
    mutate(clipped_area = st_area(.)) %>% 
    mutate(areal_weight_factor = drop_units(clipped_area / census_unit_area))
```

@fig-map-clipped-polygons shows a plot of the census units clipped to the `{r} str_to_title(system_plot)` water system, along with the original/complete census units. Note that you can toggle layers on and off (and change their order of appearance) using the layers button in the upper left part of the map (below the zoom buttons).

::: {#fig-map-clipped-polygons}
```{r}
#| warning: false

mapview(water_systems_sac %>% 
            filter(water_system_name == system_plot), 
        zcol = 'water_system_name', 
        layer.name = 'Water System', 
        legend = FALSE) + 
    mapview(census_data_acs %>% 
                st_filter(water_systems_sac %>% 
                              filter(water_system_name == system_plot)), 
            alpha.regions = 0.15, 
            col.regions = 'grey', 
            color = 'black', 
            lwd = 1, 
            label = 'NAME',  
            layer.name = 'ACS Data Full', 
            legend = FALSE) +
    mapview(census_data_clip %>% 
                filter(water_system_name == system_plot),
            alpha.regions = 0, 
            color = 'cyan', 
            lwd = 1.3, 
            label = 'NAME',  
            layer.name = 'ACS Data Clipped', 
            legend = FALSE)
```

Water system `{r} str_to_title(system_plot)` (filled polygon), boundaries of overalpping census units (grey), and clipped portions of census units (light blue) that will be used to estimate water system demographics.
:::

Next, we can compute the area-weighted counts for the portions of census units that overlap each water system boundary:

```{r}
census_data_interpolate <- census_data_clip %>% 
    mutate(
        across(
            .cols = ends_with('_count'),
            .fns = ~ .x * areal_weight_factor
        )) 
```

As noted above, it's also possible to use pre-built functions from several R packages to perform areal interpolation in a single step. Since we're using a multi-step process, which also implements population weighted averaging for some variables, we're not using those functions directly in this example. However, they can be a useful check to validate our computed count data, but only after we aggregate our data at the system level – see @sec-check-areal-interp for more details.

### Interpolation Step 2: Estimate Population Weighted Data for Remaining (Intensive) Variables Based on Interpolated Counts {#sec-pop-interp}

Compute population weighted values:

```{r}
census_data_interpolate <- census_data_interpolate %>% 
    mutate(average_household_size_weighted = average_household_size * households_count,
           median_household_income_weighted = median_household_income * households_count,
           per_capita_income_weighted = per_capita_income * population_total_count)
```

::: callout-caution
To calculate an aggregated value for a variable like median household income, which depends on the distribution of the underling data, it may be worth considering whether a weighed average value is an appropriate measure. In some cases, it may be more appropriate to use the counts in each income bracket to estimate a median income, and/or present the income distribution rather than a single value.

For a discussion of the problem and a proposed solution, see [this document](https://www.documentcloud.org/documents/6165014-How-to-Recalculate-a-Median.html#document/p1).
:::

### Interpolation Step 3: Aggregate by Water System

Next, we need to combine the weighted values calculated above to produce the estimates for each water system. We can do this by summing all of the count-based variables (derived from areal interpolation), and calculating weighted averages for all variables computed in step 2 above. Note that we have to first calculate the denominator for each variable calculated with population weighted interpolation, because some of those variables contain missing values for records where the denominator is present (and if we don't remove the missing values, we get an `NA` for any water system that contains a block group with a missing value for that variable). For example, there are block groups where the median household income is missing, but the total household count is available for that block group – in that case, the weighted average should not include the households in that block group in the denominator; otherwise, the true value will be underestimated.

```{r}
water_system_demographics <- census_data_interpolate %>% 
    group_by(water_system_name) %>% 
    mutate(
        average_household_size_denominator = if_else(
            is.na(average_household_size), 
            0, 
            households_count),
        median_household_income_denominator = if_else(
            is.na(median_household_income), 
            0, 
            households_count),
        per_capita_income_denominator = if_else(
            is.na(per_capita_income), 
            0, 
            population_total_count)
    ) %>% 
    summarize(
        across(
            .cols = ends_with('_count'),
            .fns = ~ sum(.x)
        ),
        average_household_size_hh_weighted = 
            sum(average_household_size_weighted, na.rm = TRUE) / 
            sum(average_household_size_denominator),
        median_household_income_hh_weighted = 
            sum(median_household_income_weighted, na.rm = TRUE) /
            sum(median_household_income_denominator),
        per_capita_income_pop_weighted = 
            sum(per_capita_income_weighted, na.rm = TRUE) / 
            sum(per_capita_income_denominator)
    ) %>% 
    ungroup()
```

### Clean & Format Summarized Water System Demographic Data {#sec-results-clean}

We can now use those combined values to compute some additional metrics for each system (like rates, income distributions, etc.), and also do some re-formatting before analyzing and saving the results.

#### Clean & Format Aggregated Results

First we can add fields with each racial/ethnic group's estimated percent of the total population within each water system's service area:
```{r}
water_system_demographics <- water_system_demographics %>%
    mutate(
        across(
            .cols = starts_with('population_'),
            .fns = ~ round(.x / population_total_count * 100, 2),
            .names = "{str_replace(.col, '_count', '_percent')}"
        ),
        .after = population_other_or_multiple_count) %>% 
    select(-population_total_percent) # this always equals 1, not needed
```

We can also calculate the estimated poverty rate for each water system's service area:
```{r}
water_system_demographics <- water_system_demographics %>% 
    mutate(poverty_rate_percent = case_when(
        poverty_total_assessed_count == 0 ~ 0,
        .default = 100 * poverty_below_level_count / poverty_total_assessed_count
    ), 
    .after = poverty_above_level_count)
```

And compute income brackets in 25k increments:
```{r}
water_system_demographics <- water_system_demographics %>% 
    mutate(households_income_0_25k_count = 
               households_income_below_10k_count + 
               households_income_10k_15k_count + 
               households_income_15k_20k_count +
               households_income_20k_25k_count,
           households_income_25k_50k_count =
               households_income_25k_30k_count + 
               households_income_30k_35k_count +
               households_income_35k_40k_count +
               households_income_40k_45k_count +
               households_income_45k_50k_count,
           households_income_50k_75k_count =
               households_income_50k_60k_count +
               households_income_60k_75k_count,
           .after = households_income_above_200k_count
    ) # note - above 75k is already in 25k increments
```

And compute income brackets in 50k increments:
```{r}
water_system_demographics <- water_system_demographics %>% 
    mutate(households_income_0_50k_count = 
               households_income_0_25k_count + 
               households_income_25k_50k_count,
           households_income_50k_100k_count =
               households_income_50k_75k_count +
               households_income_75k_100k_count,
           households_income_100k_150k_count =
               households_income_100k_125k_count +
               households_income_125k_150k_count,
           .after = households_income_50k_75k_count
    ) # above 150k is already in 50k increments
```

And compute grouped median household income:
```{r}

```

And compute \# and % of households below income thresholds:
```{r}

```

And, compute the portion of households paying more than 30% / 50% of their income toward housing costs:
```{r}
# portion of households paying more than 30% / 50% of income on housing
water_system_demographics <- water_system_demographics %>%
    mutate(households_all_housing_costs_over30pct_percent = 
               100 * (households_mortgage_housing_costs_over30pct_count + 
                          households_no_mortgage_housing_costs_over30pct_count +
                          households_rent_housing_costs_over30pct_count) / 
               households_count, 
           .after = households_rent_housing_costs_over50pct_count) %>% 
    mutate(households_all_housing_costs_over50pct_percent = 
               100 * (households_mortgage_housing_costs_over50pct_count + 
                          households_no_mortgage_housing_costs_over50pct_count +
                          households_rent_housing_costs_over50pct_count) / 
               households_count,
           .after = households_all_housing_costs_over30pct_percent)
```

Finally, we can round the estimated values to appropriate levels of precision:
```{r}
water_system_demographics <- water_system_demographics %>%
    mutate(
        across(
            .cols = ends_with('_count'),
            .fns = ~ round(.x, 0)
        ))  %>%
    mutate(
        across(
            .cols = ends_with('_percent'),
            .fns = ~ round(.x, 2)
        ))
```

We now have a dataset with the selected metrics from the census data (*source* data) estimated for each of the water system service areas (*target* geographic features). Here's a view of the contents and structure of the re-formatted dataset (only the first few fields are shown):
```{r}
glimpse(water_system_demographics[,1:20])
```

@tbl-water-sys-demographics-rev provides a complete view of the cleaned and re-formatted dataset. These results are saved locally in tabular and spatial format in @sec-results-save.

```{r}
#| label: tbl-water-sys-demographics-rev
#| tbl-cap: "Estimated Water System Demographics"
#| tbl-cap-location: top
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_demographics %>%
    st_drop_geometry() %>% 
    mutate(across(
        .cols = ends_with('_percent'),
        .fns = ~ pct_format(. / 100))
    ) %>%
    rename_with(.cols = everything(), 
                .fn = ~ str_replace_all(., pattern = '_', replacement = ' ') %>% 
                    str_to_title(.)) %>% 
    kable(align = 'c', 
          format.args = list(big.mark = ',')
    ) %>%
    scroll_box(height = "400px")
```

<br>

#### Clean & Format Intermediate (Clipped) Calculation Data

For visualization and exploration, it'll also be useful to apply some additional formatting to the clipped block-group data used in intermediate parts of the interpolation process above.

```{r}
# portion of households paying more than 30% / 50% of income on housing
census_data_interpolate <- census_data_interpolate %>%      
    mutate(households_all_housing_costs_over30pct_percent = 
               100 * (households_mortgage_housing_costs_over30pct_count + 
                          households_no_mortgage_housing_costs_over30pct_count +                           
                          households_rent_housing_costs_over30pct_count) / 
               households_count, 
           .after = households_rent_housing_costs_over50pct_count) %>%      
    mutate(households_all_housing_costs_over50pct_percent = 
               100 * (households_mortgage_housing_costs_over50pct_count +                            
                          households_no_mortgage_housing_costs_over50pct_count +                           
                          households_rent_housing_costs_over50pct_count) / 
               households_count,
           .after = households_all_housing_costs_over30pct_percent)

# drop water system data except name (water_system_name)
census_data_interpolate <- census_data_interpolate %>% 
    select(-census_unit_area, -clipped_area) %>% 
    select(-c(water_system_number:water_system_population_reported)) %>% 
    select(-c(average_household_size_weighted:per_capita_income_weighted)) %>% 
    relocate(water_system_name, .after = NAME) %>% 
    relocate(areal_weight_factor, .after = water_system_name)
```

#### Transform Results to Long Format {#sec-results-transform-long}

For further analysis and exploration / visualization of the results, it will help to convert the results from wide to long format, and edit the group names so that they can be used as titles.

```{r}

# pivot from wide to long format
water_system_demographics_long <- water_system_demographics %>% 
    # convert to long format
    # st_drop_geometry() %>% 
    pivot_longer(cols = !c(water_system_name, geometry), 
                 names_to = 'variable', 
                 values_to = 'value') %>% 
    relocate(geometry, .after = last_col())

# clean variable names and add grouping fields (type, group_type)
water_system_demographics_long <- water_system_demographics_long %>% 
    mutate(variable = variable %>% 
               # str_remove_all(pattern = 'percent_') %>% 
               str_replace_all(pattern = '_', replacement = ' ') %>% 
               str_replace_all(pattern = ' or ', replacement = ' / ') %>% 
               str_to_title(.) %>%
               str_remove_all(pattern = ' / Alaska Native')) %>% 
    mutate(variable_type = case_when(
        str_detect(variable, pattern = 'Count') ~ 'Count',
        str_detect(variable, pattern = 'Percent') ~ 'Percent',
        str_detect(variable, pattern = 'Pop Weighted') ~ 'Pop Weighted',
        str_detect(variable, pattern = 'Hh Weighted') ~ 'Hh Weighted',
        .default = NA), 
        .after = variable) %>% 
    mutate(variable_group_type = case_when(
        str_detect(variable, pattern ='Population') ~ 
            'Population',
        str_detect(variable, pattern = 'Households') ~ 
            'Households',
        str_detect(variable, pattern = 'Average Household Size Hh Weighted') ~ 
            'Household Weighted', 
        str_detect(variable, pattern = 'Median Household Income Hh Weighted') ~ 
            'Household Weighted',
        str_detect(variable, pattern = 'Per Capita Income Pop Weighted') ~ 
            'Population Weighted',
        str_detect(variable, pattern = 'Poverty') ~ 
            'Population'),
        .after = variable_type) %>% 
    mutate(variable = case_when(
        str_detect(variable, pattern = 'Households Count') ~ 
            'Households Total',
        .default = str_remove_all(variable, pattern = 'Households'))) %>% 
    mutate(variable = case_when(
        str_detect(variable, 'Population Total Count') ~ 
            'Population Total',
        .default = str_remove_all(variable, 'Population'))) %>%
    mutate(variable = str_remove_all(variable, 
                                     pattern = 'Count')) %>% 
    mutate(variable = str_remove_all(variable, 
                                     pattern = 'Percent')) %>% 
    mutate(variable = str_remove_all(variable, 
                                     pattern = ' Hh Weighted')) %>% 
    mutate(variable = str_remove_all(variable, 
                                     pattern = ' Pop Weighted')) %>% 
    mutate(variable = str_replace_all(variable, 
                                      pattern = 'Over30pct', 
                                      replacement = 'Over 30% Income')) %>% 
    mutate(variable = str_replace_all(variable, 
                                      pattern = 'Over50pct', 
                                      replacement = 'Over 50% Income')) %>% 
    mutate(variable = str_trim(variable)) %>%
    mutate(variable = str_replace_all(variable,
                                      pattern = 'k ',
                                      replacement = 'k-')) %>%
    mutate(variable = str_replace_all(variable,
                                      pattern = '0 ',
                                      replacement = '0-')) %>% 
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Black-',
                                      replacement = 'Black ')) %>% 
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Mortgage ',
                                      replacement = 'Mortgage - ')) %>%
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Rent ',
                                      replacement = 'Rent - ')) %>% 
    mutate(variable = str_replace_all(variable,
                                      pattern = 'All ',
                                      replacement = 'All Households - ')) %>% 
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Households Total',
                                      replacement = 'Total Households')) %>% 
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Population Total',
                                      replacement = 'Total Population')) %>%
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Poverty ',
                                      replacement = 'Poverty - ')) %>%
    mutate(variable = str_replace_all(variable,
                                      pattern = 'Poverty - Rate',
                                      replacement = 'Poverty Rate'))
```

Here's a view of the structure of the reformatted data:

```{r}
glimpse(water_system_demographics_long)
```

We can also do the same for the clipped block-group data used in intermediate parts of the interpolation process above.

```{r}
census_data_interpolate_long <- census_data_interpolate %>% 
    pivot_longer(cols = !c(GEOID, NAME, water_system_name, 
                           areal_weight_factor, geometry), 
                 names_to = 'variable', 
                 values_to = 'value') %>% 
    relocate(geometry, .after = last_col())
```

### Save Results {#sec-results-save}

Once we've finished the computations and verified the outputs look reasonable, we can save the results to output files so they can be re-used and shared. The results can be saved in tabular (e.g., csv, excel) and/or spatial (e.g., shapefile, geopackage) formats, which may be helpful for different use cases. Note that you may need to think about exactly what variables to include in the output file(s) and how to format the output datasets (e.g., wide versus long format).

The files saved below are all available [here](https://github.com/daltare/example-census-race-ethnicity-calculation/tree/main/03_data_results).

The chunk of code below (which is hidden by default), just tests to see whether any of the datasets to be saved have been changed since the previous version was saved. In general this is probably not needed for a typical workflow and can be ignored for most use cases – it is just used here to make rendering of this document a little more efficient.

```{r}
#| code-fold: true
#| warning: false
#| message: false

# compute hash for datasets to be saved (i.e., a unique identifier for each dataset), and compare against previous versions

## define file that stores hash (unique identifier for dataset)
hash_file <- here('03_data_results',
                  '_dataset_hash.csv')

## compute hashes (unique identifier for datasets)
hash_current <- digest(object = water_system_demographics,
                       algo = 'md5')
hash_current_long <- digest(object = water_system_demographics_long,
                            algo = 'md5')
hash_interpolate <- digest(object = census_data_interpolate,
                           algo = 'md5')
hash_interpolate_long <- digest(object = census_data_interpolate_long, 
                                algo = 'md5')
hash_table_current <- tibble(
    dataset = c('water_system_demographics', 
                'water_system_demographics_long',
                'census_data_interpolate',
                'census_data_interpolate_long'),
    hash = c(hash_current, 
             hash_current_long,
             hash_interpolate,
             hash_interpolate_long))

## get the previous hashes from file (if it exists), else create a new file to store the hashes
if (file.exists(hash_file)) {
    hash_table_previous <- read_csv(file = hash_file)
} else {
    file.create(hash_file)
    hash_table_previous <- tibble(
        dataset = c('water_system_demographics', 
                    'water_system_demographics_long',
                    'census_data_interpolate',
                    'census_data_interpolate_long'),
        hash = c('missing', 
                 'missing',
                 'missing', 
                 'missing'))
}

## if new hash is different from previous hash, set flag to update the output file (i.e., write a new version of the file)
file_update <- !identical(hash_table_current %>% 
                              filter(dataset == 'water_system_demographics') %>% 
                              pull(hash),
                          hash_table_previous %>% 
                              filter(dataset == 'water_system_demographics') %>% 
                              pull(hash))
file_update_long <- !identical(hash_table_current %>% 
                                   filter(dataset == 'water_system_demographics_long') %>% 
                                   pull(hash),
                               hash_table_previous %>% 
                                   filter(dataset == 'water_system_demographics_long') %>% 
                                   pull(hash))
file_update_interpolate <- !identical(hash_table_current %>% 
                                          filter(dataset == 'census_data_interpolate') %>% 
                                          pull(hash),
                                      hash_table_previous %>% 
                                          filter(dataset == 'census_data_interpolate') %>% 
                                          pull(hash))
file_update_interpolate_long <- !identical(hash_table_current %>% 
                                               filter(dataset == 'census_data_interpolate_long') %>% 
                                               pull(hash),
                                           hash_table_previous %>% 
                                               filter(dataset == 'census_data_interpolate_long') %>% 
                                               pull(hash))

## write current hashes to file (for comparison with future versions)
write_csv(x = hash_table_current,
          file = hash_file,
          append = FALSE)
```

#### Tabular Dataset {#sec-results-save-tabular}

The code below saves the tabular results to a csv file, in both the 'wide' and 'long' formats. The wide format data can also be viewed [here](https://github.com/daltare/example-census-race-ethnicity-calculation/blob/main/03_data_results/water_system_demographics_sac.csv), or downloaded with [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/water_system_demographics_sac.csv){download="water_system_demographics_sac.csv"}. The long format data can be viewed [here](https://github.com/daltare/example-census-race-ethnicity-calculation/blob/main/03_data_results/water_system_demographics_sac_long.csv), or downloaded with [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/water_system_demographics_sac_long.csv){download="water_system_demographics_sac_long.csv"}.

```{r}
#| cache: false

# wide
if (file_update == TRUE) {
    write_csv(water_system_demographics %>%
                  st_drop_geometry(), # drop spatial data 
              file = here('03_data_results',
                          'water_system_demographics_sac.csv'))
}

# long
if (file_update_long == TRUE) {
    write_csv(water_system_demographics_long %>%
                  st_drop_geometry(), # drop spatial data
              file = here('03_data_results',
                          'water_system_demographics_sac_long.csv'))
}
```

And we can save the intermediate data from the interpolation process (i.e., data for clipped block groups) in wide and long format – these files can be downloaded with [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/intermediate_interpolation_data.csv){download="intermediate_interpolation_data.csv"} and [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/intermediate_interpolation_data_long.csv){download="intermediate_interpolation_data_long.csv"} respectively.

```{r}
#| cache: false

# wide
if (file_update_interpolate == TRUE) {
    write_csv(census_data_interpolate %>%
                  st_drop_geometry(), # drop the spatial data 
              file = here('03_data_results',
                          'intermediate_interpolation_data.csv'))
}

# long
if (file_update_interpolate_long == TRUE) {
    write_csv(census_data_interpolate_long %>%
                  st_drop_geometry(), # drop the spatial data 
              file = here('03_data_results',
                          'intermediate_interpolation_data_long.csv'))
}
```

#### Spatial Dataset {#sec-results-save-spatial}

To save the output in a geospatial format, it may be best to save the data in a wide format, so that all of the attribute data for each *target* area (water system) is in a single row along with its spatial data (i.e. the system boundary information) (saving in long format may create a very large file). The code below saves the results – in wide format – to a geopackage file, which is a spatial file format that is similar to a shapefile. The final water system demographic data is available to downloaded with [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/water_system_demographics_sac.gpkg){download="water_system_demographics_sac.gpkg"}, and the data from the intermediate calculations (for clipped block groups) is available to download with [this link](https://raw.githubusercontent.com/daltare/example-census-race-ethnicity-calculation/main/03_data_results/intermediate_interpolation_data.gpkg){download="intermediate_interpolation_data.gpkg"}.

```{r}
#| message: false
#| warning: false
#| results: hide
#| cache: false

if (file_update == TRUE) {
    st_write(water_system_demographics,
             here('03_data_results',
                  'water_system_demographics_sac.gpkg'),
             append = FALSE)
}

if (file_update_interpolate == TRUE) {
    st_write(census_data_interpolate,
             here('03_data_results',
                  'intermediate_interpolation_data.gpkg'),
             append = FALSE)
}
```

## Explore and Visualize Results {#sec-results-explore}

::: callout-warning
This section is in progress.
:::

The map in @fig-results-map below shows the estimated demographic data for each water system:

\[TODO: Insert Shiny App (iframe)\]

::: {#fig-results-map}
```{=html}
<!-- comment
<iframe width="780" height="500" src="https://cawaterdatadive.shinyapps.io/[app-name]/" title="Estimated Water System Demographics"></iframe>
end of comment -->
```
Estimated demographics calculated using `r acs_year` ACS 5-year data.
:::

For simplicity, the remaining parts of this section will focus on presenting estimated demographics for some of the largest water suppliers in the Sacramento county region (results for small water systems may not be very accurate and should be used with some caution - see @sec-check-pop-estimated-reported and @sec-small-area-estimates for more investigation of the results for small systems).

```{r}
# Select systems to plot

## number of systems
n_systems <- 20

## get list of selected systems
systems_top_n <- water_system_demographics %>% 
    slice_max(population_total_count, n = n_systems) %>% 
    pull(water_system_name)
```

### Race / Ethnicity

\[placeholder\]

-   percent by group (bar)

-   dot-density

-   map (% non-white?)

### Income Distributions

\[placeholder\]

-   income brackets (50k) (bar)

-   median household income by block group (dots)

-   dot-density (below threshold value)

-   map

### Poverty Rates

\[placeholder\]

-   dot plot

-   map

-   side-by-side map

### Income & Relative Housing Costs

The [biscale](https://chris-prener.github.io/biscale/) R package [@biscale] can be used to create maps that show how two metrics vary together spatially (bivariate choropleth maps).

@fig-bivariate-all shows the relationship between estimated income and relative housing costs for the top `{r} n_systems` systems by estimated population in Sacramento County.

```{r}
#| message: false
#| warning: false
#| fig-width: 8 
#| fig-height: 6
#| label: fig-bivariate-all
#| code-fold: true

# Table B25140 - Housing Costs as a Percentage of Household Income in the past 12 months.
# Shows the count of households paying more than 30% or 50% of their income towards housing 
# costs broken out by three tenure categories (owned with a mortgage, owned without a mortgage, and rented).

# set defaults
biscale_pal <- 'BlueOr' # 'GrPink' # 'DkViolet2'
biscale_dim <- 3

# create classes
biscale_data <- bi_class(water_system_demographics %>% 
                             filter(water_system_name %in% systems_top_n) %>% 
                             filter(!is.na(median_household_income_hh_weighted)), 
                         x = households_all_housing_costs_over30pct_percent, 
                         y = median_household_income_hh_weighted, 
                         style = "quantile", 
                         dim = biscale_dim)

# create map
biscale_map <- ggplot() +
    geom_sf(data = biscale_data, 
            mapping = aes(fill = bi_class), 
            color = "white", 
            size = 0.1, 
            show.legend = FALSE) +
    bi_scale_fill(pal = biscale_pal, 
                  dim = biscale_dim) + 
    labs(
        title = "Estimated % of Households Paying More Than 30% of Income Towards Housing Costs \nand Estimated Median Household Income in Sacramento Water Systems",
        subtitle = glue("Top {n_systems} Water Systems by Population"),
        caption = glue("Data estimated from {acs_year} 5-year ACS Block Groups")
        # title = "Estimated Housing Cost as % of Household Income and \nEstimated Median Household Income in Sacramento Water Systems", 
        # caption = "% Housing cost shows the percent of households paying more than 30% of their income towards housing costs \nIncome shows median household income (yellow = missing)"
    ) +
    #   labs(
    #   title = "Housing Cost<sup>1</sup> and Income<sup>2</sup> in Sacramento Water Systems",
    #   caption = "<sup>1</sup>% of households paying more than 30% of their income towards housing costs<br><sup>2</sup>Median household income (yellow = missing)",
    #   subtitle = glue("Top {n_systems} systems by population")
    # ) +
    # add missing polygons back in
    geom_sf(data = water_system_demographics %>% 
                filter(water_system_name %in% systems_top_n) %>% 
                filter(is.na(median_household_income_hh_weighted)),
            color = "white",
            fill = 'gold'
    ) +
    geom_sf(data = counties_ca %>% filter(NAME == 'Sacramento'), 
            color = 'grey',
            fill = NA) +
    bi_theme() + 
    theme(plot.title = element_text(size=12), # element_markdown(size=12)
          plot.subtitle = element_text(size=10),
          plot.caption = element_text(size=8, hjust = 1)) # element_markdown(size=8, hjust = 1))

# create legend
biscale_legend <- bi_legend(pal = biscale_pal,
                            dim = biscale_dim,
                            xlab = "% Housing Costs ",
                            ylab = "Income ",
                            size = 8)

# construct map
biscale_plot <- ggdraw() +
    draw_plot(biscale_map, 0, 0, 1, 1) +
    draw_plot(biscale_legend, 0.1, .65, 0.2, 0.2)

biscale_plot
```

@fig-bivariate-system shows the same variables (relative housing costs and income) for the portions block groups overlapping `{r} str_to_title(system_plot)` – this illustrates the data underlying the interpolation process.

```{r}
#| message: false
#| warning: false
#| fig-width: 8 
#| fig-height: 6
#| label: fig-bivariate-system
#| code-fold: true

# set defaults
biscale_pal_system <- 'BlueOr' # 'GrPink' # 'DkViolet2'
biscale_dim_system <- 3

# create classes
biscale_data_system <- bi_class(census_data_interpolate %>% 
                                    filter(water_system_name == system_plot) %>% 
                                    filter(!is.na(median_household_income)), 
                                x = households_all_housing_costs_over30pct_percent, 
                                y = median_household_income, 
                                style = "quantile", 
                                dim = biscale_dim_system)
# create map
biscale_map_system  <- ggplot() +
    geom_sf(data = biscale_data_system , 
            mapping = aes(fill = bi_class), 
            color = "white", 
            size = 0.1, 
            show.legend = FALSE) +
    bi_scale_fill(pal = biscale_pal_system, 
                  dim = biscale_dim_system) + 
    labs(
        title = glue("Estimated % of Households Paying More Than 30% of Income Towards Housing Costs \nand Estimated Median Household Income in {str_to_title(system_plot)}"),
        # subtitle = glue(""),
        caption = glue("Data from {acs_year} 5-year ACS Block Groups (Yellow = Missing Data)")#,
        # title = glue("Housing Cost and Income \nin {str_to_title(system_plot)}"), 
        # caption = "% Housing cost shows the percent of households paying more than 30% of their income towards housing costs \nIncome shows median household income (yellow = missing)"#,
    ) +
    # add the missing polygons back in
    geom_sf(data = census_data_interpolate %>% 
                filter(water_system_name == system_plot) %>% 
                filter(is.na(median_household_income)),
            color = "white",
            fill = 'gold'
    ) +
    bi_theme() + 
    theme(plot.title = element_text(size=12), # element_markdown(size=12)
          plot.subtitle = element_text(size=10),
          plot.caption = element_text(size=8, hjust = 1)) # element_markdown(size=8, hjust = 1))

# create legend
biscale_legend <- bi_legend(pal = biscale_pal_system,
                            dim = biscale_dim_system,
                            xlab = "% Housing Costs ",
                            ylab = "Income ",
                            size = 8)

# construct map
biscale_plot_system <- ggdraw() +
    draw_plot(biscale_map_system, 0, 0, 1, 1) +
    draw_plot(biscale_legend, 0.1, .55, 0.2, 0.2)

biscale_plot_system
```

## Check / Validate Results {#sec-check-validate}

We can apply a few additional checks to verify whether or not the calculations above are correct and/or whether the results are reasonable.

### Check Count Variables Estimated with Areal Interpolation {#sec-check-areal-interp}

As noted above, it's possible to use pre-built functions for areal interpolation, and we can use those to double check the calculated count data above. For example, we can use the `st_interpolate_aw` function from the `sf` package (see @sec-detailed-pop-estimates for use of a similar function from the `areal` R package):

```{r}
#| warning: false

# NOTE: it's only necessary to check the estimated values for one variable - 
# this just checks the total estimated population

# sf package
check_sf <- st_interpolate_aw(x = census_data_acs %>% 
                                  select(population_total_count),
                              to = water_systems_sac,
                              extensive = TRUE) %>% 
    bind_cols(water_systems_sac %>% st_drop_geometry)

# check - should be TRUE if results are equivalent
all(check_sf %>% 
        arrange(water_system_name) %>% 
        pull(population_total_count) %>% 
        round(5) ==
        water_system_demographics %>% 
        arrange(water_system_name) %>% 
        pull(population_total_count) %>% 
        round(5)
)
```


### Compare Estimated vs Reported Population Estimates {#sec-check-pop-estimated-reported}

\[TO DO: Create map\]

Based on the map above, it's apparent that it's likely difficult to obtain reasonable estimates for some suppliers, such as the suppliers with very small service areas in the southern portion of the county where the block groups are very large (and the supplier's service are is only a small fraction of the total area of the block group). These issues are explored further in @sec-small-area-estimates.

Note that there are a number of reasons why the estimated population values are likely to differ from the population numbers in the water system dataset (e.g., the depicted boundaries may not be correct or exact, the supplier may have used different methods to count/estimate the population they serve, the time frames for the estimates may be different, etc.). But, there may also be some cases where the numbers differ significantly – depending on the actual analysis being performed, this may mean that further work is needed for certain areas, or could mean that this method may not be sufficient and different methods are needed.

As a check, we can add a column to the interpolated dataset (which we'll call `population_percent_difference`) to compute the difference between the estimated total population (in the `population_total` field) and the total population listed in the `water_system_population_reported` field (which is the reported value from the water system dataset).

```{r}

water_system_demographics_check <- water_system_demographics %>% 
    left_join(water_systems_sac %>% 
                  st_drop_geometry() %>% 
                  select(water_system_name, water_system_population_reported,
                         water_system_service_connections),
              by = 'water_system_name')

water_system_demographics_check <- water_system_demographics_check %>%
    mutate(population_percent_difference =
               round(100 * (population_total_count - water_system_population_reported) / 
                         water_system_population_reported, 
                     2), 
           .after = water_system_population_reported)
```

For larger water systems, the estimated population values seem to be roughly in line with the population numbers in the original dataset-- you can see this in the upper rows of @tbl-pop-est-large.

```{r}
#| label: tbl-pop-est-large
#| tbl-cap: "Water Systems Sorted by Reported Population (Largest to Smallest)"
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_demographics_check %>%
    st_drop_geometry() %>%
    arrange(desc(water_system_population_reported)) %>%
    select(water_system_name, 
           water_system_service_connections,
           water_system_population_reported, 
           population_total_count,
           population_percent_difference,
           ) %>%
    mutate(population_percent_difference = pct_format(
        population_percent_difference / 100)) %>%
    rename('Water System Name' = water_system_name, 
           'Service Connections' = water_system_service_connections,
           'Estimated Population' = population_total_count,
           'Reported Population' = water_system_population_reported,
           'Percent Difference' = population_percent_difference,
           ) %>%
    kable(align = 'c', 
          format.args = list(big.mark = ',')
          ) %>%
    scroll_box(height = "400px")
```

But for water systems with a small population and/or service area, the estimated demographics may not match the reported population numbers from the water system dataset very well -- you can see this in the top rows of @tbl-pop-est-small. This probably indicates that, for small areas, some adjustments and/or further analysis may be needed, and the preliminary estimated values should be treated with some caution/skepticism.

Note: See @sec-small-area-estimates below for some more investigation into water systems whose estimated population is at or near zero.

```{r}
#| label: tbl-pop-est-small
#| tbl-cap: "Water Systems Sorted by Reported Population (Smallest to Largest)"
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_demographics_check %>%
    st_drop_geometry() %>%
    arrange(water_system_population_reported) %>%
    select(water_system_name, 
           water_system_service_connections,
           water_system_population_reported, 
           population_total_count,
           population_percent_difference,
           ) %>%
    mutate(population_percent_difference = pct_format(population_percent_difference / 100)) %>%
    rename('Water System Name' = water_system_name, 
           'Service Connections' = water_system_service_connections,
           'Estimated Population' = population_total_count,
           'Reported Population' = water_system_population_reported,
           'Percent Difference' = population_percent_difference,
           ) %>%
    kable(align = 'c', 
          format.args = list(big.mark = ',')
          ) %>%
    scroll_box(height = "400px")
```

## Alternative Computation Methods {#sec-alternative-methods}

As noted above in @sec-estimate-considerations-alternatives, in addition to the method described above, there are other methods that could be applied to estimate demographics of target areas (like water systems) from census data. Different methods may have their own strengths / weaknesses and applicable use cases. This section covers some other potential methods (but is not an exhaustive / comprehensive list of alternatives).

### Simplified Method With MOE Estimates {#sec-alternative-simplified}

::: callout-warning
This section is in progress.
:::

As noted above, determining the margin of error (MOE) for estimates computed using areal weighted interpolation to aggregate portions of census units that overlap the target area of interest may not be possible (more research may be needed). If it's necessary to compute MOEs for your aggregated values, and/or it's preferable to use a simpler approach that doesn't apply areal interpolation to assign fractional portions of census units to the target area, then a simplified method could be applied.

::: callout-tip
For guidance on how calculate MOEs for some types of derived estimates, see [this document](https://www.census.gov/content/dam/Census/library/publications/2020/acs/acs_general_handbook_2020_ch08.pdf).
:::

In this case, one option could be to use a minimum coverage threshold, where entire census units whose portion of area that overlaps the target area is greater than the threshold are treated as part of the target area, and any census units whose portion of area that overlaps the target area is less than the threshold are not treated as part of the target area (the threshold can be set to zero to use all census units that overlap the target area). But, when using a minimum coverage threshold, some water systems may not have any census units that meet the coverage threshold, so they may need to be accountetd for separately (e.g., by selecting the overlapping census unit that has the greatest portion of overlap, as is done below), or those systems could be excluded from the calculation.

Because this approach operates on entire census units, the census bureau's recommended approach for aggregating MOEs can be applied to produce an aggregated MOE. (However, keep in mind that the aggregated MOE applies to the uncertainty in the estimate for the census units included in the aggregation, and not may not necessarily capture the uncertainty in the estimate of the target area, since the two areas are now different – i.e., there is an additional unquantified element of uncertainty/error which is not reflected in the MOE due to this mismatch. In general, any estimate which attempts to compute census demographics for areas that don't align with the census boundaries may have some element of un-quantifiable error – more research/input may be needed.)

::: callout-tip
`tidycensus` has functions for calculating MOEs for derived estimates based on Census-supplied formulas, including [`moe_sum()`](https://walker-data.com/tidycensus/reference/moe_sum.html), [`moe_product()`](https://walker-data.com/tidycensus/reference/moe_product.html), [`moe_ratio()`](https://walker-data.com/tidycensus/reference/moe_ratio.html), and [`moe_prop()`](https://walker-data.com/tidycensus/reference/moe_prop.html).
:::

Here's an example calculation:

```{r}
#| warning: false
#| message: false

# define threshold value - 
## set to zero to use all census units that overlap the target area, set higher 
## to require a larger % of any given census unit to overlap the target area to 
## be included in estimates (e.g. 0.5 requires at least 50% of a census unit to 
## overlap a water system to be included in the calculation for that water system)
overlap_threshold <- 0.5

# get census data (with MOEs)
census_data_acs_moe <- get_acs(geography = 'block group',
                               state = 'CA', 
                               county = counties_list,
                               filter_by = water_systems_filter,
                               year = acs_year,
                               survey = 'acs5',
                               variables = census_vars_acs, 
                               output = 'wide', # can be 'wide' or 'tidy'
                               geometry = TRUE,
                               cache_table = TRUE) %>% 
    st_transform(crs_projected) # convert to common coordinate system

# compute area of overlap for each census unit
simplified_calc <- census_data_acs_moe %>%
    mutate(census_unit_area = st_area(.)) %>% 
    st_intersection(water_systems_sac %>% 
                        select(water_system_name)) %>%
    mutate(clipped_area = st_area(.)) %>% 
    mutate(overlap_portion = drop_units(clipped_area / census_unit_area)) %>% 
    mutate(geoid_system = paste(GEOID, water_system_name, sep = '|')) %>% 
    st_drop_geometry()

# determine which census units to include, based on threshold value
simplified_calc <- simplified_calc %>% 
    mutate(above_threshold = overlap_portion >= overlap_threshold)

# account for water systems with no census units that meet the threshold value
## get list of systems with at least 1 census unit above threshold
simplified_systems_above_threshold <- simplified_calc %>% 
    filter(above_threshold == TRUE) %>% 
    pull(water_system_name) %>% 
    unique()
## get list of systems with no census units above threshold    
simplified_systems_below_threshold <- water_systems_sac %>% 
    filter(!water_system_name %in% simplified_systems_above_threshold) %>% 
    pull(water_system_name)

## select the 1 census unit per system with the greatest overlap 
simplified_systems_below_threshold_keep <- simplified_calc %>% 
    filter(water_system_name %in% simplified_systems_below_threshold) %>% 
    group_by(water_system_name) %>%
    slice_max(order_by = overlap_portion, n = 1) %>%
    ungroup()

# filter census units based on threshold value (and account for water systems 
# with no census units that meet the threshold value)
geoid_system_keep_above_threshold <- simplified_calc %>% 
    filter(above_threshold == TRUE) %>% 
    pull(geoid_system)
geoid_system_keep_below_threshold <- simplified_systems_below_threshold_keep %>% 
    pull(geoid_system)

census_data_acs_moe <- census_data_acs_moe %>% 
    st_join(water_systems_sac %>% select(water_system_name)) %>% 
    mutate(geoid_system = paste(GEOID, water_system_name, sep = '|')) %>% 
    filter(geoid_system %in% c(geoid_system_keep_above_threshold, 
                               geoid_system_keep_below_threshold))

# aggregate
# [TO DO: compute aggregated values]
# simplified_calc_aggregate <- census_data_acs_moe %>% 
#     group_by(water_system_name, water_systems_filter) %>% 
#     {.} %>% 
#     ungroup()

# compute MOEs
# [TO DO - use tidycensus functions to calculate MOEs]

```

@fig-simplified-calc-map shows the census units used in this simplified method to estimate demographics for `{r} str_to_title(system_plot)`.

::: {#fig-simplified-calc-map}
```{r}
#| warning: false
#| code-fold: true

mapview(census_data_acs_moe %>% 
            filter(water_system_name == system_plot), 
        alpha.regions = 0.8, 
        col.regions = 'grey60',
        color = 'cyan',
        # lwd = 1.3, 
        label = 'NAME',  
        layer.name = 'ACS Data', 
        legend = FALSE) + #  zcol = 'NAME'    
    mapview(water_systems_sac %>% 
                filter(water_system_name == system_plot), 
            alpha.regions = 0.3, 
            col.regions = 'darkblue',
            color = 'black',
            lwd = 1.3, 
            zcol = 'water_system_name',
            # label = 'water_system_name',
            layer.name = 'Water System Boundary', 
            legend = FALSE)
```

Water system `{r} str_to_title(system_plot)` (light blue fill / black border) and boundaries of census units (grey fill / blue border) used to estimate water system demographics for the simplified approach.
:::

While this approach may work well for relatively large water systems (where the size of the system is significantly greater than the census units used for the analysis), for smaller water systems this method might be somewhat more problematic, as shown in @fig-simplified-calc-map-small-system.

::: {#fig-simplified-calc-map-small-system}
```{r}
#| warning: false
#| code-fold: true

system_plot_small <- 'RIO LINDA/ELVERTA COMMUNITY WATER DIST'

mapview(census_data_acs_moe %>% 
            filter(water_system_name == system_plot_small), 
        alpha.regions = 0.8, 
        col.regions = 'grey60',
        color = 'cyan',
        # lwd = 1.3, 
        label = 'NAME',  
        layer.name = 'ACS Data', 
        legend = FALSE) + #  zcol = 'NAME'    
    mapview(water_systems_sac %>% 
                filter(water_system_name == system_plot_small), 
            alpha.regions = 0.3, 
            col.regions = 'darkblue',
            color = 'black',
            lwd = 1.3, 
            zcol = 'water_system_name',
            # label = 'water_system_name',
            layer.name = 'Water System Boundary', 
            legend = FALSE)

```

Water system `{r} str_to_title(system_plot_small)` (light blue fill / black border) and boundaries of census units (grey fill / blue border) used to estimate water system demographics for the simplified approach.
:::

@fig-simplified-calc-map-small-system-2 shows another example of a small system -- in this case there are large block groups which the water system only overlaps a small portion of.

::: {#fig-simplified-calc-map-small-system-2}
```{r}
#| warning: false
#| code-fold: true

system_plot_small <- 'RANCHO MURIETA COMMUNITY SERVI'

mapview(census_data_acs %>% 
            st_filter(water_systems_sac %>% 
                          filter(water_system_name == system_plot_small)) %>% 
            filter(!GEOID %in% (census_data_acs_moe %>% 
                                    filter(water_system_name == system_plot_small) %>% 
                                    pull(GEOID))), 
        alpha.regions = 0.3, 
        col.regions = 'grey80',
        color = 'grey30',
        # lwd = 1.3, 
        label = 'NAME',  
        layer.name = 'ACS Data - Not Used', 
        legend = FALSE) + #  zcol = 'NAME' 
    mapview(census_data_acs_moe %>% 
                filter(water_system_name == system_plot_small), 
            alpha.regions = 0.8, 
            col.regions = 'grey60',
            color = 'cyan',
            # lwd = 1.3, 
            label = 'NAME',  
            layer.name = 'ACS Data - Used', 
            legend = FALSE) + #  zcol = 'NAME'    
    mapview(water_systems_sac %>% 
                filter(water_system_name == system_plot_small), 
            alpha.regions = 0.3, 
            col.regions = 'darkblue',
            color = 'black',
            lwd = 1.3, 
            zcol = 'water_system_name',
            # label = 'water_system_name',
            layer.name = 'Water System Boundary', 
            legend = FALSE)
```

Water system `{r} str_to_title(system_plot_small)` (light blue fill / black border), boundaries of census units (dark grey fill / blue border) used to estimate water system demographics for the simplified approach, and boundaries of census units overlapping the water system but not included in the demographic estimates (light grey fill).
:::

### Population Weighted Areal Interpolation {#sec-alternative-interpolate_pw}

The `tidycensus` package has a function for performing population weighted areal interpolation, [`interpolate_pw`](https://walker-data.com/tidycensus/reference/interpolate_pw.html). Note that this is somewhat different than the population weighted interpolation procedure applied above in @sec-pop-interp (which starts with areal interpolation to estimate count data). Instead the `interpolate_pw` function "takes into account the distribution of the population within a Census unit to intelligently transfer data between incongruent units" -- in more detail (from [here](https://walker-data.com/census-r/spatial-analysis-with-us-census-data.html?q=interpolate_pw#population-weighted-areal-interpolation)):

    "An alternative method, population-weighted areal interpolation, can represent an improvement. As opposed to using area-based weights, population-weighted techniques estimate the populations of the intersections between origin and destination from a third dataset, then use those values for interpolation weights.

    This method is implemented in tidycensus with the `interpolate_pw()` function. This function is specified in a similar way to `st_interpolate_aw()`, but also requires a third dataset to be used as weights, and optionally a weight column to determine the relative influence of each feature in the weights dataset."

::: callout-warning
One drawback of using this approach is that it may not work well in cases where the overall area covered by the target area is significantly smaller than the area covered by the source dataset -- for example, small water systems are often not given an estimated value using this method and `NA`s are returned for those areas (even if `NA` values are removed from the source data first). More research / feedback may be needed on how applicable this approach may be for certain use cases.
:::

First we can interpolate data for the 'extensive' (count) variables:
```{r}
#| warning: false
#| message: false

water_system_demographics_interpolate_pw_extensive <- interpolate_pw(
    from = census_data_acs %>%
        filter(!is.na(population_total_count)) %>% 
        select(ends_with('_count')),
    to = water_systems_sac,
    to_id = 'water_system_name',
    extensive = TRUE, # use TRUE for count data - returns weighted sums
    weights = census_data_decennial,
    # weight_placement = 'surface',
    weight_column = 'population_total_count') %>%
    mutate(across(
        .cols = ends_with('_count'),
        .fns = ~ round(.x, 0)
    )) %>% 
    arrange(water_system_name)
```

Then we can interpolate data for the remaining 'intensive' variables:
```{r}
#| warning: false
#| message: false

water_system_demographics_interpolate_pw_intensive <- interpolate_pw(
    from = census_data_acs %>%
        filter(!is.na(population_total_count)) %>% 
        select(average_household_size, 
               median_household_income, 
               per_capita_income),
    to = water_systems_sac,
    to_id = 'water_system_name',
    extensive = FALSE, # use FALSE to get weighted means
    weights = census_data_decennial,
    # weight_placement = 'surface',
    weight_column = 'population_total_count') %>%
    mutate(across(
        .cols = ends_with('_count'),
        .fns = ~ round(.x, 0)
    )) %>% 
    arrange(water_system_name)
```

Then we can join the datasets with the two types of variables: 
```{r}
#| warning: false
#| message: false

water_system_demographics_interpolate_pw <- water_system_demographics_interpolate_pw_extensive %>% 
    left_join(water_system_demographics_interpolate_pw_intensive %>% 
                  st_drop_geometry(), 
              by = 'water_system_name')
```

Note that this returns `NA`s for `{r} sum(is.na(water_system_demographics_interpolate_pw_extensive$population_total_count))` water systems, which generally appear to be relatively smaller systems. 

@tbl-interpolate-pw-compare shows a comparison of the water system populations estimated using `interpolate_pw` and the reported system populations.

```{r}
#| label: tbl-interpolate-pw-compare
#| tbl-cap: "Results Comparison - estimated population with interpolate_pw() vs. reported population (Sorted Largest to Smallest by Reported Population)"
#| tbl-cap-location: top
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_demographics_interpolate_pw %>%
    select(water_system_name, population_total_count) %>% 
    st_drop_geometry() %>% 
    left_join(water_systems_sac %>%
                  st_drop_geometry() %>%
                  select(water_system_service_connections, 
                         water_system_population_reported, 
                         water_system_name),
              by = 'water_system_name') %>% 
    arrange(desc(water_system_population_reported)) %>% 
    relocate(water_system_service_connections, water_system_population_reported, 
             .before = population_total_count) %>% 
    mutate(population_percent_difference =
               round(100 * (population_total_count - water_system_population_reported) / 
                         water_system_population_reported, 
                     2), 
           .after = population_total_count) %>% 
    mutate(population_percent_difference = pct_format(
        population_percent_difference / 100)
    ) %>%
    rename('Service Connections' = water_system_service_connections,
           'Reported Population' = water_system_population_reported,
           'Estimated Population' = population_total_count,
           'Percent Difference' = population_percent_difference) %>% 
    kable(align = 'c', 
          format.args = list(big.mark = ',')) %>%
    scroll_box(height = "400px")
```

@tbl-water-sys-demographics-interpolate-pw provides a complete view of the water system demographics estimated using the population weighted areal interpolation approach with the tidycensus `interpolate_pw` function.

```{r}
#| label: tbl-water-sys-demographics-interpolate-pw
#| tbl-cap: "Estimated Water System Demographics"
#| tbl-cap-location: top
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_demographics_interpolate_pw %>%
    st_drop_geometry() %>% 
    mutate(across(
        .cols = ends_with('_percent'),
        .fns = ~ pct_format(. / 100))
    ) %>%
    rename_with(.cols = everything(), 
                .fn = ~ str_replace_all(., pattern = '_', replacement = ' ') %>% 
                    str_to_title(.)) %>% 
    kable(align = 'c', 
          format.args = list(big.mark = ',')
    ) %>%
    scroll_box(height = "400px")
```

### Modified Population Weighted Areal Interpolation {#sec-alternative-modified-pw-areal}

::: callout-warning
This section is in progress.
:::

This section describes a method which is somewhat similar to the approach used in @sec-alternative-interpolate_pw above, in that it tries to account for variability in the distribution of the population within census units (block groups) by using more granular data from another source (decennial census blocks).

This method uses block and block group data from the decennial census to estimate weights that represent the portion of each block group's population to apply to the target area (water system boundary). It then applies those weights to 'current' data from the most recent ACS to estimate count data (population, number of households, etc.) for each overlapping block group, and finally applies that estimated count data to the remaining variables that describe the count variables (per capita income, average household size, etc) to produce aggregated estimates for each target area (water system).


## Considerations for Detailed Population Estimates {#sec-detailed-pop-estimates}

If you're primarily interested in estimates of population/household counts alone (possibly including population by race/ethnicity, age, gender, etc.) as opposed to more detailed socio-economic data (like income or poverty rates), in some cases it may make sense to use the block-level population data from the decennial census rather than block group level population data from the ACS. This method likely represents the most precise estimate of population (or other count data) that we can make from census data alone (i.e., without looking at other sources such as aerial imagery or parcel data).

::: callout-note
As described elsewhere, it may also be possible to use the block-level decennial population data as a way to estimate the distribution of the population within Census units and apply that information to the ACS data - see @sec-alternative-interpolate_pw and @sec-alternative-modified-pw-areal above for methods which do that).
:::

Since the decennial census only occurs once every 10 years, those estimates won't necessarily reflect recent population changes (and will get generally be less accurate as the time since the last decennial census increases; however, keep in mind that even the 5-year ACS is an average that encompasses previous years' estimates, so it also reflects some element of 'historical' data -- for example, the 2022 5-year ACS reflects an average of data from 2018-2022). To reflect more recent population changes, one option may be to apply population projections or trends from historical records to scale the values calculated with this method. 

Also, these values could simply be used to check the populations estimated from the ACS using any of the methods described above, and could help to flag areas where those methods are insufficient and more close inspection is needed.

As a simple way to compute these estimates, we can use the `aw_interpolate` function from the `areal` package. This is similar to the `st_interpolate_aw` function from the `sf` package (see @sec-check-areal-interp for an example) -- either one works, but the `aw_interpolate` function provides some additional options and documentation (for example, see [here](https://cran.r-project.org/web/packages/areal/vignettes/areal.html) or [here](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html)). 

::: callout-note
There are some settings that you may need to modify in the `aw_interpolate` function depending on the type of analysis you're doing. In particular, for more information about the `weight` argument – which can be either `sum` or `total` – see [this section of the documentation](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html#calculating-weights-for-extensive-interpolations). For more information about extensive versus intensive interpolations, see [this section of the documenation](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html#extensive-and-intensive-interpolations) (as noted above, the approaches described above avoid using areal interpolation to calculate intensive variables when count data associated with those variables that can be used as weighting factors -- e.g. populations, households, etc. -- are known; some of those considerations are discussed [here](https://chris-prener.github.io/areal/articles/areal-weighted-interpolation.html#mixed-interpolations); more research / input may be needed on that issue).
:::

```{r}
#| warning: false

# define variables to interpolate
vars_interpolate_aw <- census_data_decennial %>% 
    st_drop_geometry() %>% 
    select(starts_with('population_')) %>% 
    names()

# interpolate
water_system_population_estimates_blocks <- water_systems_sac %>% 
    aw_interpolate(tid = water_system_name,
                   source = census_data_decennial,
                   sid = GEOID,
                   weight = 'total',
                   extensive = vars_interpolate_aw)

# clean
water_system_population_estimates_blocks <- water_system_population_estimates_blocks %>% 
    mutate(
        across(
            .cols = starts_with('population_'),
            .fns = ~ round(.x, 0)
        )
    )
```

Here's a view of the structure of the data that's returned:
```{r}
glimpse(water_system_population_estimates_blocks)
```

@tbl-interpolate-areal-detailed-compare shows a comparison of the system populations estimated using the block-level data from the `{r decennial_year}` Decennial Census and the reported system populations.

```{r}
#| label: tbl-interpolate-areal-detailed-compare
#| tbl-cap: "Results Comparison - detailed population estimates with block-level Decennial data vs. reported population (Sorted Largest to Smallest by Reported Population)"
#| tbl-cap-location: top
#| code-fold: true

pct_format <- label_percent(accuracy = 0.01)

water_system_population_estimates_blocks %>%
    st_drop_geometry() %>% 
    select(water_system_name, water_system_service_connections,
           water_system_population_reported, population_total_count) %>%
    arrange(desc(water_system_population_reported)) %>%
    mutate(population_percent_difference =
               round(100 * (population_total_count - water_system_population_reported) /
                         water_system_population_reported,
                     2),
           .after = population_total_count) %>%
    mutate(population_percent_difference = pct_format(
        population_percent_difference / 100)) %>%
    rename('Service Connections' = water_system_service_connections,
           'Reported Population' = water_system_population_reported,
           'Estimated Population' = population_total_count,
           'Percent Difference' = population_percent_difference) %>%
    kable(align = 'c',
          format.args = list(big.mark = ',')) %>%
    scroll_box(height = "400px")
```

## Considerations for Small / Rural Area Estimates {#sec-small-area-estimates}

::: callout-warning
This section is in progress.
:::

For some water systems, the estimated population using the areal interpolation above (@sec-areal-interp) was at or near zero, and it may be useful to look at an example to see what's going on with one of those cases.

(because the water system may encompass only a small portion of one or a few census units, and the entire census unit(s) may not be representative of the small portion(s)), especially those in rural environments (where population densities are lower, population centers tend to be spread out, and census units tend to be larger).

\[TO DO: insert map\]

From the map above \[TO DO: insert map\], you can see that the service area reported for some systems are very small, only covering a small fraction of a single census unit, resulting in a population estimate that is very low. In these cases, it could be that the system area was drawn incorrectly (i.e., maybe it doesn't really depict the entire service area), in which case the reported service area should be revised. Or, it's possible that the population within the given census unit is very un-evenly distributed and instead there's a relatively high density population cluster in the depicted service area, in which case a more sophisticated method than an area-weighted average should be used (e.g., maybe consider the density of buildings, roads, and/or other features associated with inhabited areas).


## Working with Other Source Datasets {#sec-other-sources}

In addition to using census data, it's possible to use other types of *source* datasets to compute characteristics of custom *target* areas like water systems. The process is generally likely to be similar to the processes shown above using census data, but each source dataset may require unique considerations (e.g., to handle missing values, uncertain boundaries, etc.).

### CalEnviroScreen {#sec-calenviroscreen}

::: callout-warning
This section is in progress.
:::

\[TO DO: example computation of weighted average CES scores\]

Notes to consider:

-   Some census tracts are missing CES scores (overall and/or for certain indicators), and have to deal with those missing values somehow

-   CES 4.0 is tract-level data, and uses 2010 census boundaries (so boundaries won't match current ACS or decennial boundaries)

-   CES 4.0 boundaries are simplified, and boundaries between tracts are not consistent – for some types of analysis (especially when looking at point data - e.g., facilities), it may be better to use the original TIGER dataset (available from either the `tidycensus` or `tigris` R packages)

<br>
