[
  {
    "objectID": "example_census_race_ethnicity_calculation.html",
    "href": "example_census_race_ethnicity_calculation.html",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "",
    "text": "Note\n\n\n\nFor comments, suggestions, corrections, or questions on anything below, contact david.altare@waterboards.ca.gov, or open an issue on github.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a draft / work in progress – some parts are still under development, and existing parts may change.\n\n\nThis document provides an example of how to use tools available from the R programming language (R Core Team 2023) to estimate characteristics of any given target spatial area(s) (e.g., neighborhoods, project boundaries, water supplier service areas, etc.) based on data from a source dataset containing the characteristic data of interest (e.g., census data, CalEnvrioScreen scores, etc.), especially when the boundaries of the source and target areas overlap but don’t necessarily align with each other. It also provides some brief background on the various types of data available from the U.S Census Bureau, and links to a few places to find more in-depth information.\nThis particular example estimates demographic characteristics of community water systems in the Sacramento County area (the target dataset). It uses the tidycensus R package (Walker and Herman 2023) to access selected demographic data from the U.S. Census Bureau (the source dataset) for census units whose spatial extent covers those water systems’ service areas, then uses the sf package (Pebesma and Bivand 2023) package (for working with spatial data) and the tidyverse collection of packages (Wickham et al. 2019) (for general data cleaning and transformation) to estimate some demographic characteristics of each water system based on that census data. It also uses the areal R package (Prener et al. 2019) to check some of the results, and as general guidance on the principles and techniques for implementing areal interpolation.\nThis example is just intended to be a simplified demonstration of a possible workflow. For a real analysis, additional steps and considerations – that may not be covered here – may be needed to deal with data inconsistencies (e.g., missing or incomplete data), required level of precision and acceptable assumptions (e.g. more fine-grained datasets or more sophisticated techniques could be used to estimate/model population distributions), or other project-specific issues that might arise."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-background",
    "href": "example_census_race_ethnicity_calculation.html#sec-background",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "",
    "text": "Note\n\n\n\nFor comments, suggestions, corrections, or questions on anything below, contact david.altare@waterboards.ca.gov, or open an issue on github.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThis is a draft / work in progress – some parts are still under development, and existing parts may change.\n\n\nThis document provides an example of how to use tools available from the R programming language (R Core Team 2023) to estimate characteristics of any given target spatial area(s) (e.g., neighborhoods, project boundaries, water supplier service areas, etc.) based on data from a source dataset containing the characteristic data of interest (e.g., census data, CalEnvrioScreen scores, etc.), especially when the boundaries of the source and target areas overlap but don’t necessarily align with each other. It also provides some brief background on the various types of data available from the U.S Census Bureau, and links to a few places to find more in-depth information.\nThis particular example estimates demographic characteristics of community water systems in the Sacramento County area (the target dataset). It uses the tidycensus R package (Walker and Herman 2023) to access selected demographic data from the U.S. Census Bureau (the source dataset) for census units whose spatial extent covers those water systems’ service areas, then uses the sf package (Pebesma and Bivand 2023) package (for working with spatial data) and the tidyverse collection of packages (Wickham et al. 2019) (for general data cleaning and transformation) to estimate some demographic characteristics of each water system based on that census data. It also uses the areal R package (Prener et al. 2019) to check some of the results, and as general guidance on the principles and techniques for implementing areal interpolation.\nThis example is just intended to be a simplified demonstration of a possible workflow. For a real analysis, additional steps and considerations – that may not be covered here – may be needed to deal with data inconsistencies (e.g., missing or incomplete data), required level of precision and acceptable assumptions (e.g. more fine-grained datasets or more sophisticated techniques could be used to estimate/model population distributions), or other project-specific issues that might arise."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-setup",
    "href": "example_census_race_ethnicity_calculation.html#sec-setup",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "2 Setup",
    "text": "2 Setup\nThe code block below loads required packages for this analysis, and sets some user-defined options and defaults. If they aren’t already installed on your computer, you can install them with the R command install.packages('package-name') (and replace package-name with the name of the package you want to install).\n\n# packages ----\nlibrary(tidycensus)\nlibrary(tigris)\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(areal)\nlibrary(janitor)\nlibrary(here)\nlibrary(units)\n# library(Polychrome)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(tmap)\nlibrary(patchwork)\nlibrary(scales)\nlibrary(digest)\nlibrary(mapview)\nlibrary(biscale)\nlibrary(cowplot)\nlibrary(glue)\nlibrary(ggtext)\n\n# conflicts ----\nlibrary(conflicted)\nconflicts_prefer(dplyr::filter)\n\n# options ----\noptions(scipen = 999) # turn off scientific notation\noptions(tigris_use_cache = TRUE) # use data caching for tigris\n\n# reference system ----\ncrs_projected &lt;- 3310 # set a common projected coordinate reference system to be used throughout this analysis - see: https://epsg.io/3310"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-census-overview",
    "href": "example_census_race_ethnicity_calculation.html#sec-census-overview",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "3 Census Data Overview",
    "text": "3 Census Data Overview\nThis section provides some brief background on the various types of data available from the U.S. Census Bureau (a later section - Section 5 - demonstrates how to retrieve data from the U.S. Census Bureau using the tidycensus R package). Most of the information covered here comes from the book Analyzing US Census Data: Methods, Maps, and Models in R, which is a great source of information if you’d like more detail about any of the topics below (Walker 2023b).\n\n\n\n\n\n\nNote\n\n\n\nIf you’re already familiar with Census data and want to skip this overview, go directly to the next section: Section 4\n\n\nDifferent census products/surveys contain data on different variables, at different geographic scales, over varying periods of time, and with varying levels of certainty. Therefore, there are a number of judgement calls to make when determining which type of census data to use for an analysis – e.g., which data product to use (Decennial Census or American Community Survey), which geographic scale to use (e.g., Block, Block Group, Tract, etc.), what time frame to use, which variables to assess, etc.\nMore detailed information about U.S. Census Bureau’s data products and other topics mentioned below is available here.\n\n3.1 Census Unit Geography / Hierarchy\nPublicly available datasets from the U.S Census Bureau generally consist of individual survey responses aggregated to defined census units (e.g., census tracts) that cover varying geographic scales. Some of these units are nested and can be neatly aggregated (e.g., each census tract is composed of a collection of block groups, and each block group is composed of a collection of blocks), while other census units are outside this hierarchy (e.g., Zip Code Tabulation Areas don’t coincide with any other census unit). Figure 1 shows the relationship of all of the various census units.\nCommonly used census statistical units like tracts and block groups have target population size ranges, and can be adjusted every 10 years (with the decennial census) based on population changes. For example, all ACS 5-year datasets prior to 2020 use the 2010 boundaries for tracts, block groups, and blocks, and all ACS 5-year datasets from 2020 onward (presumably through 2029) use the 2020 boundaries for those units. Census tracts are generally around 4,000 people, with a range from about 1,200 to 8,000, and block groups generally contain 600 to 3,000 people. Blocks are the smallest census units, and are “areas bounded by visible features, such as streets, roads, streams, and railroad tracks, and by nonvisible boundaries, such as selected property lines and city, township, school district, and county limits and short line-of-sight extensions of streets and roads”. For example, a census block may be “a city block bounded on all sides by streets”, while “blocks in suburban and rural areas may be larger, more irregular in shape, and bounded by a variety of features, such as roads, streams, and transmission lines”.\n\n\n\n\n\n\nCaution\n\n\n\nCensus boundaries can change over time. Commonly used statistical units like tracts, block groups, and blocks tend to be revised every 10 years (with the decennial census), so it’s important to use a census boundary dataset that matches the version of the census demographic data you’re retrieving; otherwise, the demographic data may not match geographic areas in your boundary dataset. In some cases, a census unit that exists in a given year of the census data may not exist at all in a different year’s dataset, because census units can be split or merged when boundaries are revised.\nFor more information, see here or here or here or here.\n\n\nFor a list of the different geographic units available for each of the different census products/surveys (see Section 3.2) that can be accessed via the tidycensus package, go here.\n\n\n\n\n\n\nFigure 1: Census Unit Hierarchies\n\n\n\n\n\n3.2 Census Datasets / Surveys\nThe Decennial Census is conducted every 10 years, and is intended to provide a complete count of the US population and assist with political redistricting. As a result, it collects a relatively limited set of basic demographic data, but (should) provide a high degree of precision (i.e., in general it should provide exact counts). It is available for geographic units down to the census block (the smallest census unit available – see Section 3.1). For information about existing and planned future releases of 2020 census data products, go here.\nThe American Community Survey (ACS) provides a much larger array of demographic information than the Decennial Census, and is updated more frequently. The ACS is based on a sample of the population (rather than a count of the entire population, as in the Decennial Census), so it represents estimated values rather than precise counts; therefore, each data point is available as an estimate (typically labeled with an “E” in census variable codes, which are discussed in Section 3.3 ) along with an associated margin of error (typically labeled with “M” or “MOE” in census variable codes) around its estimated value.\nThe ACS is available in two formats. The 5-year ACS is a rolling average of 5 years of data (e.g., the 2021 5-year ACS dataset is an average of the ACS data from 2017 through 2021), and is generally available for geographic units down to the census block group (though some 5-year ACS data may only be available at less granular levels). The 1-year ACS provides data for a single year, and is only available for geographies with population greater than 65,000 (e.g., large cities and counties). Therefore, only the 5-year ACS will be useful for any analysis at a relatively fine scale (e.g., anything that requires data at or more detailed than the census tract level, or any analysis that considers smaller counties/cities – by definition, census tracts always contain significantly fewer than 65,000 people).\nIn addition to the Decennial Census and ACS data, a number of other census data products/surveys are also available. For example, see the censusapi R package (here or here) for access to over 300 census API endpoints. For historical census data, see the discussion here on using NHGIS, IPUMS, and the ipumsr package.\n\n\n3.3 Census Variables / Codes\nEach census product collects data for many different demographic variables, and each variable is generally associated with an identifier code. In order to access census data programmatically, you often need to know the code associated with each variable of interest. When determining which variables to use, you need to consider what census product contains those variables (see Section 3.2) and how they differ in terms of time frame, precision, spatial granularity (see Section 3.1), etc.\nThe tidycensus package offers a convenient generic way to search for variables across different census products using the load_variables() function, as described here.\nThe following websites may also be helpful for exploring the various census data products and finding the variable names and codes they contain:\n\nCensus Reporter (for ACS data): https://censusreporter.org/ (especially https://censusreporter.org/topics/table-codes/)\nCensus Bureau’s list of variable codes, e.g.:\n\n2020 Census codes: https://api.census.gov/data/2020/dec/pl/variables.html\n2022 ACS 5 year codes: https://api.census.gov/data/2022/acs/acs5/variables.html\n\nCensus Bureau’s data interface (for Decennial Census and ACS, and other census datasets): https://data.census.gov/cedsci/\nNational Historical Geographic Information System (NHGIS) (for ACS data and historical decennial Census data): https://www.nhgis.org/"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-system-boundaries",
    "href": "example_census_race_ethnicity_calculation.html#sec-system-boundaries",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "4 Target Data Boundaries (Water Systems)",
    "text": "4 Target Data Boundaries (Water Systems)\nIn this section, we’ll get the service area boundaries for Community Water Systems within the Sacramento County area. This will serve as the target dataset – i.e., the set of areas which we’ll be estimating the characteristics of – and will also be used to specify the geographic areas of the census data we want to retrieve. We’ll also get a dataset of county boundaries which overlap the water service areas in this study, which can also help with specifying what census data to access and/or be used to make maps and visualizations.\n\n4.1 Read Water System Data\nIn this case, we’ll get the water system dataset from a shapefile that’s saved locally, then transform that dataset into a common coordinate reference system for mapping and analysis (which is defined above in the variable crs_projected).\nThis water system dataset comes from the California Drinking Water System Area Boundaries dataset. For this example, the dataset has been pre-filtered for systems within Sacramento County (by selecting records where the COUNTY field is “SACRAMENTO”) and for Community Water Systems (by selecting records where the STATE_CLAS field is “COMMUNITY”). Some un-needed fields have also been dropped, remaining fields have been re-orderd.\n\nwater_systems_sac &lt;- st_read(here('02_data_input', \n                                  'water_supplier_boundaries_sac', \n                                  'System_Area_Boundary_Layer_Sac.shp')) %&gt;% \n    st_transform(crs_projected) # transform to common coordinate system\n\nWe can use the glimpse function (below) to take get a sense of what type of information is available in the water system dataset and how it’s structured.\n\nglimpse(water_systems_sac)\n\nRows: 62\nColumns: 12\n$ WATER_SY_1 &lt;chr&gt; \"HOOD WATER MAINTENCE DIST [SWS]\", \"MC CLELLAN MHP\", \"MAGNO…\n$ WATER_SYST &lt;chr&gt; \"CA3400101\", \"CA3400179\", \"CA3400130\", \"CA3400135\", \"CA3400…\n$ GLOBALID   &lt;chr&gt; \"{36268DB3-9DB2-4305-A85A-2C3A85F20F34}\", \"{E3BF3C3E-D516-4…\n$ BOUNDARY_T &lt;chr&gt; \"Water Service Area\", \"Water Service Area\", \"Water Service …\n$ OWNER_TYPE &lt;chr&gt; \"L\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\",…\n$ COUNTY     &lt;chr&gt; \"SACRAMENTO\", \"SACRAMENTO\", \"SACRAMENTO\", \"SACRAMENTO\", \"SA…\n$ REGULATING &lt;chr&gt; \"LPA64 - SACRAMENTO COUNTY\", \"LPA64 - SACRAMENTO COUNTY\", \"…\n$ FEDERAL_CL &lt;chr&gt; \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUN…\n$ STATE_CLAS &lt;chr&gt; \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\", \"COMMUN…\n$ SERVICE_CO &lt;dbl&gt; 82, 199, 34, 64, 128, 83, 28, 50, 164, 5684, 14798, 115, 33…\n$ POPULATION &lt;dbl&gt; 100, 700, 40, 150, 256, 150, 32, 100, 350, 18005, 44928, 20…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((-132703 403..., MULTIPOLYGON (…\n\n\nNote that this dataset already includes a POPULATION variable that indicates the population served by each water system, which we renamed to water_system_population_reported above (note: I’m not exactly how the data in this variable is derived). However, for this analysis we’ll be making our own estimate of the population within each system’s service area based on U.S. Census Bureau data and the spatial representation of the system boundaries. Given the uncertainty in how the reported population data was derived (including potential temporal differences), the population estimates produced here will likely will not exactly match the reported population data; but, the reported population data may serve as a useful check to make sure our estimates are reasonable.\nTo make the water system data easier to work with, we can make some more descriptive field names (note that while it’s redundant, we’re using the prefix water_system_ for all field names to distinguish data types when joining this data with other datasets later).\n\nwater_systems_sac &lt;- water_systems_sac %&gt;% \n    rename(water_system_name = WATER_SY_1, \n           water_system_number = WATER_SYST,\n           water_system_id  = GLOBALID,\n           water_system_boundary_type = BOUNDARY_T,\n           water_system_owner_type  = OWNER_TYPE,\n           water_system_county  = COUNTY,\n           water_system_regulating_agency = REGULATING,\n           water_system_federal_class = FEDERAL_CL,\n           water_system_state_class = STATE_CLAS,\n           water_system_service_connections = SERVICE_CO,\n           water_system_population_reported = POPULATION)\n\nHere’s a view of the structure of the revised dataset:\n\nglimpse(water_systems_sac)\n\nRows: 62\nColumns: 12\n$ water_system_name                &lt;chr&gt; \"HOOD WATER MAINTENCE DIST [SWS]\", \"M…\n$ water_system_number              &lt;chr&gt; \"CA3400101\", \"CA3400179\", \"CA3400130\"…\n$ water_system_id                  &lt;chr&gt; \"{36268DB3-9DB2-4305-A85A-2C3A85F20F3…\n$ water_system_boundary_type       &lt;chr&gt; \"Water Service Area\", \"Water Service …\n$ water_system_owner_type          &lt;chr&gt; \"L\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P\", \"P…\n$ water_system_county              &lt;chr&gt; \"SACRAMENTO\", \"SACRAMENTO\", \"SACRAMEN…\n$ water_system_regulating_agency   &lt;chr&gt; \"LPA64 - SACRAMENTO COUNTY\", \"LPA64 -…\n$ water_system_federal_class       &lt;chr&gt; \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\"…\n$ water_system_state_class         &lt;chr&gt; \"COMMUNITY\", \"COMMUNITY\", \"COMMUNITY\"…\n$ water_system_service_connections &lt;dbl&gt; 82, 199, 34, 64, 128, 83, 28, 50, 164…\n$ water_system_population_reported &lt;dbl&gt; 100, 700, 40, 150, 256, 150, 32, 100,…\n$ geometry                         &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((-132703 …\n\n\n\n4.1.1 Alternative Data Retrieval Method\nReading in data from a shapefile is shown above because it’s likely one of the more common ways that users will access their target boundary data. However, depending on the dataset, there may be other ways to access the data. For example, the code chunk below demonstrates an alternative – using the arcgislayers package (Parry 2023) – that connects directly to the source dataset (to retrieve the most recent version) and applies the filters needed to reproduce the dataset in the System_Area_Boundary_Layer_Sac.shp file. Also, note that storing data in formats other than the common shapefile format – such as the geopackage format – can have some advantages (for example, see here).\n\n# load arcgislayers package (see: https://r.esri.com/arcgislayers/index.html)\ninstall.packages('pak') # only needed if the pak package is not already installed\npak::pkg_install(\"R-ArcGIS/arcgislayers\", dependencies = TRUE)\n\nlibrary(arcgislayers)\n\n# define link to data source\nurl_feature &lt;- 'https://gispublic.waterboards.ca.gov/portalserver/rest/services/Drinking_Water/California_Drinking_water_system_numberem_Area_Boundaries/FeatureServer/0'\n\n# connect to data source\nwater_systems_feature_layer &lt;- arc_open(url_feature)\n\n# download and filter data from source\nwater_systems_sac &lt;- arc_select(\n    water_systems_feature_layer,\n    # apply filters\n    where = \"COUNTY = 'SACRAMENTO' AND STATE_CLASSIFICATION = 'COMMUNITY'\",\n    # select fields\n    fields = c('WATER_SYSTEM_NAME', 'WATER_SYSTEM_NUMBER', 'GLOBALID',\n               'BOUNDARY_TYPE', 'OWNER_TYPE_CODE', 'COUNTY',\n               'REGULATING_AGENCY', 'FEDERAL_CLASSIFICATION', 'STATE_CLASSIFICATION',\n               'SERVICE_CONNECTIONS', 'POPULATION')) %&gt;%\n    # transform to common coordinate system\n    st_transform(crs_projected) %&gt;%\n    # rename fields to match names from the shapefile (which automatically truncates field names)\n    rename(water_system_name = WATER_SYSTEM_NAME,\n           water_system_number = WATER_SYSTEM_NUMBER,\n           water_system_id = GLOBALID,\n           water_system_boundary_type = BOUNDARY_TYPE,\n           water_system_owner_type = OWNER_TYPE_CODE,\n           water_system_county = COUNTY,\n           water_system_regulating_agency = REGULATING_AGENCY,\n           water_system_federal_class = FEDERAL_CLASSIFICATION,\n           water_system_state_class = STATE_CLASSIFICATION,\n           water_system_service_connections = SERVICE_CONNECTIONS,\n           water_system_population_reported = POPULATION)\n\n\n\n\n4.2 Get County Boundaries\nWhen accessing census data using the tidycensus R package as shown below (in Section 5), it’s often useful (though not strictly required) to know which counties overlap the target dataset (note that, even though the dataset is filtered for systems in Sacramento county, there are some systems whose boundaries extend into neighboring counties). County boundaries may also be useful for making maps in later stages of the analysis. We can get a dataset of county boundaries in California from the TIGER dataset, which can be accessed with R using the tigris R package (Walker 2023a).\n\ncounties_ca &lt;- counties(state = 'CA', \n                        cb = TRUE) %&gt;% # simplified\n    st_transform(crs_projected) # transform to common coordinate system\n\nThen, we can get a list of counties that overlap with the boundaries of the Sacramento area community water systems obtained above.\n\ncounties_overlap &lt;- counties_ca %&gt;% \n    st_filter(water_systems_sac, \n              .predicate = st_overlaps)\n\ncounties_list &lt;- counties_overlap %&gt;% pull(NAME)\n\nThe counties in the counties_list variable are: San Joaquin, Yolo, Placer, Sacramento.\n\n\n4.3 Plot Target Data\nFigure 2 shows the water systems and county boundaries in an interactive map.\n\nmapview(counties_overlap, \n        alpha.regions = 0, \n        zcol = 'NAME', \n        layer.name = 'County', \n        legend = FALSE) + \n    mapview(water_systems_sac, \n            zcol = 'water_system_name', \n            layer.name = 'Water System', \n            legend = FALSE)\n\n\n\n\n\n\n\nFigure 2: Selected water systems (with county boundaries for reference)."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-census-access",
    "href": "example_census_race_ethnicity_calculation.html#sec-census-access",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "5 Accessing Census Data",
    "text": "5 Accessing Census Data\nThe following sections demonstrate how to retrieve census data from the Decennial Census and the ACS using the tidycensus R package.\nIn order to use the tidycensus R package, you’ll need to obtain a personal API key from the US Census Bureau (which is free and available to anyone) by signing up here: http://api.census.gov/data/key_signup.html. Once you have your API key, you’ll need to register it in R by entering the command census_api_key(key = \"YOUR API KEY\", install = TRUE) in the console. Note that the install = TRUE argument means that the key is saved for all future R sessions, so you’ll only need to run that command once on your computer (rather than including it in your scripts). Alternatively, you could save your key to an environment variable and retrieve it using Sys.getenv(). Either way will help you avoid the possibility of entering your API key into any scripts that could be shared publicly.\n\n\n\n\n\n\nCaution\n\n\n\nBecause the boundaries of census units (e.g., tracts, block groups, blocks, etc) can change over time, it’s important to make sure that the version (year) of the census data you’re retrieving matches the version of the census boundary dataset you’re using. The methods shown below retrieve the census boundary dataset together with the census demographic data, which ensures that this won’t be a potential problem. However, if you use a different workflow that retrieves the geographic boundaries and demographic data via separate processes, you should ensure that the versions are consistent.\n\n\nBefore downloading the census data, we can create an object that we can use to filter our requests to the census API so that they will only return census units that overlap with our target areas (the object will be passed to the filter_by argument of the get_decennial function below). Note that this isn’t strictly necessary (you could also apply the filter after making the API request), but may helpful to speed the query and reduce memory usage, especially in the case of large queries.\n\n\n\n\n\n\nNote 1\n\n\n\nAt the time of this writing, the filter_by argument of the tidycensus get_decennial and get_acs functions is fairly new, and not yet included in the official documentation.\nAlso, the filter_by argument is optional, and only appears to accept a simple features (sf) object with a single row / feature (e.g., a single water system), and will not accept an sf object with multiple rows / features. The process below attempts to work around this constraint by joining all of the selected water systems into a single multi-part polygon (i.e., an sf object with a single row). However, if you only want to retrieve data for census units that overlap a single target area (e.g., a single water system), you can skip this step.\n\n\n\n\n\n\nListing 1: Create object for filtering the API query\n\n\nwater_systems_filter &lt;- water_systems_sac %&gt;% \n    st_union() %&gt;% \n    st_as_sf()\n\n\n\n\n\n5.1 Decennial Census\nThis section retrieves census data from the Decennial Census, using the get_decennial function from the tidycensus package. As of this writing, the most recent version of the decennial census data available is from 2020, and we can set that as a variable below.\n\n# set year\ndecennial_year &lt;- 2020\n\nNext, we can define the list of demographic variables we’d like to retrieve tabular data for, by saving the census variables we want in the census_vars_decennial object (see Section 3.3 for more information about how to discover variables of interest and find their associated codes). Note that here we’re providing descriptive names associated with each variable code, which makes the data easier to work with later, but isn’t strictly necessary (i.e., you could just supply the variable codes alone).\n\n# define variables to pull from the decennial census\ncensus_vars_decennial &lt;- c(\n    'population_hispanic_or_latino_count' = 'P2_002N', # Total Hispanic or Latino\n    'population_white_count' = 'P2_005N', # White (Not Hispanic or Latino)\n    'population_black_or_african_american_count' = 'P2_006N', # Black or African American (Not Hispanic or Latino)\n    'population_native_american_or_alaska_native_count' = 'P2_007N', # American Indian and Alaska Native (Not Hispanic or Latino)\n    'population_asian_count' = 'P2_008N', # Asian (Not Hispanic or Latino)\n    'population_pacific_islander_count' = 'P2_009N', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)\n    'population_other_count' = 'P2_010N', # Some other race (Not Hispanic or Latino)\n    'population_multiple_count' = 'P2_011N', # Two or more races (Not Hispanic or Latino)\n    'population_total_count' = 'P2_001N'\n)\n\nNow, we can make the data request, using the get_decennial function, which accepts several arguments that specify exactly what data to return.\nFor this example we’re getting data at the ‘Block’ level (with the geography = 'block' argument) for the demographic variables defined above in the census_vars_decennial object (which is passed to the variables argument). As noted above, block-level data is the most granular level of spatial data available, and should provide the best results when estimating demographics for areas whose boundaries don’t align with census unit boundaries. However, depending on the use case, it may require too much time and computational resources to use the most granular spatial data, and may not be necessary to obtain a reasonable estimate. Also, keep in mind that block-level data may not be available for all variables, and some variables may only be available at less granular spatial scales (like block groups or tracts).\nIn addition to the tabular data associated with the demographic variables in our list, we’ll also get the spatial data – i.e., the boundaries of the census blocks – by setting the geometry = TRUE argument. When we do this, the tabular demographic data is pre-joined to the spatial data, so the API request returns a single dataset with both the spatial and attribute (demographic) data combined.\n\n\n\n\n\n\nNote\n\n\n\nThe tidycensus package generally returns the Census Bureau’s cartographic boundary shapefiles by default (as opposed to the core TIGER/Line shapefiles, which is the default format returned by the tigris R package). The default cartographic boundary shapefiles are pre-clipped to the US coastline, and are smaller/faster to process (alternatively you can use cb = FALSE to get the core TIGER/Line data) (see here). So the default spatial data returned by tidycensus may be somewhat different than the default spatial data returned by the tigris package, but in general I find it’s best to use the default tidycensus spatial data.\n\n\n\n\n\n\n\n\nWarning\n\n\n\nAt the block level, it appears that tidycensus only returns the more detailed core TIGER/Line shapefiles (i.e., they are identical to the default block-level geographic data returned by tigris). In some cases, that can create minor inconsistencies when working with both blocks and block groups and using the default geographies.\n\n\nWe also narrow down the search parameters geographically by specifying the state (with state = 'CA') and counties (county = counties_list) we’re seeking data for, and provide an object to the filter_by argument which filters the data returned so that it only includes census units that overlap with our target areas (see Note 1 above for more information).\n\n\n\n\n\n\nNote\n\n\n\nSupplying a list of counties may not be strictly necessary, especially in cases where you supply the optional filter_by argument. However, especially when working with granular data like blocks, supplying the county argument seems to greatly speed the API request.\n\n\nAlso, while by default the tidycensus package returns data in long/tidy format, we’re getting the data in wide format for this example (by specifying output = 'wide') because it’ll be easier to work with for the interpolation method described below to estimate demographics for non-census geographies.\n\n\n\n\nListing 2: Retrieve decennial census data\n\n\n# get census data\ncensus_data_decennial &lt;- get_decennial(geography = 'block', # can be 'block', 'block group', 'tract', 'county', etc.\n                                       state = 'CA', \n                                       county = counties_list,\n                                       filter_by = water_systems_filter,\n                                       year = decennial_year,\n                                       variables = census_vars_decennial,\n                                       output = 'wide', # can be 'wide' or 'tidy'\n                                       geometry = TRUE,\n                                       cache_table = TRUE) %&gt;% \n    st_transform(crs_projected) # convert to common coordinate system\n\n\n\n\nThe output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the population of each racial/ethnic group is reported in a separate column. Here’s a view of the contents and structure of the Decennial Census data that’s returned:\n\nglimpse(census_data_decennial)\n\nRows: 17,745\nColumns: 12\n$ GEOID                                             &lt;chr&gt; \"060670019003011\", \"…\n$ NAME                                              &lt;chr&gt; \"Block 3011, Block G…\n$ population_hispanic_or_latino_count               &lt;dbl&gt; 4, 6, 8, 11, 1, 14, …\n$ population_white_count                            &lt;dbl&gt; 20, 4, 167, 70, 86, …\n$ population_black_or_african_american_count        &lt;dbl&gt; 2, 2, 0, 8, 9, 18, 0…\n$ population_native_american_or_alaska_native_count &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0,…\n$ population_asian_count                            &lt;dbl&gt; 19, 5, 2, 1, 23, 8, …\n$ population_pacific_islander_count                 &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0,…\n$ population_other_count                            &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0,…\n$ population_multiple_count                         &lt;dbl&gt; 8, 3, 4, 10, 5, 10, …\n$ population_total_count                            &lt;dbl&gt; 53, 20, 181, 100, 12…\n$ geometry                                          &lt;POLYGON [m]&gt; POLYGON ((-1…\n\n\n\n\n5.2 American Community Survey (ACS)\nTo get data from the ACS, you can use the get_acs() function, which is very similar to the get_decennial() function used above. As of this writing, the most recent version of the 5-year ACS data available is the 2018-2022 ACS, and we can set that as a variable below (which makes it easier to update this document in future years).\n\n# set year\nacs_year &lt;- 2022\n\nHowever, since the ACS data contains data on a much broader set of socio-economic metrics, the requested data includes a greatly expanded list of variables, defined in the census_vars_acs object (see Section 3.3 for more information about how to discover variables of interest and find their associated codes). As above, we can provide descriptive names associated with each variable code, which makes the data easier to work with later, but isn’t strictly necessary (i.e., you could just supply the variable codes alone). Note that the use of prefixes (like population_ or households_) and suffixes (like _count) is intentional – those will be used later as part of the calculation process.\n\n# define variables to pull from the ACS\ncensus_vars_acs &lt;- c(\n    # --- population variables ---\n    'population_total_count' = 'B01003_001',\n    'population_hispanic_or_latino_count' = 'B03002_012', # Total Hispanic or Latino\n    'population_white_count' = 'B03002_003', # White (Not Hispanic or Latino)\n    'population_black_or_african_american_count' = 'B03002_004', # Black or African American (Not Hispanic or Latino)\n    'population_native_american_or_alaska_native_count' = 'B03002_005', # American Indian and Alaska Native (Not Hispanic or Latino)\n    'population_asian_count' = 'B03002_006', # Asian (Not Hispanic or Latino)\n    'population_pacific_islander_count' = 'B03002_007', # Native Hawaiian and Other Pacific Islander (Not Hispanic or Latino)\n    'population_other_count' = 'B03002_008', # Some other race (Not Hispanic or Latino)\n    'population_multiple_count' = 'B03002_009', # Two or more races (Not Hispanic or Latino)\n    \n    # --- poverty variables ---\n    'poverty_total_assessed_count' = 'B17021_001', # also available from 'B17020_001' (at the tract level only). Total population for whom poverty status is determined. Poverty status was determined for all people except institutionalized people, people in military group quarters, people in college dormitories, and unrelated individuals under 15 years old. These groups were excluded from the numerator and denominator when calculating poverty rates.\n    'poverty_below_level_count' = 'B17021_002', # also available from 'B17020_002' (at the tract level only). Population whose income in the past 12 months is below federal poverty level. A family and every individual in it are considered to be in poverty if the family's total income is less than the dollar value of a threshold that varies depending upon size of family, number of children, & age of householder (for 1- & 2- person households). Income is the sum of wage/salary income; net self-employment income; interest/dividends/net rental/royalty income/income from estates & trusts; Social Security/Railroad Retirement income; Supplemental Security Income (SSI); public assistance/welfare payments; retirement/survivor/disability pensions; & all other income.\n    'poverty_above_level_count' = 'B17021_019', # also available from 'B17020_010' (at the tract level only). Population whose income in the past 12 months is at or above federal poverty level. A family and every individual in it are considered to be in poverty if the family's total income is less than the dollar value of a threshold that varies depending upon size of family, number of children, & age of householder (for 1- & 2- person households). Income is the sum of wage/salary income; net self-employment income; interest/dividends/net rental/royalty income/income from estates & trusts; Social Security/Railroad Retirement income; Supplemental Security Income (SSI); public assistance/welfare payments; retirement/survivor/disability pensions; & all other income.\n    \n    # --- household variables ---\n    'households_count' = 'B19001_001', # also available from variable 'B19053_001'. A household includes all the people who occupy a housing unit - a house, an apartment, a mobile home, a group of rooms, or a single room that is occupied. People not living in households are classified as living in group quarters.\n    'average_household_size' = 'B25010_001', # A measure obtained by dividing the number of people living in occupied housing units by the total number of occupied housing units. This measure is rounded to the nearest hundredth.\n    \n    # --- household income variables ---\n    'median_household_income' = 'B19013_001', # also available from 'B19019_001' (at the tract level only). Income in the past 12 months is the sum of wage or salary income; net self-employment income; interest, dividends, or net rental or royalty income or income from estates and trusts; Social Security or Railroad Retirement income; Supplemental Security Income (SSI); public assistance or welfare payments; retirement, survivor, or disability pensions; and all other income.\n    'households_income_below_10k_count' = 'B19001_002', # count of households with income below $10,000 \n    'households_income_10k_15k_count' = 'B19001_003', # count of households with income $10,000 to $15,000 \n    'households_income_15k_20k_count' = 'B19001_004', \n    'households_income_20k_25k_count' = 'B19001_005', \n    'households_income_25k_30k_count' = 'B19001_006', \n    'households_income_30k_35k_count' = 'B19001_007', \n    'households_income_35k_40k_count' = 'B19001_008', \n    'households_income_40k_45k_count' = 'B19001_009', \n    'households_income_45k_50k_count' = 'B19001_010', \n    'households_income_50k_60k_count' = 'B19001_011', \n    'households_income_60k_75k_count' = 'B19001_012', \n    'households_income_75k_100k_count' = 'B19001_013', \n    'households_income_100k_125k_count' = 'B19001_014', \n    'households_income_125k_150k_count' = 'B19001_015', \n    'households_income_150k_200k_count' = 'B19001_016',\n    'households_income_above_200k_count' = 'B19001_017', # count of households with income above $200,000\n\n    # --- housing costs variables (% of household income) ---\n    # Housing Costs as a Percentage of Household Income in the past 12 months - NOTE: THIS TABLE IS NEW FOR THE 2022 ACS, AND WON'T BE AVAILABLE FOR PREVIOUS YEARS - Table B25140 shows the count of households paying more than 30% of their income towards housing costs broken out by three tenure categories (owned with a mortgage, owned without a mortgage, and rented). The table also shows the number of households paying more than 50% of their income toward housing costs.\n    # 'households_count' = 'B25140_001', \n    'households_mortgage_total_count' = 'B25140_002',\n    'households_mortgage_housing_costs_over30pct_count' = 'B25140_003',\n    'households_mortgage_housing_costs_over50pct_count' = 'B25140_004',\n    'households_no_mortgage_total_count' = 'B25140_006',\n    'households_no_mortgage_housing_costs_over30pct_count' = 'B25140_007',\n    'households_no_mortgage_housing_costs_over50pct_count' = 'B25140_008',\n    'households_rent_total_count' = 'B25140_010',\n    'households_rent_housing_costs_over30pct_count' = 'B25140_011',\n    'households_rent_housing_costs_over50pct_count' = 'B25140_012',\n    \n    # --- other income / economic variables ---\n    'per_capita_income' = 'B19301_001' # note: per capita income by race (at block group level) available in table B19301I\n)\n\nFinally, we can make the data request, using the get_acs function, which is very similar to the get_decennial function described above ( Section 5.1). However, for this example we’re getting data at the ‘Block Group’ level (with the geography = 'block group' argument), which is the most granular level of spatial data available for ACS data. But, keep in mind that block group-level data may not be available for all variables, and some variables may only be available at less granular spatial scales (like tracts). Note that the water_systems_filter object supplied to the filter_by argument was created above in Listing 1 (and see Note 1 above for more information about this argument).\n\n\n\n\nListing 3: Retrieve ACS data\n\n\n# get census data\ncensus_data_acs &lt;- get_acs(geography = 'block group',\n                           state = 'CA', \n                           county = counties_list,\n                           filter_by = water_systems_filter,\n                           year = acs_year,\n                           survey = 'acs5',\n                           variables = census_vars_acs, \n                           output = 'wide', # can be 'wide' or 'tidy'\n                           geometry = TRUE,\n                           cache_table = TRUE) %&gt;% \n    st_transform(crs_projected) # convert to common coordinate system\n\n\n\n\nAs above, the output is an sf object (i.e., a dataframe-like object that also includes spatial data), in wide format, where each row represents a census unit, and the each demographic variable is reported in a separate column. Here’s a view of the contents and structure of the 2022 5-year ACS data that’s returned (only the first few fields are shown):\n\nglimpse(census_data_acs[,1:20])\n\nRows: 1,054\nColumns: 21\n$ GEOID                                              &lt;chr&gt; \"060670081451\", \"06…\n$ NAME                                               &lt;chr&gt; \"Block Group 1; Cen…\n$ population_total_countE                            &lt;dbl&gt; 1768, 1881, 1098, 2…\n$ population_total_countM                            &lt;dbl&gt; 520, 585, 395, 583,…\n$ population_hispanic_or_latino_countE               &lt;dbl&gt; 38, 327, 376, 782, …\n$ population_hispanic_or_latino_countM               &lt;dbl&gt; 59, 298, 280, 315, …\n$ population_white_countE                            &lt;dbl&gt; 1627, 1337, 293, 18…\n$ population_white_countM                            &lt;dbl&gt; 521, 475, 191, 460,…\n$ population_black_or_african_american_countE        &lt;dbl&gt; 0, 1, 272, 26, 351,…\n$ population_black_or_african_american_countM        &lt;dbl&gt; 13, 3, 251, 38, 334…\n$ population_native_american_or_alaska_native_countE &lt;dbl&gt; 41, 0, 0, 26, 0, 0,…\n$ population_native_american_or_alaska_native_countM &lt;dbl&gt; 58, 13, 13, 42, 13,…\n$ population_asian_countE                            &lt;dbl&gt; 45, 0, 105, 58, 144…\n$ population_asian_countM                            &lt;dbl&gt; 71, 13, 116, 66, 18…\n$ population_pacific_islander_countE                 &lt;dbl&gt; 0, 98, 0, 0, 27, 13…\n$ population_pacific_islander_countM                 &lt;dbl&gt; 13, 98, 13, 13, 50,…\n$ population_other_countE                            &lt;dbl&gt; 0, 0, 39, 0, 0, 0, …\n$ population_other_countM                            &lt;dbl&gt; 13, 13, 63, 13, 13,…\n$ population_multiple_countE                         &lt;dbl&gt; 17, 118, 13, 39, 15…\n$ population_multiple_countM                         &lt;dbl&gt; 27, 125, 20, 57, 25…\n$ geometry                                           &lt;POLYGON [m]&gt; POLYGON ((-…\n\n\nNote that the dataset that’s returned includes fields corresponding to Margin of Error (MOE) for each variable we’ve requested (these are the fields that end with two digits and an M – e.g., “001M”), since, as noted above in Section 3.2 , the ACS is based on a sample of the population and reports estimated values.\n\n\n\n\n\n\nTip\n\n\n\nIt is possible to calculate MOEs for derived estimates – e.g., when aggregating groups of census units – and in many cases it may be worthwhile to do that to provide extra context to the data. However, it may not be possible (or may be difficult) to do for more complex aggregations, such as the areal interpolation shown below – more research may be needed.\nFor guidance on how calculate MOEs for some types of derived estimates, see this document.\nFor an alternative, simplified approach to estimating census demographics for target areas which includes MOEs for the derived estimates, see Section 11.1.\n\n\nBecause we won’t be incorporating those MOEs into the analysis below, we can drop them for this example, then clean up the field names.\n\n# drop MOE fields\ncensus_data_acs &lt;- census_data_acs %&gt;% \n     select(-matches('M$')) # the $ specifies \"ends with\"\n\n# clean names\nnames(census_data_acs) &lt;- names(census_data_acs) %&gt;% \n    str_remove('E$') %&gt;% # remove 'E' (estimate) from field names\n    str_replace('NAM', 'NAME') # add 'E' back to NAME field\n\nHere’s a view of the contents and structure of the revised 2022 5-year ACS dataset (only the first few fields are shown):\n\nglimpse(census_data_acs[,1:20])\n\nRows: 1,054\nColumns: 21\n$ GEOID                                             &lt;chr&gt; \"060670081451\", \"060…\n$ NAME                                              &lt;chr&gt; \"Block Group 1; Cens…\n$ population_total_count                            &lt;dbl&gt; 1768, 1881, 1098, 27…\n$ population_hispanic_or_latino_count               &lt;dbl&gt; 38, 327, 376, 782, 3…\n$ population_white_count                            &lt;dbl&gt; 1627, 1337, 293, 181…\n$ population_black_or_african_american_count        &lt;dbl&gt; 0, 1, 272, 26, 351, …\n$ population_native_american_or_alaska_native_count &lt;dbl&gt; 41, 0, 0, 26, 0, 0, …\n$ population_asian_count                            &lt;dbl&gt; 45, 0, 105, 58, 144,…\n$ population_pacific_islander_count                 &lt;dbl&gt; 0, 98, 0, 0, 27, 13,…\n$ population_other_count                            &lt;dbl&gt; 0, 0, 39, 0, 0, 0, 0…\n$ population_multiple_count                         &lt;dbl&gt; 17, 118, 13, 39, 15,…\n$ poverty_total_assessed_count                      &lt;dbl&gt; 1768, 1847, 1098, 27…\n$ poverty_below_level_count                         &lt;dbl&gt; 101, 328, 272, 116, …\n$ poverty_above_level_count                         &lt;dbl&gt; 1667, 1519, 826, 263…\n$ households_count                                  &lt;dbl&gt; 680, 718, 405, 905, …\n$ average_household_size                            &lt;dbl&gt; 2.59, 2.62, 2.71, 2.…\n$ median_household_income                           &lt;dbl&gt; 123500, 66768, 56216…\n$ households_income_below_10k_count                 &lt;dbl&gt; 18, 47, 10, 22, 6, 1…\n$ households_income_10k_15k_count                   &lt;dbl&gt; 0, 0, 24, 0, 15, 231…\n$ households_income_15k_20k_count                   &lt;dbl&gt; 0, 13, 18, 0, 51, 12…\n$ geometry                                          &lt;POLYGON [m]&gt; POLYGON ((-1…\n\n\nFor further analysis, we may want to get the statewide data as a baseline for comparison (this could also be done for other scales, like the county level). We can use a similar process to get that data and clean/format it to match the more detailed data obtained above. Note that in this case we’re also using the 5-year ACS (even though the 1-year ACS is also available at the statewide level, and would provide more up-to-date data) so that the statewide data will be directly comparable to the block group level data obtained above.\n\ncensus_data_acs_state &lt;- get_acs(geography = 'state',\n                                 state = 'CA', \n                                 year = acs_year,\n                                 survey = 'acs5',\n                                 variables = census_vars_acs, \n                                 output = 'wide', # can be 'wide' or 'tidy'\n                                 geometry = TRUE,\n                                 cache_table = TRUE) %&gt;% \n    st_transform(crs_projected) %&gt;%  # convert to common coordinate system\n    select(-matches('M$')) %&gt;%  # the $ specifies \"ends with\"\n    # clean names (note this is a little different than the way we renamed fields above, either works)\n    rename_with(.fn = ~ str_remove(., # remove 'E' (estimate) from field names\n                                    pattern = 'E$')) %&gt;% \n    rename_with(.fn = ~ str_replace(., # add 'E' back to NAME field\n                                    pattern = 'NAM', \n                                    replacement = 'NAME'))\n\n\n\n5.3 Plot Census & Supplier Data\n\nsystem_plot &lt;- 'SACRAMENTO SUBURBAN WATER DISTRICT'\n\nFigure 3 shows the 2022 5-year ACS census units that overlap with one of the water systems (Sacramento Suburban Water District) that we’ll compute demographics for below (plotting the census units that overlap all systems tends to be slow in this format).\n\n\n\n\nmapview(water_systems_sac %&gt;% \n            filter(water_system_name == system_plot), \n        zcol = 'water_system_name', \n        layer.name = 'Water System', \n        legend = FALSE) +\n    mapview(census_data_acs %&gt;% \n                st_filter(water_systems_sac %&gt;% \n                              filter(water_system_name == system_plot)), \n            alpha.regions = 0, \n            color = 'cyan', \n            lwd = 1.3, label = 'NAME',  \n            layer.name = 'ACS Data', \n            legend = FALSE) #  zcol = 'NAME'\n\n\n\n\n\n\n\nFigure 3: Water system Sacramento Suburban Water District (filled polygon) and boundaries of census units (light blue) that will be used to estimate water system demographics."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-estimate-demographics",
    "href": "example_census_race_ethnicity_calculation.html#sec-estimate-demographics",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "6 Compute Water System Demographics",
    "text": "6 Compute Water System Demographics\nNow we can perform the calculations to estimate demographic characteristics for our target areas (water system service boundaries in the Sacramento County area) from our source demographic dataset (the census data we obtained above). For this example, we’ll use the 2022 5-year ACS data that we retrieved above (which is saved in the census_data_acs variable) as our source of demographic data, and we’ll estimate the following for each water system’s service area:\n\nPopulation of each racial/ethnic group (using the racial/ethnic categories defined in the census dataset), and each racial/ethnic group’s portion of the total service area population\nSocio-economic variables like poverty rate, median household income, income distributions, and per capita income\n\nThere are multiple ways this estimation can be done. For this example, we’ll employ a three step strategy:\n\nEstimate values for count-based variables (typically referred to as ‘extensive’ data types) – e.g., total population, popultion by race/ethnicity, population above / below poverty rate, households by income bracket – for overlapping census unit, using areal interpolation. This is essentially an area weighted average, which estimates how much of each source unit’s (census unit) count applies to the target area (a given water service area), based on the portion of its area that overlaps that target area – for more information about the process, see this documentation from the areal R package. For example, for a census unit that partially overlaps a service area, only a fraction of its count for a given variable will be applied to that service area; for a census unit that completely overlaps a service area, the full count for that variable will be applied to the service area.\nThe major simplifying assumption of this approach is that the population or count-based variable of interest are evenly distributed within each unit in the source data. For example, in this case we’re assuming that population (including the total population and the population of each racial/ethic group), households of each income bracket, populations above / below the poverty rate, etc. are evenly distributed within each census block group.\n\n\n\n\n\n\n\nTip\n\n\n\nWhile this section uses the block group-level count data from the 5-year ACS, there may be cases where it could be useful or necessary to use more granular block-level population data from the decennial census to estimate population densities and distributions within larger census units, like block groups and tracts. This could especially be the case when estimating characteristics for small areas in rural environments. See Section 9 and/or Section 10 for more information.\n\n\n\nUsing the estimated count data (populations, households, etc), compute weighted values for variables that describe those populations, using the associated count data as a weighting factor (e.g., population-weighted values for population based data, or household-weighted values for household-based data) – these variables are typically referred to as ‘intensive’ data types.\n\n\n\n\n\n\n\nTip\n\n\n\nAlthough it’s possible to use areal interpolation to aggregate these variables as well, the multi-step approach described here can be useful because we know (from the population / household count data) that population densities differ between census units. Since we have a reasonable estimate of the count data (population, households, etc) within each census unit, using a population or household weighted average likely will yield more accurate results than a simple area-weighted average for these variables. For example, for per capita income, we can use the estimated population counts to produce a population weighted average per capita income (rather than an area weighted average per capita income, which is likely less meaningful as it over-weights large census areas with lower population densities). Areal interpolation may be more useful for cases where we generally have no other information about how density varies between the source polygons (unless significantly more effort is invested, such as looking at aerial imagery data)\n\n\n\nAggregate interpolated values at the water system level.\n\n\n6.1 Prepare Census Data\nNote that we already transformed the 2022 5-year ACS dataset into the common projected coordinate reference system used for this example immediately after we downloaded the data using the get_acs() function (see Listing 3). This allows us to work with the water system data and the census data together in a common coordinate system.\nBefore calculating demographics for the target areas, we can do a bit of additional transformation to prepare the census data if needed. For example, we can combine the ‘other’ and ‘multiple’ racial/ethnic groupings into one ‘other or multiple’ racial/ethnic group.\n\n## combine other and multiple\ncensus_data_acs &lt;- census_data_acs %&gt;% \n    mutate('population_other_or_multiple_count' = population_other_count + population_multiple_count, \n           .after = population_pacific_islander_count) %&gt;% \n    select(-c(population_other_count, population_multiple_count))\n\nWe can also calculate the poverty rate for each census unit (which may be useful for presenting results later).\n\ncensus_data_acs &lt;- census_data_acs %&gt;% \n    mutate(poverty_rate_pct_calc_census_unit = case_when(\n        poverty_total_assessed_count == 0 ~ 0,\n        .default = 100 * poverty_below_level_count / poverty_total_assessed_count\n    ), \n    .after = poverty_above_level_count)\n\n\n# We can also drop census units with zero population, since they won't contribute anything to our calculations.\n\n## drop census units with zero population\n# census_data_acs &lt;- census_data_acs %&gt;% \n#     filter(population_total &gt; 0)\n\n\n\n6.2 Interpolation Step 1: Areal Interpolation (for Count Variables)\nThere are a couple of ways to implement the areal interpolation method. The example below ‘manually’ implements the process using functions from the sf package, for reasons described below. However, note that there are R packages which make it possible to perform areal interpolation with a single function - for example, the sf package’s st_interpolate_aw function and the areal package’s aw_interpolate function. This example uses a more ‘manual’ approach because this makes it possible to use the multi-step process described above, and also produces useful intermediate calculated data for mapping and visualization. However, we can use the single-function approach to double check our implementation of the areal interpolation approach for the count data (see Section 6.4.2).\nFirst, we clip the census data to the water system boundaries:\n\ncensus_data_clip &lt;- census_data_acs %&gt;% \n    mutate(census_unit_area = st_area(.)) %&gt;% \n    st_intersection(water_systems_sac) %&gt;% \n    mutate(clipped_area = st_area(.)) %&gt;% \n    mutate(areal_weight_factor = drop_units(clipped_area / census_unit_area))\n\nFigure 4 shows a plot of the census units clipped to the Sacramento Suburban Water District water system, along with the original/complete census units. Note that you can toggle layers on and off (and change their order of appearance) using the layers button in the upper left part of the map (below the zoom buttons).\n\n\n\n\nmapview(water_systems_sac %&gt;% \n            filter(water_system_name == system_plot), \n        zcol = 'water_system_name', \n        layer.name = 'Water System', \n        legend = FALSE) + \n    mapview(census_data_acs %&gt;% \n                st_filter(water_systems_sac %&gt;% \n                              filter(water_system_name == system_plot)), \n            alpha.regions = 0.15, \n            col.regions = 'grey', \n            color = 'black', \n            lwd = 1, \n            label = 'NAME',  \n            layer.name = 'ACS Data Full', \n            legend = FALSE) +\n    mapview(census_data_clip %&gt;% \n                filter(water_system_name == system_plot),\n            alpha.regions = 0, \n            color = 'cyan', \n            lwd = 1.3, \n            label = 'NAME',  \n            layer.name = 'ACS Data Clipped', \n            legend = FALSE)\n\n\n\n\n\n\n\nFigure 4: Water system Sacramento Suburban Water District (filled polygon), boundaries of overalpping census units (grey), and clipped portions of census units (light blue) that will be used to estimate water system demographics.\n\n\n\nNext, we can compute the area-weighted counts for the portions of census units that overlap each water system boundary:\n\ncensus_data_interpolate &lt;- census_data_clip %&gt;% \n    mutate(\n        across(\n            .cols = ends_with('_count'),\n            .fns = ~ .x * areal_weight_factor\n        )) \n\nAs noted above, it’s also possible to use pre-built functions from several R packages to perform areal interpolation in a single step. Since we’re using a three-step process, which also implements population weighted averaging for some variables, we’re not using those functions directly in this example. However, they can be a useful check to validate our computed count data, but only after we aggregate our data at the system level – see Section 6.4.2 for more details.\n\n\n6.3 Interpolation Step 2: Compute Population Weighted Values (Intensive Variables)\nCompute population weighted values\n\ncensus_data_interpolate &lt;- census_data_interpolate %&gt;% \n    mutate(average_household_size_weighted = average_household_size * households_count,\n           median_household_income_weighted = median_household_income * households_count,\n           per_capita_income_weighted = per_capita_income * population_total_count)\n\n\n\n\n\n\n\nCaution\n\n\n\nTo calculate an aggregated value for a variable like median household income, which depends on the distribution of the underling data, it may be worth considering whether a weighed average value is an appropriate measure. In some cases, it may be more appropriate to use the counts in each income bracket to estimate a median income, and/or present the income distribution rather than a single value.\nFor a discussion of the problem and a proposed solution, see this document.\n\n\n\n\n6.4 Interpolation Step 3: Aggregate by Water System\nNext, we need to combine the weighted values calculated above to produce the estimates for each water system, and can also use those combined values to compute some additional metrics for each system (like rates, income distributions, etc.).\n\n6.4.1 Combine Results by Water System\nFirst, combine the results by summing all of the count-based variables (derived from areal interpolation), and calculating weighted averages for all variables computed in step 2 above. Note that we have to first calculate the denominator for each variable calculated with population weighted interpolation, because some of those variables contain missing values for records where the denominator is present (and if we don’t remove the missing values, we get an NA for any water system that contains a block group with a missing value for that variable). For example, there are block groups where the median household income is missing, but the total household count is available for that block group – in that case, the weighted average should not include the households in that block group in the denominator; otherwise, the true value will be underestimated.\n\nwater_system_demographics &lt;- census_data_interpolate %&gt;% \n    group_by(water_system_name) %&gt;% \n    mutate(\n        average_household_size_denominator = if_else(is.na(average_household_size), 0, households_count),\n        median_household_income_denominator = if_else(is.na(median_household_income), 0, households_count),\n        per_capita_income_denominator = if_else(is.na(per_capita_income), 0, population_total_count)\n    ) %&gt;% \n    summarize(\n        across(\n            .cols = ends_with('_count'),\n            .fns = ~ sum(.x)\n        ),\n        average_household_size_hh_weighted = \n            sum(average_household_size_weighted, na.rm = TRUE) / \n            sum(average_household_size_denominator),\n        median_household_income_hh_weighted = \n            sum(median_household_income_weighted, na.rm = TRUE) /\n            sum(median_household_income_denominator),\n        per_capita_income_pop_weighted = \n            sum(per_capita_income_weighted, na.rm = TRUE) / \n            sum(per_capita_income_denominator)\n    ) %&gt;% \n    ungroup()\n\n\n\n6.4.2 Check - Count Variables Estimated with Areal Interpolation\nAs noted above, it’s also possible to use pre-built functions for areal interpolation. This section demonstrates those functions and uses them as a check of our computed count data.\nFrom the sf package, we can use the st_interpolate_aw function:\n\n# NOTE: it's only necessary to check the estimated values for one variable - \n# this just checks the total estimated population\n\n# sf package\ncheck_sf &lt;- st_interpolate_aw(x = census_data_acs %&gt;% \n                                  select(population_total_count),\n                       to = water_systems_sac,\n                       extensive = TRUE) %&gt;% \n    bind_cols(water_systems_sac %&gt;% st_drop_geometry)\n\n# check - should be TRUE if results are equivalent\nall(check_sf %&gt;% \n        arrange(water_system_name) %&gt;% \n        pull(population_total_count) %&gt;% \n        round(5) ==\n    water_system_demographics %&gt;% \n        arrange(water_system_name) %&gt;% \n        pull(population_total_count) %&gt;% \n        round(5)\n)\n\n[1] TRUE\n\n\nFrom the areal package, we can use the aw_interpolate function. Note that there are some settings that you may need to modify in the aw_interpolate function depending on the type of analysis you’re doing. In particular, for more information about the weight argument – which can be either sum or total – see this section of the documentation. For more information about extensive versus intensive interpolations, see this section of the documenation (as noted above, the method applied here avoids using areal interpolation to calculate intensive variables, because area may not be a good metric for determining how to weight those variables, considering that we can estimate associated counts for populations/households/etc.).\n\n# NOTE: it's only necessary to check the estimated values for one variable - \n# this just checks the total estimated population\n\n# areal package\ncheck_areal &lt;- aw_interpolate(water_systems_sac,\n                              tid = water_system_name,\n                              source = census_data_acs,\n                              sid = GEOID,\n                              weight = 'total',\n                              extensive = c('population_total_count'))\n\n# check - should be TRUE if results are equivalent\nall(check_areal %&gt;% \n        arrange(water_system_name) %&gt;% \n        pull(population_total_count) %&gt;% \n        round(5) ==\n    water_system_demographics %&gt;% \n        arrange(water_system_name) %&gt;% \n        pull(population_total_count) %&gt;% \n        round(5)\n)\n\n[1] TRUE\n\n\n\n\n6.4.3 Clean & Format Summarized Water System Demographic Data\nWe could stop here, and save the dataset containing the results to an output file (done below - see Section 6.5). But, it may be useful to do some additional computations and re-formatting before saving the dataset. For example, in this case it may be useful to calculate the racial/ethnic breakdown of each system’s population as percentages of the total population (in addition to the total counts computed above), and calculate other rates / distributions.\nFirst we can add fields with each racial/ethnic group’s estimated percent of the total population within each water system’s service area:\n\nwater_system_demographics &lt;- water_system_demographics %&gt;%\n    mutate(\n        across(\n            .cols = starts_with('population_'),\n            .fns = ~ round(.x / population_total_count * 100, 2),\n            .names = \"{str_replace(.col, '_count', '_percent')}\"\n        ),\n        .after = population_other_or_multiple_count) %&gt;% \n    select(-population_total_percent) # this always equals 1, not needed\n\nWe can also calculate the estimated poverty rate for each water system’s service area.\n\nwater_system_demographics &lt;- water_system_demographics %&gt;% \n    mutate(poverty_rate_percent = case_when(\n        poverty_total_assessed_count == 0 ~ 0,\n        .default = 100 * poverty_below_level_count / poverty_total_assessed_count\n    ), \n    .after = poverty_above_level_count)\n\nAnd compute income brackets in 25k increments:\n\nwater_system_demographics &lt;- water_system_demographics %&gt;% \n    mutate(households_income_0_25k_count = \n               households_income_below_10k_count + \n               households_income_10k_15k_count + \n               households_income_15k_20k_count +\n               households_income_20k_25k_count,\n           households_income_25k_50k_count =\n               households_income_25k_30k_count + \n               households_income_30k_35k_count +\n               households_income_35k_40k_count +\n               households_income_40k_45k_count +\n               households_income_45k_50k_count,\n           households_income_50k_75k_count =\n               households_income_50k_60k_count +\n               households_income_60k_75k_count,\n           .after = households_income_above_200k_count\n    ) # note - above 75k is already in 25k increments\n\nAnd compute income brackets in 50k increments:\n\nwater_system_demographics &lt;- water_system_demographics %&gt;% \n    mutate(households_income_0_50k_count = \n               households_income_0_25k_count + \n               households_income_25k_50k_count,\n           households_income_50k_100k_count =\n               households_income_50k_75k_count +\n               households_income_75k_100k_count,\n           households_income_100k_150k_count =\n               households_income_100k_125k_count +\n               households_income_125k_150k_count,\n           .after = households_income_50k_75k_count\n    ) # above 150k is already in 50k increments\n\nAnd compute grouped median household income:\nAnd compute # and % of households below income thresholds:\nAnd, compute the portion of households paying more than 30% / 50% of their income toward housing costs:\n\n# portion of households paying more than 30% / 50% of income on housing\nwater_system_demographics &lt;- water_system_demographics %&gt;%\n    mutate(households_all_housing_costs_over30pct_percent = \n               100 * (households_mortgage_housing_costs_over30pct_count + \n                          households_no_mortgage_housing_costs_over30pct_count +\n                          households_rent_housing_costs_over30pct_count) / \n               households_count, \n           .after = households_rent_housing_costs_over50pct_count) %&gt;% \n    mutate(households_all_housing_costs_over50pct_percent = \n               100 * (households_mortgage_housing_costs_over50pct_count + \n                          households_no_mortgage_housing_costs_over50pct_count +\n                          households_rent_housing_costs_over50pct_count) / \n               households_count,\n           .after = households_all_housing_costs_over30pct_percent)\n\nFinally, we can round the estimated values to appropriate levels of precision:\n\nwater_system_demographics &lt;- water_system_demographics %&gt;%\n    mutate(\n        across(\n            .cols = ends_with('_count'),\n            .fns = ~ round(.x, 0)\n        ))  %&gt;%\n    mutate(\n        across(\n            .cols = ends_with('_percent'),\n            .fns = ~ round(.x, 2)\n        ))\n\nWe now have a dataset with the selected metrics from the census data (source data) estimated for each of the water system service areas (target geographic features). Here’s a view of the contents and structure of the re-formatted dataset (only the first few fields are shown):\n\nglimpse(water_system_demographics[,1:20])\n\nRows: 62\nColumns: 21\n$ water_system_name                                   &lt;chr&gt; \"B & W RESORT MARI…\n$ population_total_count                              &lt;dbl&gt; 0, 22603, 33120, 1…\n$ population_hispanic_or_latino_count                 &lt;dbl&gt; 0, 10939, 5245, 34…\n$ population_white_count                              &lt;dbl&gt; 0, 3504, 19456, 23…\n$ population_black_or_african_american_count          &lt;dbl&gt; 0, 2663, 3199, 197…\n$ population_native_american_or_alaska_native_count   &lt;dbl&gt; 0, 121, 113, 70, 0…\n$ population_asian_count                              &lt;dbl&gt; 0, 4075, 2947, 108…\n$ population_pacific_islander_count                   &lt;dbl&gt; 0, 240, 77, 59, 0,…\n$ population_other_or_multiple_count                  &lt;dbl&gt; 0, 1060, 2082, 110…\n$ population_hispanic_or_latino_percent               &lt;dbl&gt; 41.43, 48.40, 15.8…\n$ population_white_percent                            &lt;dbl&gt; 52.47, 15.50, 58.7…\n$ population_black_or_african_american_percent        &lt;dbl&gt; 0.00, 11.78, 9.66,…\n$ population_native_american_or_alaska_native_percent &lt;dbl&gt; 0.00, 0.54, 0.34, …\n$ population_asian_percent                            &lt;dbl&gt; 4.55, 18.03, 8.90,…\n$ population_pacific_islander_percent                 &lt;dbl&gt; 0.00, 1.06, 0.23, …\n$ population_other_or_multiple_percent                &lt;dbl&gt; 1.56, 4.69, 6.29, …\n$ poverty_total_assessed_count                        &lt;dbl&gt; 0, 22556, 33034, 1…\n$ poverty_below_level_count                           &lt;dbl&gt; 0, 6010, 3389, 313…\n$ poverty_above_level_count                           &lt;dbl&gt; 0, 16546, 29645, 6…\n$ poverty_rate_percent                                &lt;dbl&gt; 22.60, 26.64, 10.2…\n$ geometry                                            &lt;POLYGON [m]&gt; POLYGON ((…\n\n\nTable 1 provides a complete view of the cleaned and re-formatted dataset. These results are saved locally in tabular and spatial format in Section 6.5.\n\nwater_system_demographics %&gt;%\n    kable(caption = 'A Caption') %&gt;%\n    scroll_box(height = \"400px\")\n\n\n\nTable 1: Water System Demographics\n\n\n\n\n\n\nA Caption\n\n\nwater_system_name\npopulation_total_count\npopulation_hispanic_or_latino_count\npopulation_white_count\npopulation_black_or_african_american_count\npopulation_native_american_or_alaska_native_count\npopulation_asian_count\npopulation_pacific_islander_count\npopulation_other_or_multiple_count\npopulation_hispanic_or_latino_percent\npopulation_white_percent\npopulation_black_or_african_american_percent\npopulation_native_american_or_alaska_native_percent\npopulation_asian_percent\npopulation_pacific_islander_percent\npopulation_other_or_multiple_percent\npoverty_total_assessed_count\npoverty_below_level_count\npoverty_above_level_count\npoverty_rate_percent\nhouseholds_count\nhouseholds_income_below_10k_count\nhouseholds_income_10k_15k_count\nhouseholds_income_15k_20k_count\nhouseholds_income_20k_25k_count\nhouseholds_income_25k_30k_count\nhouseholds_income_30k_35k_count\nhouseholds_income_35k_40k_count\nhouseholds_income_40k_45k_count\nhouseholds_income_45k_50k_count\nhouseholds_income_50k_60k_count\nhouseholds_income_60k_75k_count\nhouseholds_income_75k_100k_count\nhouseholds_income_100k_125k_count\nhouseholds_income_125k_150k_count\nhouseholds_income_150k_200k_count\nhouseholds_income_above_200k_count\nhouseholds_income_0_25k_count\nhouseholds_income_25k_50k_count\nhouseholds_income_50k_75k_count\nhouseholds_income_0_50k_count\nhouseholds_income_50k_100k_count\nhouseholds_income_100k_150k_count\nhouseholds_mortgage_total_count\nhouseholds_mortgage_housing_costs_over30pct_count\nhouseholds_mortgage_housing_costs_over50pct_count\nhouseholds_no_mortgage_total_count\nhouseholds_no_mortgage_housing_costs_over30pct_count\nhouseholds_no_mortgage_housing_costs_over50pct_count\nhouseholds_rent_total_count\nhouseholds_rent_housing_costs_over30pct_count\nhouseholds_rent_housing_costs_over50pct_count\nhouseholds_all_housing_costs_over30pct_percent\nhouseholds_all_housing_costs_over50pct_percent\naverage_household_size_hh_weighted\nmedian_household_income_hh_weighted\nper_capita_income_pop_weighted\ngeometry\n\n\n\n\nB & W RESORT MARINA\n0\n0\n0\n0\n0\n0\n0\n0\n41.43\n52.47\n0.00\n0.00\n4.55\n0.00\n1.56\n0\n0\n0\n22.60\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n40.53\n21.84\n2.030000\n51977.00\n40522.00\nPOLYGON ((-138282.2 13643.2...\n\n\nCAL AM FRUITRIDGE VISTA\n22603\n10939\n3504\n2663\n121\n4075\n240\n1060\n48.40\n15.50\n11.78\n0.54\n18.03\n1.06\n4.69\n22556\n6010\n16546\n26.64\n6900\n354\n339\n521\n263\n367\n302\n359\n355\n565\n692\n876\n784\n459\n235\n287\n141\n1477\n1948\n1569\n3425\n2352\n694\n1620\n745\n345\n1236\n95\n58\n4044\n2131\n1059\n43.06\n21.18\n3.257806\n53040.44\n20519.57\nPOLYGON ((-127001.4 54266.8...\n\n\nCALAM - ANTELOPE\n33120\n5245\n19456\n3199\n113\n2947\n77\n2082\n15.84\n58.74\n9.66\n0.34\n8.90\n0.23\n6.29\n33034\n3389\n29645\n10.26\n10529\n315\n184\n101\n122\n116\n469\n248\n368\n449\n737\n1077\n1669\n1501\n1077\n1158\n937\n723\n1650\n1814\n2373\n3483\n2578\n5544\n1861\n621\n1747\n184\n106\n3238\n1678\n649\n35.36\n13.07\n3.134530\n93741.55\n34660.44\nPOLYGON ((-120906.3 77326.5...\n\n\nCALAM - ARDEN\n10112\n3433\n2392\n1977\n70\n1082\n59\n1100\n33.95\n23.65\n19.55\n0.69\n10.70\n0.58\n10.87\n10034\n3130\n6904\n31.19\n3823\n201\n259\n239\n167\n319\n190\n142\n236\n207\n440\n394\n535\n228\n148\n62\n58\n866\n1093\n834\n1959\n1368\n376\n265\n84\n46\n133\n8\n3\n3426\n2124\n1170\n57.97\n31.87\n2.623643\n49624.62\n22770.82\nPOLYGON ((-123052 64046.06,...\n\n\nCALAM - ISLETON\n34\n14\n17\n0\n0\n2\n0\n1\n42.06\n51.14\n0.00\n0.00\n4.55\n0.00\n2.25\n34\n7\n27\n20.89\n16\n1\n1\n0\n1\n1\n0\n1\n1\n0\n2\n1\n1\n3\n1\n0\n1\n4\n3\n3\n6\n4\n4\n6\n4\n1\n7\n2\n2\n4\n1\n1\n39.45\n20.68\n2.078994\n57361.76\n40672.21\nPOLYGON ((-138730.9 17272.8...\n\n\nCALAM - LINCOLN OAKS\n42916\n9056\n26529\n1486\n143\n2706\n288\n2708\n21.10\n61.82\n3.46\n0.33\n6.31\n0.67\n6.31\n42823\n4074\n38749\n9.51\n15621\n740\n375\n308\n622\n488\n616\n585\n629\n645\n1035\n1641\n2442\n1889\n1272\n1555\n778\n2046\n2964\n2675\n5010\n5118\n3161\n7390\n2671\n919\n3332\n503\n298\n4900\n2523\n1302\n36.46\n16.13\n2.730281\n82035.52\n33728.94\nPOLYGON ((-117495.2 73240.4...\n\n\nCALAM - PARKWAY\n58635\n18665\n8921\n6965\n21\n19228\n1386\n3449\n31.83\n15.21\n11.88\n0.04\n32.79\n2.36\n5.88\n58434\n9804\n48630\n16.78\n17667\n1081\n753\n514\n713\n694\n640\n713\n700\n727\n1145\n1918\n2490\n1634\n1532\n1546\n865\n3061\n3475\n3064\n6536\n5554\n3166\n7163\n2719\n1049\n3418\n647\n383\n7086\n3517\n1917\n38.96\n18.96\n3.284608\n72938.51\n26938.14\nPOLYGON ((-124522.5 52428.5...\n\n\nCALAM - SUBURBAN ROSEMONT\n57897\n13791\n25062\n7725\n91\n6905\n380\n3942\n23.82\n43.29\n13.34\n0.16\n11.93\n0.66\n6.81\n57661\n8374\n49287\n14.52\n21045\n1156\n612\n472\n744\n653\n568\n582\n874\n628\n1289\n2508\n3438\n2595\n1594\n1671\n1661\n2985\n3305\n3797\n6290\n7235\n4189\n8262\n2262\n730\n3425\n439\n271\n9358\n4521\n2320\n34.31\n15.78\n2.726937\n81229.87\n34497.37\nPOLYGON ((-119360.4 58937.6...\n\n\nCALAM - WALNUT GROVE\n12\n5\n5\n0\n0\n1\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n12\n2\n10\n15.75\n5\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n0\n0\n1\n1\n1\n2\n2\n2\n0\n2\n0\n0\n1\n0\n0\n2\n1\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-131705.3 26403.6...\n\n\nCALIFORNIA STATE FAIR\n532\n78\n262\n91\n0\n48\n0\n52\n14.68\n49.25\n17.13\n0.00\n9.10\n0.00\n9.85\n526\n152\n374\n28.89\n285\n65\n13\n8\n5\n9\n14\n2\n0\n23\n29\n30\n35\n21\n11\n17\n3\n91\n48\n59\n140\n93\n32\n0\n0\n0\n0\n0\n0\n285\n177\n95\n62.11\n33.45\n1.820000\n52886.00\n33141.00\nPOLYGON ((-125611.2 65287.3...\n\n\nCARMICHAEL WATER DISTRICT\n39253\n6192\n25026\n2230\n68\n3326\n295\n2116\n15.78\n63.76\n5.68\n0.17\n8.47\n0.75\n5.39\n38700\n5000\n33700\n12.92\n15937\n570\n534\n513\n472\n398\n607\n522\n684\n541\n996\n1595\n1782\n1724\n1200\n1678\n2122\n2088\n2751\n2591\n4839\n4373\n2924\n5256\n1399\n669\n3147\n358\n177\n7534\n4056\n2068\n36.48\n18.29\n2.405914\n96967.64\n46901.80\nPOLYGON ((-117711 65208.06,...\n\n\nCITRUS HEIGHTS WATER DISTRICT\n68912\n12380\n48148\n2092\n162\n2875\n71\n3186\n17.96\n69.87\n3.04\n0.23\n4.17\n0.10\n4.62\n68581\n6961\n61620\n10.15\n25633\n1012\n569\n446\n769\n665\n867\n841\n723\n1165\n1875\n3057\n3954\n2744\n2332\n2533\n2080\n2796\n4261\n4932\n7057\n8886\n5075\n10344\n3553\n1380\n4293\n554\n286\n10996\n5759\n2620\n38.49\n16.72\n2.653808\n82960.78\n37323.17\nPOLYGON ((-114405.5 72735.6...\n\n\nCITY OF SACRAMENTO MAIN\n516189\n151211\n159508\n62060\n1249\n98585\n9242\n34334\n29.29\n30.90\n12.02\n0.24\n19.10\n1.79\n6.65\n508800\n77003\n431797\n15.13\n194000\n9540\n9401\n6217\n6407\n5804\n6255\n6278\n6139\n6729\n13349\n17396\n26982\n20453\n15080\n17439\n20531\n31564\n31205\n30745\n62769\n57728\n35533\n67435\n21769\n8217\n29857\n3476\n1805\n96708\n47510\n24524\n37.50\n17.81\n2.609594\n84694.02\n39105.61\nPOLYGON ((-133314 51929.51,...\n\n\nDEL PASO MANOR COUNTY WATER DI\n5592\n687\n3967\n390\n15\n119\n31\n382\n12.28\n70.95\n6.97\n0.26\n2.13\n0.56\n6.84\n5592\n621\n4971\n11.10\n2222\n170\n45\n54\n66\n21\n51\n66\n237\n40\n158\n278\n166\n171\n120\n347\n231\n336\n416\n436\n752\n601\n291\n922\n326\n189\n572\n112\n68\n729\n509\n114\n42.59\n16.67\n2.516895\n90374.38\n40254.83\nPOLYGON ((-120068.3 65980.9...\n\n\nDELTA CROSSING MHP\n0\n0\n0\n0\n0\n0\n0\n0\n69.19\n28.71\n0.00\n0.00\n0.00\n0.00\n2.10\n0\n0\n0\n17.42\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n45.66\n25.57\n2.550000\n56250.00\n23510.00\nPOLYGON ((-132498.4 40410.2...\n\n\nEAST WALNUT GROVE [SWS]\n3\n2\n2\n0\n0\n0\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n3\n1\n3\n15.75\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-132506.3 25966.4...\n\n\nEDGEWATER MOBILE HOME PARK\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-153562.3 7972.28...\n\n\nEL DORADO MOBILE HOME PARK\n139\n84\n11\n15\n0\n19\n0\n11\n60.26\n7.80\n10.48\n0.00\n13.27\n0.00\n8.19\n139\n60\n79\n43.12\n48\n6\n10\n0\n4\n6\n1\n0\n8\n1\n7\n0\n1\n0\n4\n0\n1\n19\n15\n8\n34\n9\n4\n3\n0\n0\n10\n5\n5\n35\n17\n10\n46.70\n31.09\n2.710000\n29468.00\n17394.00\nPOLYGON ((-124341.2 53660.1...\n\n\nEL DORADO WEST MHP\n148\n89\n12\n16\n0\n20\n0\n12\n60.26\n7.80\n10.48\n0.00\n13.27\n0.00\n8.19\n147\n63\n84\n43.12\n51\n6\n10\n0\n4\n6\n1\n0\n8\n2\n8\n0\n1\n0\n5\n0\n1\n20\n16\n8\n37\n9\n5\n3\n0\n0\n10\n6\n6\n38\n18\n10\n46.70\n31.09\n2.710000\n29468.00\n17394.00\nPOLYGON ((-124532.3 53662.9...\n\n\nELEVEN OAKS MOBILE HOME COMMUNITY\n233\n45\n94\n56\n0\n37\n0\n1\n19.27\n40.19\n24.01\n0.00\n15.91\n0.00\n0.62\n233\n87\n146\n37.48\n71\n7\n2\n3\n6\n10\n2\n1\n1\n3\n1\n13\n17\n3\n0\n3\n0\n17\n17\n15\n34\n32\n3\n8\n3\n1\n21\n1\n1\n42\n29\n23\n46.85\n35.36\n3.280000\n60521.00\n18213.00\nPOLYGON ((-119819.8 71950.9...\n\n\nELK GROVE WATER SERVICE\n42647\n7656\n19550\n3209\n70\n8939\n388\n2835\n17.95\n45.84\n7.53\n0.16\n20.96\n0.91\n6.65\n42258\n3264\n38994\n7.72\n13239\n430\n202\n253\n224\n328\n102\n345\n292\n245\n667\n1117\n1441\n1470\n1386\n1907\n2832\n1108\n1311\n1784\n2420\n3225\n2856\n7552\n1903\n628\n2861\n283\n113\n2826\n1595\n864\n28.55\n12.12\n3.179068\n122771.00\n43429.03\nPOLYGON ((-118730.1 42496.7...\n\n\nFAIR OAKS WATER DISTRICT\n36003\n4655\n27050\n708\n94\n1372\n12\n2113\n12.93\n75.13\n1.97\n0.26\n3.81\n0.03\n5.87\n35775\n2852\n32923\n7.97\n14233\n546\n332\n113\n229\n208\n391\n206\n469\n293\n804\n1064\n2214\n1447\n1568\n1875\n2474\n1220\n1568\n1868\n2788\n4082\n3016\n7090\n1872\n845\n3092\n261\n108\n4051\n1844\n768\n27.94\n12.09\n2.480217\n107985.74\n54435.01\nPOLYGON ((-112317.5 69577.6...\n\n\nFLORIN COUNTY WATER DISTRICT\n9951\n2963\n1548\n1394\n7\n2743\n866\n430\n29.78\n15.56\n14.01\n0.07\n27.56\n8.70\n4.32\n9835\n1285\n8550\n13.06\n2755\n84\n125\n53\n154\n103\n46\n86\n176\n224\n258\n223\n432\n297\n215\n143\n137\n417\n635\n481\n1051\n913\n512\n981\n426\n90\n675\n49\n28\n1100\n476\n260\n34.48\n13.70\n3.573005\n67048.12\n24517.64\nPOLYGON ((-122791.9 52602.2...\n\n\nFOLSOM STATE PRISON\n3536\n1257\n652\n1390\n57\n70\n34\n77\n35.55\n18.43\n39.31\n1.60\n1.97\n0.96\n2.17\n29\n1\n28\n2.20\n23\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4\n4\n12\n1\n0\n0\n0\n0\n1\n8\n3\n1\n0\n0\n0\n0\n19\n0\n0\n4.67\n0.53\n2.726311\n161047.22\n2271.22\nPOLYGON ((-99838.11 75350.0...\n\n\nFOLSOM, CITY OF - ASHLAND\n3845\n318\n2934\n43\n1\n125\n1\n423\n8.26\n76.32\n1.12\n0.03\n3.26\n0.02\n10.99\n3780\n143\n3637\n3.79\n1800\n44\n17\n104\n43\n34\n209\n103\n74\n43\n43\n158\n248\n132\n80\n123\n345\n208\n463\n201\n670\n449\n212\n594\n164\n90\n847\n368\n82\n358\n196\n74\n40.42\n13.70\n2.087286\n76810.17\n56773.97\nPOLYGON ((-102605.9 74922.1...\n\n\nFOLSOM, CITY OF - MAIN\n62462\n8433\n35222\n1693\n105\n12934\n177\n3897\n13.50\n56.39\n2.71\n0.17\n20.71\n0.28\n6.24\n62115\n3405\n58710\n5.48\n22409\n807\n218\n390\n477\n418\n283\n329\n373\n451\n670\n1181\n2255\n2382\n1747\n4083\n6344\n1892\n1855\n1851\n3747\n4106\n4129\n11491\n2728\n1179\n3590\n237\n146\n7328\n3010\n1321\n26.66\n11.81\n2.769356\n141856.37\n58469.35\nPOLYGON ((-101870.6 66094.5...\n\n\nFREEPORT MARINA\n3\n2\n1\n0\n0\n0\n0\n0\n69.19\n28.71\n0.00\n0.00\n0.00\n0.00\n2.10\n3\n1\n3\n17.42\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n45.66\n25.57\n2.550000\n56250.00\n23510.00\nPOLYGON ((-130970.7 50553.3...\n\n\nGALT, CITY OF\n21490\n9314\n9952\n520\n22\n872\n20\n789\n43.34\n46.31\n2.42\n0.10\n4.06\n0.09\n3.67\n21341\n1404\n19937\n6.58\n6988\n139\n168\n243\n210\n141\n342\n161\n347\n152\n550\n687\n807\n1096\n504\n789\n650\n761\n1143\n1237\n1904\n2044\n1601\n3724\n907\n523\n1454\n109\n44\n1809\n906\n414\n27.52\n14.05\n3.048249\n90632.93\n33685.54\nMULTIPOLYGON (((-113921.6 2...\n\n\nGOLDEN STATE WATER CO - ARDEN WATER SERV\n6556\n1706\n2887\n322\n0\n888\n11\n742\n26.02\n44.04\n4.91\n0.00\n13.54\n0.16\n11.32\n6453\n1626\n4828\n25.19\n2173\n19\n82\n19\n141\n53\n173\n34\n179\n37\n139\n351\n319\n132\n172\n141\n183\n262\n476\n490\n738\n809\n303\n728\n239\n123\n131\n0\n0\n1315\n599\n335\n38.56\n21.09\n2.897716\n66579.36\n30417.36\nPOLYGON ((-121143.9 63698.4...\n\n\nGOLDEN STATE WATER CO. - CORDOVA\n48115\n9009\n26042\n3982\n229\n6050\n188\n2615\n18.72\n54.13\n8.28\n0.48\n12.57\n0.39\n5.43\n47835\n4408\n43427\n9.21\n18022\n509\n482\n310\n496\n480\n437\n389\n469\n598\n1276\n1692\n2653\n2565\n1671\n1948\n2047\n1796\n2374\n2968\n4170\n5621\n4236\n7380\n2174\n836\n3506\n364\n201\n7137\n2744\n1410\n29.31\n13.58\n2.650717\n96697.06\n42695.41\nPOLYGON ((-112985.4 62375.3...\n\n\nHAPPY HARBOR (SWS)\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-139842 11256.85,...\n\n\nHOLIDAY MOBILE VILLAGE\n46\n18\n7\n3\n0\n15\n0\n3\n38.66\n15.12\n7.10\n0.00\n32.49\n0.00\n6.64\n46\n10\n36\n22.33\n16\n2\n1\n0\n1\n0\n1\n5\n1\n0\n0\n2\n2\n1\n0\n0\n0\n4\n7\n2\n11\n4\n1\n2\n0\n0\n2\n1\n1\n12\n6\n4\n44.88\n28.55\n2.860000\n38491.00\n16707.00\nPOLYGON ((-123874.7 52485.3...\n\n\nHOOD WATER MAINTENCE DIST [SWS]\n1\n1\n0\n0\n0\n0\n0\n0\n69.19\n28.71\n0.00\n0.00\n0.00\n0.00\n2.10\n1\n0\n1\n17.42\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n45.66\n25.57\n2.550000\n56250.00\n23510.00\nMULTIPOLYGON (((-132506 403...\n\n\nIMPERIAL MANOR MOBILEHOME COMMUNITY\n209\n52\n129\n1\n0\n6\n0\n21\n24.93\n61.63\n0.45\n0.00\n2.93\n0.00\n10.05\n209\n45\n164\n21.48\n124\n4\n26\n18\n3\n0\n16\n7\n5\n6\n1\n4\n29\n0\n0\n0\n6\n51\n34\n5\n84\n34\n0\n9\n0\n0\n89\n37\n34\n27\n27\n22\n50.97\n45.07\n1.680363\n31831.84\n32878.17\nPOLYGON ((-115390.2 74250.3...\n\n\nKORTHS PIRATES LAIR\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-137314.9 10213.1...\n\n\nLAGUNA DEL SOL INC\n24\n5\n18\n0\n0\n0\n0\n0\n21.55\n75.20\n0.00\n0.67\n1.46\n0.00\n1.12\n24\n2\n22\n6.40\n9\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n2\n0\n0\n1\n2\n2\n1\n0\n3\n2\n1\n5\n2\n2\n3\n0\n0\n2\n0\n0\n23.37\n23.37\n2.640000\n95227.00\n50793.00\nPOLYGON ((-104662.2 49197.3...\n\n\nLAGUNA VILLAGE RV PARK\n20\n3\n2\n1\n0\n11\n2\n2\n12.79\n8.48\n7.28\n0.00\n52.62\n8.38\n10.45\n20\n2\n18\n11.79\n7\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n1\n1\n1\n1\n1\n1\n2\n2\n1\n3\n1\n0\n1\n0\n0\n3\n1\n0\n32.52\n12.26\n3.030000\n84332.00\n32668.00\nPOLYGON ((-122461.8 48066.6...\n\n\nLINCOLN CHAN-HOME RANCH\n4\n2\n2\n0\n0\n0\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n4\n1\n3\n15.75\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n0\n1\n0\n0\n0\n0\n0\n1\n0\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-136788.6 36526.1...\n\n\nLOCKE WATER WORKS CO [SWS]\n1\n0\n0\n0\n0\n0\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n1\n0\n1\n15.75\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-131952.8 27176.6...\n\n\nMAGNOLIA MUTUAL WATER\n1\n0\n0\n0\n0\n0\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n1\n0\n1\n15.75\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-137022.9 36118.9...\n\n\nMC CLELLAN MHP\n269\n52\n108\n65\n0\n43\n0\n2\n19.27\n40.19\n24.01\n0.00\n15.91\n0.00\n0.62\n269\n101\n168\n37.48\n82\n8\n2\n3\n7\n11\n2\n2\n1\n3\n1\n15\n20\n3\n0\n3\n0\n20\n19\n17\n39\n36\n3\n9\n4\n2\n25\n1\n1\n48\n34\n27\n46.85\n35.36\n3.280000\n60521.00\n18213.00\nPOLYGON ((-119814.9 72169.0...\n\n\nOLYMPIA MOBILODGE\n290\n70\n81\n18\n0\n101\n16\n3\n24.12\n28.03\n6.30\n0.00\n34.95\n5.53\n1.08\n290\n68\n222\n23.43\n114\n11\n0\n6\n10\n9\n3\n13\n0\n0\n10\n19\n8\n3\n12\n5\n5\n28\n25\n29\n53\n36\n14\n31\n22\n10\n51\n12\n10\n33\n9\n7\n37.35\n23.74\n2.510000\n53786.00\n29451.00\nPOLYGON ((-123342.4 53061.6...\n\n\nORANGE VALE WATER COMPANY\n17387\n2658\n12308\n241\n181\n633\n86\n1281\n15.28\n70.79\n1.39\n1.04\n3.64\n0.49\n7.37\n17288\n1904\n15384\n11.01\n6595\n389\n111\n61\n94\n226\n58\n274\n120\n181\n372\n752\n990\n901\n626\n678\n766\n655\n858\n1123\n1512\n2113\n1526\n3246\n1021\n453\n1686\n315\n185\n1663\n693\n305\n30.77\n14.29\n2.608348\n92693.71\n42509.89\nPOLYGON ((-108131.3 74330.4...\n\n\nPLANTATION MOBILE HOME PARK\n10\n4\n1\n1\n0\n3\n0\n1\n38.66\n15.12\n7.10\n0.00\n32.49\n0.00\n6.64\n10\n2\n7\n22.33\n3\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n2\n1\n0\n1\n0\n0\n0\n0\n0\n2\n1\n1\n44.88\n28.55\n2.860000\n38491.00\n16707.00\nPOLYGON ((-124180.4 53321.5...\n\n\nRANCHO MARINA\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-138041.4 11320.9...\n\n\nRANCHO MURIETA COMMUNITY SERVI\n3239\n661\n2157\n120\n7\n188\n0\n106\n20.42\n66.59\n3.71\n0.21\n5.80\n0.00\n3.26\n3239\n199\n3040\n6.13\n1402\n59\n42\n0\n6\n5\n18\n74\n27\n75\n44\n81\n88\n118\n204\n241\n319\n108\n199\n125\n307\n213\n323\n1029\n205\n103\n270\n63\n57\n103\n41\n40\n22.02\n14.30\n2.307704\n144993.81\n66451.34\nPOLYGON ((-92457.85 52674.7...\n\n\nRIO COSUMNES CORRECTIONAL CENTER [SWS]\n22\n6\n8\n4\n1\n1\n0\n2\n25.74\n37.49\n16.82\n2.97\n4.50\n1.81\n10.66\n4\n0\n4\n0.00\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n23.75\n0.00\n3.450000\n115897.00\n11095.00\nPOLYGON ((-124032.5 32206.2...\n\n\nRIO LINDA/ELVERTA COMMUNITY WATER DIST\n11831\n2585\n7595\n337\n17\n765\n21\n512\n21.85\n64.19\n2.85\n0.14\n6.46\n0.18\n4.33\n11829\n1619\n10210\n13.69\n3762\n177\n156\n67\n169\n56\n113\n116\n114\n118\n173\n297\n607\n492\n431\n416\n259\n569\n518\n470\n1087\n1077\n922\n1918\n573\n157\n773\n114\n47\n1070\n519\n340\n32.07\n14.49\n3.123012\n83603.04\n33734.49\nPOLYGON ((-126609.8 73568.2...\n\n\nRIVER'S EDGE MARINA & RESORT\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-141102.2 11867.3...\n\n\nSAC CITY MOBILE HOME COMMUNITY LP\n229\n82\n17\n7\n0\n123\n0\n0\n35.66\n7.50\n3.27\n0.00\n53.57\n0.00\n0.00\n229\n110\n119\n48.14\n89\n11\n16\n9\n10\n8\n0\n0\n4\n2\n7\n1\n13\n4\n4\n0\n0\n46\n14\n8\n60\n21\n8\n4\n2\n2\n15\n2\n0\n71\n41\n30\n48.95\n35.43\n2.530000\n22380.00\n16689.00\nPOLYGON ((-124544.3 56147.0...\n\n\nSACRAMENTO SUBURBAN WATER DISTRICT\n193126\n43047\n97872\n17684\n834\n20602\n624\n12464\n22.29\n50.68\n9.16\n0.43\n10.67\n0.32\n6.45\n190984\n33399\n157585\n17.49\n72505\n3817\n3001\n3069\n2884\n3205\n3100\n3337\n2893\n2342\n5541\n6792\n10037\n6480\n4342\n5488\n6177\n12771\n14878\n12333\n27649\n22370\n10822\n23467\n7204\n2837\n12037\n2087\n1160\n37001\n21072\n10274\n41.88\n19.68\n2.635471\n73746.51\n35321.18\nMULTIPOLYGON (((-122206.9 6...\n\n\nSAN JUAN WATER DISTRICT\n30122\n3409\n21349\n831\n287\n2762\n17\n1467\n11.32\n70.87\n2.76\n0.95\n9.17\n0.06\n4.87\n30014\n1718\n28297\n5.72\n10750\n389\n168\n100\n275\n128\n160\n111\n133\n127\n472\n684\n984\n854\n876\n1032\n4256\n932\n658\n1156\n1591\n2141\n1730\n6210\n1754\n724\n2883\n528\n357\n1658\n726\n339\n27.98\n13.21\n2.783858\n160696.10\n72978.42\nPOLYGON ((-104526.8 73044.7...\n\n\nSCWA - ARDEN PARK VISTA\n8086\n990\n6016\n270\n12\n396\n8\n395\n12.24\n74.40\n3.33\n0.15\n4.90\n0.10\n4.88\n8038\n523\n7515\n6.51\n3303\n79\n36\n48\n77\n65\n38\n18\n49\n162\n139\n187\n253\n465\n208\n416\n1065\n241\n330\n326\n571\n579\n673\n1823\n520\n112\n673\n76\n23\n807\n384\n225\n29.69\n10.90\n2.424845\n139081.65\n84548.46\nPOLYGON ((-120985.4 62883.8...\n\n\nSCWA - LAGUNA/VINEYARD\n145495\n27502\n38496\n16568\n246\n50411\n2220\n10052\n18.90\n26.46\n11.39\n0.17\n34.65\n1.53\n6.91\n145198\n14710\n130489\n10.13\n45137\n1692\n666\n742\n878\n839\n1336\n850\n788\n752\n2363\n3198\n6037\n5323\n5057\n6578\n8038\n3978\n4565\n5561\n8543\n11598\n10380\n24581\n7232\n2916\n7878\n861\n471\n12677\n6368\n3337\n32.04\n14.90\n3.207447\n114494.03\n41415.71\nMULTIPOLYGON (((-126550 404...\n\n\nSCWA MATHER-SUNRISE\n18249\n2708\n8114\n1553\n23\n4507\n164\n1180\n14.84\n44.47\n8.51\n0.12\n24.70\n0.90\n6.47\n18211\n1005\n17206\n5.52\n5503\n228\n35\n97\n57\n68\n39\n12\n20\n36\n189\n320\n533\n645\n755\n1003\n1469\n416\n174\n509\n590\n1042\n1399\n3756\n881\n266\n855\n60\n43\n893\n318\n167\n22.89\n8.66\n3.296327\n147818.01\n47448.37\nMULTIPOLYGON (((-112526.7 5...\n\n\nSEQUOIA WATER ASSOC\n0\n0\n0\n0\n0\n0\n0\n0\n44.60\n45.84\n0.00\n0.00\n5.93\n0.00\n3.63\n0\n0\n0\n15.75\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n24.49\n14.65\n2.490000\n68248.00\n38950.00\nPOLYGON ((-136929.5 36128.1...\n\n\nSOUTHWEST TRACT W M D [SWS]\n174\n29\n42\n24\n3\n75\n1\n0\n16.58\n24.48\n13.69\n1.55\n43.11\n0.60\n0.00\n174\n38\n136\n21.83\n57\n1\n2\n7\n0\n7\n0\n0\n10\n12\n3\n2\n5\n0\n1\n2\n4\n10\n29\n6\n39\n10\n1\n3\n1\n0\n8\n0\n0\n45\n29\n7\n52.53\n12.40\n3.040000\n45671.00\n36348.00\nMULTIPOLYGON (((-125843.6 5...\n\n\nSPINDRIFT MARINA\n0\n0\n0\n0\n0\n0\n0\n0\n3.90\n89.23\n3.23\n0.00\n0.00\n0.00\n3.63\n0\n0\n0\n35.94\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28.02\n23.19\n1.790000\n38125.00\n33103.00\nPOLYGON ((-139920.3 11468.3...\n\n\nTOKAY PARK WATER CO\n652\n214\n134\n37\n0\n239\n0\n28\n32.80\n20.55\n5.61\n0.00\n36.69\n0.00\n4.35\n652\n113\n539\n17.29\n173\n2\n2\n3\n21\n0\n0\n13\n13\n10\n18\n27\n36\n14\n4\n10\n0\n27\n36\n45\n64\n81\n18\n81\n38\n11\n44\n0\n0\n48\n32\n12\n40.57\n13.58\n3.757973\n62802.24\n19400.05\nPOLYGON ((-122824.8 54197.9...\n\n\nTUNNEL TRAILER PARK\n0\n0\n0\n0\n0\n0\n0\n0\n49.74\n34.94\n0.00\n0.00\n4.65\n0.00\n10.67\n0\n0\n0\n0.00\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20.30\n0.00\n2.950000\n153092.00\n42507.00\nPOLYGON ((-136160.9 24171.2...\n\n\nVIEIRA'S RESORT, INC\n4\n2\n2\n0\n0\n0\n0\n0\n41.43\n52.47\n0.00\n0.00\n4.55\n0.00\n1.56\n4\n1\n3\n22.60\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n1\n1\n1\n1\n0\n1\n0\n0\n0\n0\n0\n40.53\n21.84\n2.030000\n51977.00\n40522.00\nPOLYGON ((-143780.4 18567.4...\n\n\nWESTERNER MOBILE HOME PARK\n32\n6\n6\n9\n0\n10\n0\n1\n17.59\n17.62\n28.31\n0.55\n31.36\n0.00\n4.57\n31\n7\n24\n23.76\n10\n1\n0\n0\n0\n1\n0\n0\n1\n0\n2\n1\n1\n2\n0\n1\n0\n1\n2\n3\n3\n4\n2\n4\n2\n1\n1\n0\n0\n5\n3\n2\n56.87\n29.49\n3.160000\n59296.00\n23437.00\nPOLYGON ((-122657.2 48977.8...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.4.4 Clean & Format Intermediate (Clipped) Data\nFor visualization and exploration, it’ll also be useful to apply some additional formatting to the clipped block-group data used in intermediate parts of the interpolation process above.\n\n# portion of households paying more than 30% / 50% of income on housing\ncensus_data_interpolate &lt;- census_data_interpolate %&gt;%      \n    mutate(households_all_housing_costs_over30pct_percent = \n               100 * (households_mortgage_housing_costs_over30pct_count + \n                          households_no_mortgage_housing_costs_over30pct_count +                           \n                          households_rent_housing_costs_over30pct_count) / households_count, \n           .after = households_rent_housing_costs_over50pct_count) %&gt;%      \n    mutate(households_all_housing_costs_over50pct_percent = \n               100 * (households_mortgage_housing_costs_over50pct_count +                            \n                          households_no_mortgage_housing_costs_over50pct_count +                           \n                          households_rent_housing_costs_over50pct_count) / households_count,\n           .after = households_all_housing_costs_over30pct_percent)\n\n# drop water system data except name (water_system_name)\ncensus_data_interpolate &lt;- census_data_interpolate %&gt;% \n    select(-census_unit_area, -clipped_area) %&gt;% \n    select(-c(water_system_number:water_system_population_reported)) %&gt;% \n    select(-c(average_household_size_weighted:per_capita_income_weighted)) %&gt;% \n    relocate(water_system_name, .after = NAME) %&gt;% \n    relocate(areal_weight_factor, .after = water_system_name)\n\n\n\n6.4.5 Transform Results to Long Format\nFor further analysis and exploration / visualization of the results, it will help to convert the results from wide to long format, and edit the group names so that they can be used as titles.\n\n# pivot from wide to long format\nwater_system_demographics_long &lt;- water_system_demographics %&gt;% \n    # select(water_system_name, starts_with('percent_')) %&gt;% # select only the fields with percentages, and the water system name/id\n    # convert to long format\n    # st_drop_geometry() %&gt;% \n    pivot_longer(cols = !c(water_system_name, geometry), \n                 names_to = 'variable', \n                 values_to = 'value') %&gt;% \n    relocate(geometry, .after = last_col())\n\n# clean variable names and add grouping fields (type, group_type)\nwater_system_demographics_long &lt;- water_system_demographics_long %&gt;% \n    mutate(variable = variable %&gt;% \n               # str_remove_all(pattern = 'percent_') %&gt;% \n               str_replace_all(pattern = '_', replacement = ' ') %&gt;% \n               str_replace_all(pattern = ' or ', replacement = ' / ') %&gt;% \n               str_to_title(.) %&gt;%\n               str_remove_all(pattern = ' / Alaska Native')) %&gt;% \n    mutate(variable_type = case_when(\n        str_detect(variable, pattern = 'Count') ~ 'Count',\n        str_detect(variable, pattern = 'Percent') ~ 'Percent',\n        str_detect(variable, pattern = 'Pop Weighted') ~ 'Pop Weighted',\n        str_detect(variable, pattern = 'Hh Weighted') ~ 'Hh Weighted',\n        .default = NA), \n        .after = variable) %&gt;% \n    mutate(variable_group_type = case_when(\n        str_detect(variable, pattern ='Population') ~ 'Population',\n        str_detect(variable, pattern = 'Households') ~ 'Households',\n        str_detect(variable, pattern = 'Average Household Size Hh Weighted') ~ 'Household Weighted', \n        str_detect(variable, pattern = 'Median Household Income Hh Weighted') ~ 'Household Weighted',\n        str_detect(variable, pattern = 'Per Capita Income Pop Weighted') ~ 'Population Weighted',\n        str_detect(variable, pattern = 'Poverty') ~ 'Population'),\n        .after = variable_type) %&gt;% \n    mutate(variable = case_when(\n        str_detect(variable, pattern = 'Households Count') ~ 'Households Total',\n        .default = str_remove_all(variable, pattern = 'Households'))) %&gt;% \n    mutate(variable = case_when(\n        str_detect(variable, 'Population Total Count') ~ 'Population Total',\n        .default = str_remove_all(variable, 'Population'))) %&gt;%\n    mutate(variable = str_remove_all(variable, \n                                     pattern = 'Count')) %&gt;% \n    mutate(variable = str_remove_all(variable, \n                                     pattern = 'Percent')) %&gt;% \n    mutate(variable = str_remove_all(variable, \n                                     pattern = ' Hh Weighted')) %&gt;% \n    mutate(variable = str_remove_all(variable, \n                                     pattern = ' Pop Weighted')) %&gt;% \n    mutate(variable = str_replace_all(variable, \n                                      pattern = 'Over30pct', \n                                      replacement = 'Over 30% Income')) %&gt;% \n    mutate(variable = str_replace_all(variable, \n                                      pattern = 'Over50pct', \n                                      replacement = 'Over 50% Income')) %&gt;% \n    mutate(variable = str_trim(variable)) %&gt;%\n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'k ',\n                                      replacement = 'k-')) %&gt;%\n    mutate(variable = str_replace_all(variable,\n                                      pattern = '0 ',\n                                      replacement = '0-')) %&gt;% \n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Black-',\n                                      replacement = 'Black ')) %&gt;% \n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Mortgage ',\n                                      replacement = 'Mortgage - ')) %&gt;%\n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Rent ',\n                                      replacement = 'Rent - ')) %&gt;% \n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'All ',\n                                      replacement = 'All Households - ')) %&gt;% \n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Households Total',\n                                      replacement = 'Total Households')) %&gt;% \n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Population Total',\n                                      replacement = 'Total Population')) %&gt;%\n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Poverty ',\n                                      replacement = 'Poverty - ')) %&gt;%\n    mutate(variable = str_replace_all(variable,\n                                      pattern = 'Poverty - Rate',\n                                      replacement = 'Poverty Rate'))\n\nHere’s a view of the structure of the reformatted data:\n\nglimpse(water_system_demographics_long)\n\nRows: 3,472\nColumns: 6\n$ water_system_name   &lt;chr&gt; \"B & W RESORT MARINA\", \"B & W RESORT MARINA\", \"B &…\n$ variable            &lt;chr&gt; \"Total Population\", \"Hispanic / Latino\", \"White\", …\n$ variable_type       &lt;chr&gt; \"Count\", \"Count\", \"Count\", \"Count\", \"Count\", \"Coun…\n$ variable_group_type &lt;chr&gt; \"Population\", \"Population\", \"Population\", \"Populat…\n$ value               &lt;dbl&gt; 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 41…\n$ geometry            &lt;POLYGON [m]&gt; POLYGON ((-138282.2 13643.2..., POLYGON ((…\n\n\nWe can also do the same for the clipped block-group data used in intermediate parts of the interpolation process above.\n\ncensus_data_interpolate_long &lt;- census_data_interpolate %&gt;% \n    pivot_longer(cols = !c(GEOID, NAME, water_system_name, \n                           areal_weight_factor, geometry), \n                 names_to = 'variable', \n                 values_to = 'value') %&gt;% \n    relocate(geometry, .after = last_col())\n\n\n\n\n6.5 Save Results\nOnce we’ve finished the computations and verified the outputs look reasonable, we can save the results to output files so they can be re-used and shared. The results can be saved in tabular (e.g., csv, excel) and/or spatial (e.g., shapefile, geopackage) formats, which may be helpful for different use cases. Note that you may need to think about exactly what variables to include in the output file(s) and how to format the output datasets (e.g., wide versus long format).\nThe files saved below are all available here.\nThe chunk of code below (which is hidden by default), just tests to see whether any of the datasets to be saved have been changed since the previous version was saved. In general this is probably not needed for a typical workflow and can be ignored for most use cases – it is just used here to make rendering of this document a little more efficient.\n\n\nCode\n# compute hash for datasets to be saved (i.e., a unique identifier for each dataset), and compare against previous versions\n\n## define file that stores hash (unique identifier for dataset)\nhash_file &lt;- here('03_data_results',\n                  '_dataset_hash.csv')\n\n## compute hashes (unique identifier for datasets)\nhash_current &lt;- digest(object = water_system_demographics,\n                       algo = 'md5')\nhash_current_long &lt;- digest(object = water_system_demographics_long,\n                            algo = 'md5')\nhash_interpolate &lt;- digest(object = census_data_interpolate,\n                    algo = 'md5')\nhash_interpolate_long &lt;- digest(object = census_data_interpolate_long, \n                         algo = 'md5')\nhash_table_current &lt;- tibble(\n    dataset = c('water_system_demographics', \n                'water_system_demographics_long',\n                'census_data_interpolate',\n                'census_data_interpolate_long'),\n    hash = c(hash_current, \n             hash_current_long,\n             hash_interpolate,\n             hash_interpolate_long))\n\n## get the previous hashes from file (if it exists), else create a new file to store the hashes\nif (file.exists(hash_file)) {\n    hash_table_previous &lt;- read_csv(file = hash_file)\n} else {\n    file.create(hash_file)\n    hash_table_previous &lt;- tibble(\n        dataset = c('water_system_demographics', \n                    'water_system_demographics_long',\n                    'census_data_interpolate',\n                    'census_data_interpolate_long'),\n        hash = c('missing', \n                 'missing',\n                 'missing', \n                 'missing'))\n}\n\n## if new hash is different from previous hash, set flag to update the output file (i.e., write a new version of the file)\nfile_update &lt;- !identical(hash_table_current %&gt;% \n                              filter(dataset == 'water_system_demographics') %&gt;% \n                              pull(hash),\n                          hash_table_previous %&gt;% \n                              filter(dataset == 'water_system_demographics') %&gt;% \n                              pull(hash))\nfile_update_long &lt;- !identical(hash_table_current %&gt;% \n                                   filter(dataset == 'water_system_demographics_long') %&gt;% \n                                   pull(hash),\n                               hash_table_previous %&gt;% \n                                   filter(dataset == 'water_system_demographics_long') %&gt;% \n                                   pull(hash))\nfile_update_interpolate &lt;- !identical(hash_table_current %&gt;% \n                                   filter(dataset == 'census_data_interpolate') %&gt;% \n                                   pull(hash),\n                               hash_table_previous %&gt;% \n                                   filter(dataset == 'census_data_interpolate') %&gt;% \n                                   pull(hash))\nfile_update_interpolate_long &lt;- !identical(hash_table_current %&gt;% \n                                   filter(dataset == 'census_data_interpolate_long') %&gt;% \n                                   pull(hash),\n                               hash_table_previous %&gt;% \n                                   filter(dataset == 'census_data_interpolate_long') %&gt;% \n                                   pull(hash))\n\n## write current hashes to file (for comparison with future versions)\nwrite_csv(x = hash_table_current,\n          file = hash_file,\n          append = FALSE)\n\n\n\n6.5.1 Tabular Dataset\nThe code below saves the tabular results to a csv file, in both the ‘wide’ and ‘long’ formats. The wide format data can also be viewed here, or downloaded with this link. The long format data can be viewed here, or downloaded with this link.\n\n# wide\nif (file_update == TRUE) {\n    write_csv(water_system_demographics %&gt;%\n                  st_drop_geometry(), # drop the spatial data since this is a tabular format\n              file = here('03_data_results',\n                          'water_system_demographics_sac.csv'))\n}\n\n# long\nif (file_update_long == TRUE) {\n    write_csv(water_system_demographics_long %&gt;%\n                  st_drop_geometry(), # drop the spatial data since this is a tabular format\n              file = here('03_data_results',\n                          'water_system_demographics_sac_long.csv'))\n}\n\nAnd we can save the intermediate data from the interpolation process (i.e., data for clipped block groups) in wide and long format – these files can be downloaded with this link and this link respectively.\n\n# wide\nif (file_update_interpolate == TRUE) {\n    write_csv(census_data_interpolate %&gt;%\n                  st_drop_geometry(), # drop the spatial data since this is a tabular format\n              file = here('03_data_results',\n                          'intermediate_interpolation_data.csv'))\n}\n\n# long\nif (file_update_interpolate_long == TRUE) {\n    write_csv(census_data_interpolate_long %&gt;%\n                  st_drop_geometry(), # drop the spatial data since this is a tabular format\n              file = here('03_data_results',\n                          'intermediate_interpolation_data_long.csv'))\n}\n\n\n\n6.5.2 Spatial Dataset\nTo save the output in a geospatial format, it may be best to save the data in a wide format, so that all of the attribute data for each target area (water system) is in a single row along with its spatial data (i.e. the system boundary information) (saving in long format may create a very large file). The code below saves the results – in wide format – to a geopackage file, which is a spatial file format that is similar to a shapefile. The final water system demographic data is available to downloaded with this link, and the data from the intermediate calculations (for clipped block groups) is available to download with this link.\n\nif (file_update == TRUE) {\n    st_write(water_system_demographics,\n             here('03_data_results',\n                  'water_system_demographics_sac.gpkg'),\n             append = FALSE)\n}\n\nif (file_update_interpolate == TRUE) {\n    st_write(census_data_interpolate,\n             here('03_data_results',\n                  'intermediate_interpolation_data.gpkg'),\n             append = FALSE)\n}"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-results-explore",
    "href": "example_census_race_ethnicity_calculation.html#sec-results-explore",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "7 Explore and Visualize Results",
    "text": "7 Explore and Visualize Results\n\n\n\n\n\n\nWarning\n\n\n\nThis section is in progress.\n\n\nFor simplicity, this section will focus on presenting estimated demographics for some of the largest water suppliers in the Sacramento county region (results for small water systems may not be very accurate and should be used with some caution - see Section 8 and Section 10 for more investigation of the results for small systems).\n\n# Select systems to plot\n\n## number of systems\nn_systems &lt;- 20\n\n## get list of selected systems\nsystems_top_n &lt;- water_system_demographics %&gt;% \n    slice_max(population_total_count, n = n_systems) %&gt;% \n    pull(water_system_name)\n\n\n7.1 Race / Ethnicity\n[placeholder]\n\npercent by group (bar)\ndot-density\nmapview (non-white)\n\n\n\n7.2 Income Distributions\n[placeholder]\n\nincome brackets (50k) (bar)\nmedian household income by block group (dots)\ndot-density (below threshold value)\nmapview\n\n\n\n7.3 Poverty Rates\n[placeholder]\n\ndot plot\nmapview\nside-by-side map\n\n\n\n7.4 Income & Relative Housing Costs\nThe biscale R package (Prener, Grossenbacher, and Zehr 2022) can be used to create maps that show how two metrics vary together spatially (bivariate choropleth maps).\nFigure 5 shows the relationship between estimated income and relative housing costs for the top 20 systems by estimated population in Sacramento County.\n\n\nCode\n# Table B25140 - Housing Costs as a Percentage of Household Income in the past 12 months.\n# Shows the count of households paying more than 30% or 50% of their income towards housing costs broken out by three tenure categories (owned with a mortgage, owned without a mortgage, and rented).\n\n# set defaults\nbiscale_pal &lt;- 'BlueOr' # 'GrPink' # 'DkViolet2'\nbiscale_dim &lt;- 3\n\n# create classes\nbiscale_data &lt;- bi_class(water_system_demographics %&gt;% \n                             filter(water_system_name %in% systems_top_n) %&gt;% \n                             filter(!is.na(median_household_income_hh_weighted)), \n                         x = households_all_housing_costs_over30pct_percent, \n                         y = median_household_income_hh_weighted, \n                         style = \"quantile\", \n                         dim = biscale_dim)\n\n# create map\nbiscale_map &lt;- ggplot() +\n    geom_sf(data = biscale_data, \n            mapping = aes(fill = bi_class), \n            color = \"white\", \n            size = 0.1, \n            show.legend = FALSE) +\n    bi_scale_fill(pal = biscale_pal, \n                  dim = biscale_dim) + \n    labs(\n        title = \"Estimated % of Households Paying More Than 30% of Income Towards Housing Costs \\nand Estimated Median Household Income in Sacramento Water Systems\",\n        subtitle = glue(\"Top {n_systems} Water Systems by Population\"),\n        caption = glue(\"Data estimated from {acs_year} 5-year ACS Block Groups\")\n        # title = \"Estimated Housing Cost as % of Household Income and \\nEstimated Median Household Income in Sacramento Water Systems\", \n        # caption = \"% Housing cost shows the percent of households paying more than 30% of their income towards housing costs \\nIncome shows median household income (yellow = missing)\"\n    ) +\n    #   labs(\n    #   title = \"Housing Cost&lt;sup&gt;1&lt;/sup&gt; and Income&lt;sup&gt;2&lt;/sup&gt; in Sacramento Water Systems\",\n    #   caption = \"&lt;sup&gt;1&lt;/sup&gt;% of households paying more than 30% of their income towards housing costs&lt;br&gt;&lt;sup&gt;2&lt;/sup&gt;Median household income (yellow = missing)\",\n    #   subtitle = glue(\"Top {n_systems} systems by population\")\n    # ) +\n    # add missing polygons back in\n    geom_sf(data = water_system_demographics %&gt;% \n                filter(water_system_name %in% systems_top_n) %&gt;% \n                filter(is.na(median_household_income_hh_weighted)),\n            color = \"white\",\n            fill = 'gold'\n    ) +\n    geom_sf(data = counties_ca %&gt;% filter(NAME == 'Sacramento'), \n            color = 'grey',\n            fill = NA) +\n    bi_theme() + \n    theme(plot.title = element_text(size=12), # element_markdown(size=12)\n          plot.subtitle = element_text(size=10),\n          plot.caption = element_text(size=8, hjust = 1)) # element_markdown(size=8, hjust = 1))\n\n# create legend\nbiscale_legend &lt;- bi_legend(pal = biscale_pal,\n                            dim = biscale_dim,\n                            xlab = \"% Housing Costs \",\n                            ylab = \"Income \",\n                            size = 8)\n\n# construct map\nbiscale_plot &lt;- ggdraw() +\n    draw_plot(biscale_map, 0, 0, 1, 1) +\n    draw_plot(biscale_legend, 0.1, .65, 0.2, 0.2)\n\nbiscale_plot\n\n\n\n\n\n\n\n\nFigure 5\n\n\n\n\n\nFigure 6 shows the same variables (relative housing costs and income) for the portions block groups overlapping Sacramento Suburban Water District – this illustrates the data underlying the interpolation process.\n\n\nCode\n# set defaults\nbiscale_pal_system &lt;- 'BlueOr' # 'GrPink' # 'DkViolet2'\nbiscale_dim_system &lt;- 3\n\n# create classes\nbiscale_data_system &lt;- bi_class(census_data_interpolate %&gt;% \n                                    filter(water_system_name == system_plot) %&gt;% \n                                    filter(!is.na(median_household_income)), \n                                x = households_all_housing_costs_over30pct_percent, \n                                y = median_household_income, \n                                style = \"quantile\", \n                                dim = biscale_dim_system)\n# create map\nbiscale_map_system  &lt;- ggplot() +\n    geom_sf(data = biscale_data_system , \n            mapping = aes(fill = bi_class), \n            color = \"white\", \n            size = 0.1, \n            show.legend = FALSE) +\n    bi_scale_fill(pal = biscale_pal_system, \n                  dim = biscale_dim_system) + \n    labs(\n        title = glue(\"Estimated % of Households Paying More Than 30% of Income Towards Housing Costs \\nand Estimated Median Household Income in {str_to_title(system_plot)}\"),\n        # subtitle = glue(\"\"),\n        caption = glue(\"Data from {acs_year} 5-year ACS Block Groups (Yellow = Missing Data)\")#,\n        # title = glue(\"Housing Cost and Income \\nin {str_to_title(system_plot)}\"), \n        # caption = \"% Housing cost shows the percent of households paying more than 30% of their income towards housing costs \\nIncome shows median household income (yellow = missing)\"#,\n    ) +\n    # add the missing polygons back in\n    geom_sf(data = census_data_interpolate %&gt;% \n                filter(water_system_name == system_plot) %&gt;% \n                filter(is.na(median_household_income)),\n            color = \"white\",\n            fill = 'gold'\n    ) +\n    bi_theme() + \n    theme(plot.title = element_text(size=12), # element_markdown(size=12)\n          plot.subtitle = element_text(size=10),\n          plot.caption = element_text(size=8, hjust = 1)) # element_markdown(size=8, hjust = 1))\n\n# create legend\nbiscale_legend &lt;- bi_legend(pal = biscale_pal_system,\n                            dim = biscale_dim_system,\n                            xlab = \"% Housing Costs \",\n                            ylab = \"Income \",\n                            size = 8)\n\n# construct map\nbiscale_plot_system &lt;- ggdraw() +\n  draw_plot(biscale_map_system, 0, 0, 1, 1) +\n  draw_plot(biscale_legend, 0.1, .55, 0.2, 0.2)\n\nbiscale_plot_system\n\n\n\n\n\n\n\n\nFigure 6"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-check-pop-estimated-reported",
    "href": "example_census_race_ethnicity_calculation.html#sec-check-pop-estimated-reported",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "8 Check - Estimated vs Reported Population Estimates",
    "text": "8 Check - Estimated vs Reported Population Estimates\n[TO DO: Create map]\nBased on the map above, it’s apparent that it will be difficult to obtain reasonable estimates for some suppliers, such as the suppliers with very small service areas in the southern portion of the county where the block groups are very large (and the supplier’s service are is only a small fraction of the total area of the block group). These issues are explored further in Section 10.\nNote that there are a number of reasons why the estimated population values are likely to differ from the population numbers in the water system dataset (e.g., the depicted boundaries may not be correct or exact, the supplier may have used different methods to count/estimate the population they serve, the time frames for the estimates may be different, etc.). But, there may also be some cases where the numbers differ significantly – depending on the actual analysis being performed, this may mean that further work is needed for certain areas, or could mean that this method may not be sufficient and different methods are needed.\nAs a check, we can add a column to the interpolated dataset (which we’ll call population_percent_difference) to compute the difference between the estimated total population (in the population_total field) and the total population listed in the water_system_population_reported field (the reported value from the water system dataset, which is named POPULATION in the water supplier dataset).\n\nwater_system_demographics_check &lt;- water_system_demographics %&gt;% \n    left_join(water_systems_sac %&gt;% \n                  st_drop_geometry() %&gt;% \n                  select(water_system_name, water_system_population_reported),\n              by = 'water_system_name')\n\nwater_system_demographics_check &lt;- water_system_demographics_check %&gt;%\n    mutate(population_percent_difference =\n               round(100 * (population_total_count - water_system_population_reported) / water_system_population_reported, \n                     2), \n           .after = water_system_population_reported)\n\nFor water systems with a small population and/or service area, the estimated demographics may not match the reported population numbers in the water system dataset very well. You can see this in Table 2 by comparing the population_reported field, which contains the total population values from the water supplier dataset, with the population_estimated field, which contains the total population estimated from the census data; the difference between the two is summarized in the population_percent_difference field. This probably indicates that, for small areas, some adjustments and/or further analysis may be needed, and the preliminary estimated values should be treated with some caution/skepticism.\nNote: See Section 10 below for some more investigation into water systems whose estimated population is at or near zero.\n\nwater_system_demographics_check %&gt;%\n    arrange(water_system_population_reported) %&gt;%\n    slice(1:10) %&gt;%\n    select(water_system_name, \n           population_reported = water_system_population_reported, \n           population_estimated = population_total_count, \n           population_percent_difference) %&gt;%\n    st_drop_geometry() %&gt;%\n    kable()\n\n\n\nTable 2: 10 Smallest Water Systems by Population\n\n\n\n\n\n\n\n\n\n\n\n\nwater_system_name\npopulation_reported\npopulation_estimated\npopulation_percent_difference\n\n\n\n\nDELTA CROSSING MHP\n30\n0\n-100.00\n\n\nLAGUNA VILLAGE RV PARK\n32\n20\n-37.50\n\n\nLINCOLN CHAN-HOME RANCH\n33\n4\n-87.88\n\n\nEDGEWATER MOBILE HOME PARK\n40\n0\n-100.00\n\n\nMAGNOLIA MUTUAL WATER\n40\n1\n-97.50\n\n\nFREEPORT MARINA\n42\n3\n-92.86\n\n\nPLANTATION MOBILE HOME PARK\n44\n10\n-77.27\n\n\nTUNNEL TRAILER PARK\n44\n0\n-100.00\n\n\nSEQUOIA WATER ASSOC\n54\n0\n-100.00\n\n\nHAPPY HARBOR (SWS)\n60\n0\n-100.00\n\n\n\n\n\n\n\n\nBut for larger water systems, the estimated population values seem to be more in line with the population numbers in the original dataset. You can see this in Table 3 by, as above, comparing the population_reported field, which contains the total population values from the water supplier dataset, with the population_estimated field, which contains the total population estimated from the census data; the difference between the two is summarized in the population_percent_difference field.\n\nwater_system_demographics_check %&gt;%\n    arrange(desc(water_system_population_reported)) %&gt;%\n    slice(1:10) %&gt;%\n    select(water_system_name, \n           population_reported = water_system_population_reported, \n           population_estimated = population_total_count, \n           population_percent_difference) %&gt;%\n    st_drop_geometry() %&gt;%\n    kable()\n\n\n\nTable 3: 10 Largest Water Systems by Population\n\n\n\n\n\n\n\n\n\n\n\n\nwater_system_name\npopulation_reported\npopulation_estimated\npopulation_percent_difference\n\n\n\n\nCITY OF SACRAMENTO MAIN\n510931\n516189\n1.03\n\n\nSACRAMENTO SUBURBAN WATER DISTRICT\n184385\n193126\n4.74\n\n\nSCWA - LAGUNA/VINEYARD\n172666\n145495\n-15.74\n\n\nFOLSOM, CITY OF - MAIN\n68122\n62462\n-8.31\n\n\nCITRUS HEIGHTS WATER DISTRICT\n65911\n68912\n4.55\n\n\nCALAM - SUBURBAN ROSEMONT\n53563\n57897\n8.09\n\n\nCALAM - PARKWAY\n48738\n58635\n20.31\n\n\nCALAM - LINCOLN OAKS\n47487\n42916\n-9.63\n\n\nGOLDEN STATE WATER CO. - CORDOVA\n44928\n48115\n7.09\n\n\nELK GROVE WATER SERVICE\n42540\n42647\n0.25"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-detailed-pop-estimates",
    "href": "example_census_race_ethnicity_calculation.html#sec-detailed-pop-estimates",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "9 Considerations for Detailed Population Estimates",
    "text": "9 Considerations for Detailed Population Estimates\n\n\n\n\n\n\nWarning\n\n\n\nThis section is in progress.\n\n\nIf you’re primarily only interested in population estimates (possibly including population by race/ethnicity, age, gender, etc.) and need an estimate that’s as geographically accurate as possible, it may make more sense to use the block-level population data from the decennial census rather than block group level population data from the ACS. However, since the decennial census only occurs once every 10 years, those estimates won’t reflect recent population changes (and will get especially less accurate as we get farther from the last decennial census). But keep in mind that even the 5-year ACS is an average that encompasses previous years’ estimates, so it’s not necessarily temporally precise either.\nIt’s also possible to use the block-level decennial population data as a weighing factor for ACS population data (to allocate the population within block-group level ACS data).\n[TO DO: add example]"
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-small-area-estimates",
    "href": "example_census_race_ethnicity_calculation.html#sec-small-area-estimates",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "10 Considerations for Small / Rural Area Estimates",
    "text": "10 Considerations for Small / Rural Area Estimates\n\n\n\n\n\n\nWarning\n\n\n\nThis section is in progress.\n\n\nFor some water systems, the estimated population using the areal interpolation above (Section 6.2) was at or near zero, and it may be useful to look at an example to see what’s going on with one of those cases.\n(because the water system may encompass only a small portion of one or a few census units, and the entire census unit(s) may not be representative of the small portion(s)), especially those in rural environments (where population densities are lower, population centers tend to be spread out, and census units tend to be larger).\n[TO DO: insert map]\nFrom the map above [TO DO: insert map], you can see that the service area reported for some systems are very small, only covering a small fraction of a single census unit, resulting in a population estimate that is very low. In these cases, it could be that the system area was drawn incorrectly (i.e., maybe it doesn’t really depict the entire service area), in which case the reported service area should be revised. Or, it’s possible that the population within the given census unit is very un-evenly distributed and instead there’s a relatively high density population cluster in the depicted service area, in which case a more sophisticated method than an area-weighted average should be used (e.g., maybe consider the density of buildings, roads, and/or other features associated with inhabited areas)."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-alternative-methods",
    "href": "example_census_race_ethnicity_calculation.html#sec-alternative-methods",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "11 Alternative Computation Methods",
    "text": "11 Alternative Computation Methods\n\n\n\n\n\n\nWarning\n\n\n\nThis section is in progress.\n\n\n\n11.1 Simplified Method With MOE Estimates\nAs noted above, determining the margin of error (MOE) for estimates computed using areal weighted interpolation to aggregate portions of census units that overlap the target area of interest may not be possible (more research may be needed). If it’s necessary to compute MOEs for your aggregated values, and/or it’s preferable to use a simpler approach that doesn’t apply areal interpolation to assign fractional portions of census units to the target area, then a simplified method could be applied.\nIn this case, one option could be to use a minimum coverage threshold, where entire census units whose portion of area that overlaps the target area is greater than the threshold are treated as part of the target area, and any census units whose portion of area that overlaps the target area is less than the threshold are not treated as part of the target area. Because this approach operates on entire census units, the census bureau’s recommended approach for aggregating MOEs can be applied to produce an aggregated MOE. (However, keep in mind that the aggregated MOE applies to the uncertainty in the estimate for the census units included in the aggregation, and not may not necessarily capture the uncertainty in the estimate of the target area, since the two areas are now different – i.e., there is an additional unquantified element of uncertainty/error which is not reflected in the MOE due to this mismatch. In general, any estimate which attempts to compute census demographics for areas that don’t align with the census boundaries may have some element on un-quantifiable error – more research/input may be needed.)\n\n\n\n\n\n\nTip\n\n\n\ntidycensus has functions for calculating MOEs for derived estimates based on Census-supplied formulas, including moe_sum(), moe_product(), moe_ratio(), and moe_prop().\n\n\nHere’s an example calculation:\n\n# define threshold value\noverlap_threshold &lt;- 0.5\n\n# get census data (with MOEs)\ncensus_data_acs_moe &lt;- get_acs(geography = 'block group',\n                           state = 'CA', \n                           county = counties_list,\n                           filter_by = water_systems_filter,\n                           year = acs_year,\n                           survey = 'acs5',\n                           variables = census_vars_acs, \n                           output = 'wide', # can be 'wide' or 'tidy'\n                           geometry = TRUE,\n                           cache_table = TRUE) %&gt;% \n    st_transform(crs_projected) # convert to common coordinate system\n\nGetting data from the 2018-2022 5-year ACS\n\n# compute area of overlap for each census unit\nsimplified_calc &lt;- census_data_acs_moe %&gt;%\n    mutate(census_unit_area = st_area(.)) %&gt;% \n    st_intersection(water_systems_sac %&gt;% \n                        select(water_system_name)) %&gt;%\n    mutate(clipped_area = st_area(.)) %&gt;% \n    mutate(overlap_portion = drop_units(clipped_area / census_unit_area)) %&gt;% \n    mutate(geoid_system = paste(GEOID, water_system_name, sep = '|')) %&gt;% \n    st_drop_geometry()\n\nWarning: attribute variables are assumed to be spatially constant throughout\nall geometries\n\n# determine which census units to include, based on threshold value\nsimplified_calc &lt;- simplified_calc %&gt;% \n    mutate(above_threshold = overlap_portion &gt;= overlap_threshold)\n\n# account for water systems with no census units that meet the threshold value\n## get list of systems with at least 1 census unit above threshold\nsimplified_systems_above_threshold &lt;- simplified_calc %&gt;% \n    filter(above_threshold == TRUE) %&gt;% \n    pull(water_system_name) %&gt;% \n    unique()\n## get list of systems with no census units above threshold    \nsimplified_systems_below_threshold &lt;- water_systems_sac %&gt;% \n    filter(!water_system_name %in% simplified_systems_above_threshold) %&gt;% \n    pull(water_system_name)\n\n## select the 1 census unit per system with the greatest overlap \nsimplified_systems_below_threshold_keep &lt;- simplified_calc %&gt;% \n    filter(water_system_name %in% simplified_systems_below_threshold) %&gt;% \n    group_by(water_system_name) %&gt;%\n    slice_max(order_by = overlap_portion, n = 1) %&gt;%\n    ungroup()\n\n# filter census units based on threshold value (and account for water systems with no census units that meet the threshold value)\ngeoid_system_keep_above_threshold &lt;- simplified_calc %&gt;% \n               filter(above_threshold == TRUE) %&gt;% \n               pull(geoid_system)\ngeoid_system_keep_below_threshold &lt;- simplified_systems_below_threshold_keep %&gt;% \n    pull(geoid_system)\n\ncensus_data_acs_moe &lt;- census_data_acs_moe %&gt;% \n    st_join(water_systems_sac %&gt;% select(water_system_name)) %&gt;% \n    mutate(geoid_system = paste(GEOID, water_system_name, sep = '|')) %&gt;% \n    filter(geoid_system %in% c(geoid_system_keep_above_threshold, geoid_system_keep_below_threshold))\n\n# aggregate\n# [TO DO: compute aggregated values]\n# simplified_calc_aggregate &lt;- simplified_calc %&gt;% \n#     group_by(water_system_name, water_systems_filter) %&gt;% \n#     {.} %&gt;% \n#     ungroup()\n\n# compute MOEs\n# [TO DO - use tidycensus functions to calculate MOEs]\n\nFigure 7 shows the census units used in this simplified method to estimate demographics for Sacramento Suburban Water District.\n\nCode\nmapview(census_data_acs_moe %&gt;% \n            filter(water_system_name == system_plot), \n        alpha.regions = 0.8, \n        col.regions = 'grey60',\n        color = 'cyan',\n        # lwd = 1.3, \n        label = 'NAME',  \n        layer.name = 'ACS Data', \n        legend = FALSE) + #  zcol = 'NAME'    \n    mapview(water_systems_sac %&gt;% \n                filter(water_system_name == system_plot), \n            alpha.regions = 0.3, \n            col.regions = 'darkblue',\n            color = 'black',\n            lwd = 1.3, \n            zcol = 'water_system_name',\n            # label = 'water_system_name',\n            layer.name = 'Water System Boundary', \n            legend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 7: Water system Sacramento Suburban Water District (light blue fill) and boundaries of census units (grey fill) that will be used to estimate water system demographics for the simplified approach.\n\n\n\nWhile this approach may work well for relatively large water systems (where the size of the system is significantly greater than the census units used for the analysis), for smaller water systems this method might be somewhat more problematic, as show in Figure 9.\n\nCode\nsystem_plot_small &lt;- 'RIO LINDA/ELVERTA COMMUNITY WATER DIST'\n\nmapview(census_data_acs_moe %&gt;% \n            filter(water_system_name == system_plot_small), \n        alpha.regions = 0.8, \n        col.regions = 'grey60',\n        color = 'cyan',\n        # lwd = 1.3, \n        label = 'NAME',  \n        layer.name = 'ACS Data', \n        legend = FALSE) + #  zcol = 'NAME'    \n    mapview(water_systems_sac %&gt;% \n                filter(water_system_name == system_plot_small), \n            alpha.regions = 0.3, \n            col.regions = 'darkblue',\n            color = 'black',\n            lwd = 1.3, \n            zcol = 'water_system_name',\n            # label = 'water_system_name',\n            layer.name = 'Water System Boundary', \n            legend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 8: Water system Rio Linda/Elverta Community Water Dist (light blue fill) and boundaries of census units (grey fill) that will be used to estimate water system demographics for the simplified approach.\n\n\n\nFigure 9 shows another example of a small system surrounded by large (rural) block groups.\n\nCode\nsystem_plot_small &lt;- 'RANCHO MURIETA COMMUNITY SERVI' # 'RIO LINDA/ELVERTA COMMUNITY WATER DIST'\n\nmapview(census_data_acs %&gt;% \n            st_filter(water_systems_sac %&gt;% \n                          filter(water_system_name == system_plot_small)) %&gt;% \n            filter(!GEOID %in% (census_data_acs_moe %&gt;% \n                       filter(water_system_name == system_plot_small) %&gt;% \n                       pull(GEOID))), \n        alpha.regions = 0.3, \n        col.regions = 'grey80',\n        color = 'grey',\n        # lwd = 1.3, \n        label = 'NAME',  \n        layer.name = 'ACS Data - Not Used', \n        legend = FALSE) + #  zcol = 'NAME' \nmapview(census_data_acs_moe %&gt;% \n            filter(water_system_name == system_plot_small), \n        alpha.regions = 0.8, \n        col.regions = 'grey60',\n        color = 'cyan',\n        # lwd = 1.3, \n        label = 'NAME',  \n        layer.name = 'ACS Data - Used', \n        legend = FALSE) + #  zcol = 'NAME'    \n    mapview(water_systems_sac %&gt;% \n                filter(water_system_name == system_plot_small), \n            alpha.regions = 0.3, \n            col.regions = 'darkblue',\n            color = 'black',\n            lwd = 1.3, \n            zcol = 'water_system_name',\n            # label = 'water_system_name',\n            layer.name = 'Water System Boundary', \n            legend = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 9: Water system Rancho Murieta Community Servi (light blue fill) and boundaries of census units (grey fill) that will be used to estimate water system demographics for the simplified approach.\n\n\n\n\n\n11.2 Population Weighted Interpolation\nThe tidycensus package also has a function for population weighted interpolation, interpolate_pw, but it uses a somewhat different methodology than the population weighted interpolation procedure applied above in Section 6.3.\nNote that some water systems may not get an estimated value using this method, even if NA values are removed from the source data first.\n\nresults_interpolate_pw &lt;- interpolate_pw(from = census_data_acs %&gt;%\n                                             filter(!is.na(population_total_count)) %&gt;% # population_total_count  median_household_income\n                                             select(population_total_count),\n                                         to = water_systems_sac,\n                                         to_id = 'water_system_name',\n                                         extensive = TRUE, # use FALSE for median_household_income\n                                         weights = census_data_decennial,\n                                         # weight_placement = 'surface',\n                                         weight_column = 'population_total_count') %&gt;%\n    # rename(median_household_income_interpolate_pw = median_household_income) # rename results field\n    rename(population_total_count_interpolate_pw = population_total_count) %&gt;% \n    mutate(population_total_count_interpolate_pw = round(population_total_count_interpolate_pw, 0))\n\n# sum(is.na(results_interpolate_pw$median_household_income_interpolate_pw))\n# sum(is.na(results_interpolate_pw$population_total_count_interpolate_pw))\n\nThis returns 17 NAs (it looks like those are small areas). Table 4 shows a comparison of the system populations estimated using interpolate_pw and the reported system populations:\n\nresults_interpolate_pw %&gt;%\n    left_join(water_systems_sac %&gt;%\n                  st_drop_geometry() %&gt;%\n                  select(water_system_service_connections, water_system_population_reported, water_system_name),\n              by = 'water_system_name') %&gt;% \n    relocate(water_system_population_reported, .after = population_total_count_interpolate_pw) %&gt;% \n    kable(caption = 'A Caption') %&gt;%\n    scroll_box(height = \"400px\")\n\n\n\nTable 4: Results Comparison - estimated population with interpolate_pw() vs. reported population\n\n\n\n\n\n\nA Caption\n\n\nwater_system_name\npopulation_total_count_interpolate_pw\nwater_system_population_reported\nwater_system_service_connections\ngeometry\n\n\n\n\nHOOD WATER MAINTENCE DIST [SWS]\n74\n100\n82\nMULTIPOLYGON (((-132703 403...\n\n\nMC CLELLAN MHP\n412\n700\n199\nMULTIPOLYGON (((-119809.2 7...\n\n\nMAGNOLIA MUTUAL WATER\n96\n40\n34\nMULTIPOLYGON (((-137015.5 3...\n\n\nKORTHS PIRATES LAIR\nNA\n150\n64\nMULTIPOLYGON (((-137297.1 1...\n\n\nEL DORADO MOBILE HOME PARK\n1031\n256\n128\nMULTIPOLYGON (((-124533.7 5...\n\n\nRIVER'S EDGE MARINA & RESORT\nNA\n150\n83\nMULTIPOLYGON (((-141320.7 1...\n\n\nLAGUNA VILLAGE RV PARK\nNA\n32\n28\nMULTIPOLYGON (((-122362.2 4...\n\n\nSPINDRIFT MARINA\n13\n100\n50\nMULTIPOLYGON (((-140144.2 1...\n\n\nSAC CITY MOBILE HOME COMMUNITY LP\nNA\n350\n164\nMULTIPOLYGON (((-124542.8 5...\n\n\nORANGE VALE WATER COMPANY\n17910\n18005\n5684\nMULTIPOLYGON (((-104831.8 7...\n\n\nGOLDEN STATE WATER CO. - CORDOVA\n48645\n44928\n14798\nMULTIPOLYGON (((-105024.5 6...\n\n\nHOLIDAY MOBILE VILLAGE\nNA\n200\n115\nMULTIPOLYGON (((-123885.3 5...\n\n\nSOUTHWEST TRACT W M D [SWS]\n183\n150\n33\nMULTIPOLYGON (((-125846.9 5...\n\n\nCARMICHAEL WATER DISTRICT\n39773\n37897\n11704\nMULTIPOLYGON (((-112199 690...\n\n\nSCWA - ARDEN PARK VISTA\n9617\n10035\n3043\nMULTIPOLYGON (((-120321.1 6...\n\n\nSCWA - LAGUNA/VINEYARD\n157782\n172666\n47411\nMULTIPOLYGON (((-125203.9 4...\n\n\nRIO COSUMNES CORRECTIONAL CENTER [SWS]\nNA\n2800\n13\nMULTIPOLYGON (((-124028.8 3...\n\n\nSCWA MATHER-SUNRISE\n19629\n22839\n6921\nMULTIPOLYGON (((-108416.1 5...\n\n\nTUNNEL TRAILER PARK\nNA\n44\n21\nMULTIPOLYGON (((-136156.2 2...\n\n\nIMPERIAL MANOR MOBILEHOME COMMUNITY\n242\n200\n186\nMULTIPOLYGON (((-115157 740...\n\n\nCALAM - ISLETON\n519\n1581\n480\nMULTIPOLYGON (((-138559.3 1...\n\n\nFOLSOM, CITY OF - ASHLAND\n3719\n3538\n1079\nMULTIPOLYGON (((-100505 774...\n\n\nLOCKE WATER WORKS CO [SWS]\n76\n80\n44\nMULTIPOLYGON (((-131976.7 2...\n\n\nDEL PASO MANOR COUNTY WATER DI\n5784\n4520\n1796\nMULTIPOLYGON (((-120274.9 6...\n\n\nEAST WALNUT GROVE [SWS]\n347\n300\n166\nMULTIPOLYGON (((-132506.6 2...\n\n\nFOLSOM STATE PRISON\n32\n9703\n2790\nMULTIPOLYGON (((-99838.11 7...\n\n\nCALAM - ARDEN\n11512\n3908\n1185\nMULTIPOLYGON (((-123013.9 6...\n\n\nEDGEWATER MOBILE HOME PARK\nNA\n40\n22\nMULTIPOLYGON (((-153715.8 7...\n\n\nCALAM - LINCOLN OAKS\n44168\n47487\n14390\nMULTIPOLYGON (((-113737.5 7...\n\n\nVIEIRA'S RESORT, INC\n67\n150\n107\nMULTIPOLYGON (((-143708.1 1...\n\n\nFLORIN COUNTY WATER DISTRICT\n11114\n7831\n2323\nMULTIPOLYGON (((-119638.3 5...\n\n\nWESTERNER MOBILE HOME PARK\n20\n65\n49\nMULTIPOLYGON (((-122693.1 4...\n\n\nEL DORADO WEST MHP\n227\n172\n128\nMULTIPOLYGON (((-124742.1 5...\n\n\nTOKAY PARK WATER CO\n530\n525\n198\nMULTIPOLYGON (((-122789.8 5...\n\n\nLAGUNA DEL SOL INC\nNA\n470\n112\nMULTIPOLYGON (((-105025.5 4...\n\n\nOLYMPIA MOBILODGE\n176\n450\n200\nMULTIPOLYGON (((-123549.9 5...\n\n\nGOLDEN STATE WATER CO - ARDEN WATER SERV\n6516\n5125\n1716\nMULTIPOLYGON (((-120307.3 6...\n\n\nELEVEN OAKS MOBILE HOME COMMUNITY\n368\n262\n136\nMULTIPOLYGON (((-119816 721...\n\n\nCALAM - ANTELOPE\n36641\n34720\n10528\nMULTIPOLYGON (((-123334.7 8...\n\n\nCALIFORNIA STATE FAIR\nNA\n650\n269\nMULTIPOLYGON (((-125658 651...\n\n\nPLANTATION MOBILE HOME PARK\nNA\n44\n44\nMULTIPOLYGON (((-124338.4 5...\n\n\nCALAM - PARKWAY\n57391\n48738\n14779\nMULTIPOLYGON (((-123335.4 5...\n\n\nCITRUS HEIGHTS WATER DISTRICT\n69931\n65911\n19940\nMULTIPOLYGON (((-113645.4 7...\n\n\nSEQUOIA WATER ASSOC\nNA\n54\n18\nMULTIPOLYGON (((-136917.7 3...\n\n\nFAIR OAKS WATER DISTRICT\n38819\n35114\n14293\nMULTIPOLYGON (((-107763.5 6...\n\n\nRANCHO MARINA\nNA\n250\n77\nMULTIPOLYGON (((-138162.3 1...\n\n\nFREEPORT MARINA\n105\n42\n27\nMULTIPOLYGON (((-130871.1 5...\n\n\nHAPPY HARBOR (SWS)\nNA\n60\n45\nMULTIPOLYGON (((-139870.3 1...\n\n\nFOLSOM, CITY OF - MAIN\n65206\n68122\n21424\nMULTIPOLYGON (((-107067.9 6...\n\n\nRANCHO MURIETA COMMUNITY SERVI\n4853\n5744\n2726\nMULTIPOLYGON (((-95334.2 52...\n\n\nCAL AM FRUITRIDGE VISTA\n21116\n15385\n4667\nMULTIPOLYGON (((-125839.3 5...\n\n\nB & W RESORT MARINA\nNA\n100\n37\nMULTIPOLYGON (((-138335.4 1...\n\n\nCALAM - SUBURBAN ROSEMONT\n60288\n53563\n16238\nMULTIPOLYGON (((-120054.6 5...\n\n\nSAN JUAN WATER DISTRICT\n30997\n29641\n10672\nMULTIPOLYGON (((-100141.1 8...\n\n\nELK GROVE WATER SERVICE\n42652\n42540\n12882\nMULTIPOLYGON (((-113074.8 4...\n\n\nDELTA CROSSING MHP\nNA\n30\n22\nMULTIPOLYGON (((-132728.4 4...\n\n\nGALT, CITY OF\n26962\n26536\n7471\nMULTIPOLYGON (((-115624.6 2...\n\n\nLINCOLN CHAN-HOME RANCH\nNA\n33\n19\nMULTIPOLYGON (((-137040.3 3...\n\n\nRIO LINDA/ELVERTA COMMUNITY WATER DIST\n15102\n14381\n4621\nMULTIPOLYGON (((-125758.1 7...\n\n\nSACRAMENTO SUBURBAN WATER DISTRICT\n190956\n184385\n46573\nMULTIPOLYGON (((-115313.2 7...\n\n\nCALAM - WALNUT GROVE\n388\n651\n197\nMULTIPOLYGON (((-132035.3 2...\n\n\nCITY OF SACRAMENTO MAIN\n525914\n510931\n142794\nMULTIPOLYGON (((-128741.8 5..."
  },
  {
    "objectID": "example_census_race_ethnicity_calculation.html#sec-other-sources",
    "href": "example_census_race_ethnicity_calculation.html#sec-other-sources",
    "title": "Estimating Demographics of Custom Spatial Features",
    "section": "12 Working with Other Source Datasets",
    "text": "12 Working with Other Source Datasets\n\n\n\n\n\n\nWarning\n\n\n\nThis section is in progress.\n\n\nIn addition to using census data, it’s possible to use other types of source datasets to compute characteristics of custom target areas like water systems. The process is generally likely to be similar to the processes shown above using census data, but each source dataset may require unique considerations (e.g., to handle missing values, uncertain boundaries, etc.).\n\n12.1 CalEnviroScreen\n[TO DO: example computation of weighted average CES scores]\nNotes to consider:\n\nSome census tracts are missing CES scores (overall and/or for certain indicators), and have to deal with those missing values somehow\nCES 4.0 is tract-level data, and uses 2010 census boundaries (so boundaries won’t match current ACS or decennial boundaries)\nCES 4.0 boundaries are simplified, and boundaries between tracts are not consistent – for some types of analysis (especially when looking at point data - e.g., facilities), it may be better to use the original TIGER dataset (available from either the tidycensus or tigris R packages)"
  }
]